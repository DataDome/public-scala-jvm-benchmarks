
#################################################################
#######       JVM Performance Benchmarks Test Suite       #######
#################################################################

+=======================+
| [1/7] Load Properties |
+=======================+
Configuration properties have been successfully loaded from the './settings/config.properties' file.
Constant properties have been successfully loaded from the './settings/constants.properties' file.

+================================+
| [2/7] Load Architecture and OS |
+================================+
Hardware Architecture: x86_64
Operating system: linux

+========================+
| [3/7] JQ Configuration |
+========================+
JSON processor: scripts/jq/jq-linux-x86_64

+===============================+
| [4/7] Compile benchmark suite |
+===============================+
Compiling benchmark suite...
sbt clean Jmh/assembly

[info] welcome to sbt 1.11.6 (Eclipse Adoptium Java 21.0.8)
[info] loading settings for project public-scala-jvm-benchmarks-build from plugins.sbt...
[info] loading project definition from /home/grenoux/Repositories/public-scala-jvm-benchmarks/project
[info] loading settings for project public-scala-jvm-benchmarks from build.sbt...
[info] set current project to scala-jvm-benchmarks (in build file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/)
[success] Total time: 0 s, completed Oct 16, 2025, 12:28:27 PM
[info] compiling 78 Scala sources and 77 Java sources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes ...
[warn] -- [E198] Unused Symbol Warning: /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/scala/co/datadome/pub/scalabenchmarks/jvms/AABaseBenchmark.scala:6:25 
[warn] 6 |import scala.compiletime.uninitialized
[warn]   |                         ^^^^^^^^^^^^^
[warn]   |                         unused import
[warn] -- [E198] Unused Symbol Warning: /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/scala/co/datadome/pub/scalabenchmarks/jvms/api/collections/ArrayBenchmark.scala:18:14 
[warn] 18 |  private val random: Random = new Random(16384)
[warn]    |              ^^^^^^
[warn]    |              unused private member
[warn] two warnings found
[info] /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/java/com/ionutbalosin/jvm/performance/benchmarks/miscellaneous/memoryaccess/SequentialCollectionReadAccessBenchmark.java: SequentialCollectionReadAccessBenchmark.java uses unchecked or unsafe operations.
[info] /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/java/com/ionutbalosin/jvm/performance/benchmarks/miscellaneous/memoryaccess/SequentialCollectionReadAccessBenchmark.java: Recompile with -Xlint:unchecked for details.
[info] done compiling
[info] running (fork) org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/src_managed/jmh /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/resource_managed/jmh default
[info] Processing 576 classes from /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes with "reflection" generator
[info] Writing out Java source to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/src_managed/jmh and resources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/resource_managed/jmh
[info] compiling 789 Java sources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes ...
[info] done compiling
[info] 40 file(s) merged using strategy 'Rename' (Run the task at debug level to see the details)
[info] Built: /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar
[info] Jar hash: 18a545e5db485ab807848c3f8140f0d1e913bbee
[success] Total time: 39 s, completed Oct 16, 2025, 12:29:06 PM
Compilation completed successfully.

+=============================================
| Running steps 5 to 7 with openjdk-hotspot-vm
+=============================================
| Thu Oct 16 12:29:07 PM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/25-tem
JDK version: 25
JVM name: OpenJDK HotSpot VM
JVM identifier: openjdk-hotspot-vm

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk25.json
JMH output folder: results/jdk-25/x86_64/jmh/openjdk-hotspot-vm

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running OpenJDK HotSpot VM test suite ...
Creating folder: 'results/jdk-25/x86_64/jmh/openjdk-hotspot-vm' ...

Running ListBenchmark benchmark ...
Thu Oct 16 12:29:08 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ListBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ListBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 32528.706 ns/op
# Warmup Iteration   2: 28162.254 ns/op
# Warmup Iteration   3: 28060.724 ns/op
# Warmup Iteration   4: 28068.481 ns/op
# Warmup Iteration   5: 28063.621 ns/op
Iteration   1: 28067.839 ns/op
Iteration   2: 28075.949 ns/op
Iteration   3: 28080.277 ns/op
Iteration   4: 34701.516 ns/op
Iteration   5: 28065.924 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap":
  29398.301 ±(99.9%) 11415.591 ns/op [Average]
  (min, avg, max) = (28065.924, 29398.301, 34701.516), stdev = 2964.593
  CI (99.9%): [17982.710, 40813.893] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 10.00% complete, ETA 00:07:39
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3456.161 ns/op
# Warmup Iteration   2: 2976.617 ns/op
# Warmup Iteration   3: 3473.543 ns/op
# Warmup Iteration   4: 4277.832 ns/op
# Warmup Iteration   5: 5032.032 ns/op
Iteration   1: 2960.905 ns/op
Iteration   2: 2957.307 ns/op
Iteration   3: 2950.329 ns/op
Iteration   4: 4879.650 ns/op
Iteration   5: 3914.532 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft":
  3532.545 ±(99.9%) 3310.911 ns/op [Average]
  (min, avg, max) = (2950.329, 3532.545, 4879.650), stdev = 859.833
  CI (99.9%): [221.634, 6843.456] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:06:47
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2446.169 ns/op
# Warmup Iteration   2: 2103.522 ns/op
# Warmup Iteration   3: 2280.661 ns/op
# Warmup Iteration   4: 2280.334 ns/op
# Warmup Iteration   5: 2281.108 ns/op
Iteration   1: 2280.931 ns/op
Iteration   2: 2280.497 ns/op
Iteration   3: 2280.243 ns/op
Iteration   4: 2280.805 ns/op
Iteration   5: 2280.630 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop":
  2280.621 ±(99.9%) 1.034 ns/op [Average]
  (min, avg, max) = (2280.243, 2280.621, 2280.931), stdev = 0.268
  CI (99.9%): [2279.587, 2281.655] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 30.00% complete, ETA 00:05:56
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2537.986 ns/op
# Warmup Iteration   2: 2104.599 ns/op
# Warmup Iteration   3: 2278.094 ns/op
# Warmup Iteration   4: 2278.525 ns/op
# Warmup Iteration   5: 2277.609 ns/op
Iteration   1: 2278.753 ns/op
Iteration   2: 2278.463 ns/op
Iteration   3: 2277.989 ns/op
Iteration   4: 2278.497 ns/op
Iteration   5: 2278.439 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach":
  2278.428 ±(99.9%) 1.063 ns/op [Average]
  (min, avg, max) = (2277.989, 2278.428, 2278.753), stdev = 0.276
  CI (99.9%): [2277.365, 2279.491] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:05:05
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3236.107 ns/op
# Warmup Iteration   2: 2818.919 ns/op
# Warmup Iteration   3: 2817.243 ns/op
# Warmup Iteration   4: 2817.184 ns/op
# Warmup Iteration   5: 2817.246 ns/op
Iteration   1: 2817.365 ns/op
Iteration   2: 2817.322 ns/op
Iteration   3: 2811.230 ns/op
Iteration   4: 2808.479 ns/op
Iteration   5: 2808.462 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate":
  2812.571 ±(99.9%) 17.326 ns/op [Average]
  (min, avg, max) = (2808.462, 2812.571, 2817.365), stdev = 4.499
  CI (99.9%): [2795.246, 2829.897] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:04:14
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 9084.089 ns/op
# Warmup Iteration   2: 9605.472 ns/op
# Warmup Iteration   3: 7759.859 ns/op
# Warmup Iteration   4: 7755.939 ns/op
# Warmup Iteration   5: 7757.106 ns/op
Iteration   1: 10365.583 ns/op
Iteration   2: 11040.833 ns/op
Iteration   3: 11074.154 ns/op
Iteration   4: 11670.080 ns/op
Iteration   5: 12101.565 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map":
  11250.443 ±(99.9%) 2553.137 ns/op [Average]
  (min, avg, max) = (10365.583, 11250.443, 12101.565), stdev = 663.041
  CI (99.9%): [8697.307, 13803.580] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6906.451 ns/op
# Warmup Iteration   2: 8366.728 ns/op
# Warmup Iteration   3: 5249.759 ns/op
# Warmup Iteration   4: 4409.769 ns/op
# Warmup Iteration   5: 4412.143 ns/op
Iteration   1: 4412.774 ns/op
Iteration   2: 4413.736 ns/op
Iteration   3: 4410.998 ns/op
Iteration   4: 4412.220 ns/op
Iteration   5: 4410.861 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend":
  4412.118 ±(99.9%) 4.674 ns/op [Average]
  (min, avg, max) = (4410.861, 4412.118, 4413.736), stdev = 1.214
  CI (99.9%): [4407.444, 4416.791] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 70.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2160.037 ns/op
# Warmup Iteration   2: 2119.958 ns/op
# Warmup Iteration   3: 2119.584 ns/op
# Warmup Iteration   4: 2119.426 ns/op
# Warmup Iteration   5: 2119.521 ns/op
Iteration   1: 2119.739 ns/op
Iteration   2: 2119.634 ns/op
Iteration   3: 2119.701 ns/op
Iteration   4: 2119.711 ns/op
Iteration   5: 2119.672 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size":
  2119.691 ±(99.9%) 0.154 ns/op [Average]
  (min, avg, max) = (2119.634, 2119.691, 2119.739), stdev = 0.040
  CI (99.9%): [2119.538, 2119.845] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5575.976 ns/op
# Warmup Iteration   2: 4967.905 ns/op
# Warmup Iteration   3: 4152.712 ns/op
# Warmup Iteration   4: 3581.240 ns/op
# Warmup Iteration   5: 4111.544 ns/op
Iteration   1: 5201.107 ns/op
Iteration   2: 3457.218 ns/op
Iteration   3: 5068.327 ns/op
Iteration   4: 4283.535 ns/op
Iteration   5: 3434.860 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse":
  4289.009 ±(99.9%) 3256.433 ns/op [Average]
  (min, avg, max) = (3434.860, 4289.009, 5201.107), stdev = 845.685
  CI (99.9%): [1032.576, 7545.442] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply
# Parameters: (size = 1000)

# Run progress: 90.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2855.755 ns/op
# Warmup Iteration   2: 2544.014 ns/op
# Warmup Iteration   3: 2449.244 ns/op
# Warmup Iteration   4: 2448.684 ns/op
# Warmup Iteration   5: 2447.763 ns/op
Iteration   1: 2447.725 ns/op
Iteration   2: 2449.387 ns/op
Iteration   3: 2449.352 ns/op
Iteration   4: 2448.068 ns/op
Iteration   5: 2447.889 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply":
  2448.484 ±(99.9%) 3.148 ns/op [Average]
  (min, avg, max) = (2447.725, 2448.484, 2449.387), stdev = 0.817
  CI (99.9%): [2445.337, 2451.632] (assumes normal distribution)


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score       Error  Units
ListBenchmark.flatMap      1000  avgt    5  29398.301 ± 11415.591  ns/op
ListBenchmark.foldLeft     1000  avgt    5   3532.545 ±  3310.911  ns/op
ListBenchmark.for_loop     1000  avgt    5   2280.621 ±     1.034  ns/op
ListBenchmark.foreach      1000  avgt    5   2278.428 ±     1.063  ns/op
ListBenchmark.iterate      1000  avgt    5   2812.571 ±    17.326  ns/op
ListBenchmark.map          1000  avgt    5  11250.443 ±  2553.137  ns/op
ListBenchmark.prepend      1000  avgt    5   4412.118 ±     4.674  ns/op
ListBenchmark.read_size    1000  avgt    5   2119.691 ±     0.154  ns/op
ListBenchmark.reverse      1000  avgt    5   4289.009 ±  3256.433  ns/op
ListBenchmark.unapply      1000  avgt    5   2448.484 ±     3.148  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ListBenchmark.scala.csv

Finished ListBenchmark benchmark (Thu Oct 16 12:37:37 PM UTC 2025)
Thu Oct 16 12:37:37 PM UTC 2025

Running SetBenchmark benchmark ...
Thu Oct 16 12:37:38 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:07:30
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12634.106 ns/op
# Warmup Iteration   2: 10936.402 ns/op
# Warmup Iteration   3: 10432.715 ns/op
# Warmup Iteration   4: 10432.267 ns/op
# Warmup Iteration   5: 10432.850 ns/op
Iteration   1: 10432.581 ns/op
Iteration   2: 10432.627 ns/op
Iteration   3: 10433.983 ns/op
Iteration   4: 10439.555 ns/op
Iteration   5: 10439.693 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few":
  10435.688 ±(99.9%) 14.006 ns/op [Average]
  (min, avg, max) = (10432.581, 10435.688, 10439.693), stdev = 3.637
  CI (99.9%): [10421.682, 10449.694] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many
# Parameters: (size = 1000)

# Run progress: 11.11% complete, ETA 00:06:48
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14671.683 ns/op
# Warmup Iteration   2: 12525.367 ns/op
# Warmup Iteration   3: 12342.077 ns/op
# Warmup Iteration   4: 12337.737 ns/op
# Warmup Iteration   5: 12337.720 ns/op
Iteration   1: 12337.700 ns/op
Iteration   2: 12338.014 ns/op
Iteration   3: 12337.037 ns/op
Iteration   4: 12337.717 ns/op
Iteration   5: 12337.471 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many":
  12337.588 ±(99.9%) 1.399 ns/op [Average]
  (min, avg, max) = (12337.037, 12337.588, 12338.014), stdev = 0.363
  CI (99.9%): [12336.189, 12338.987] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 22.22% complete, ETA 00:05:56
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 23185.412 ns/op
# Warmup Iteration   2: 22737.302 ns/op
# Warmup Iteration   3: 19231.604 ns/op
# Warmup Iteration   4: 19220.957 ns/op
# Warmup Iteration   5: 19224.739 ns/op
Iteration   1: 19235.851 ns/op
Iteration   2: 19220.329 ns/op
Iteration   3: 19209.369 ns/op
Iteration   4: 23838.416 ns/op
Iteration   5: 19222.121 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  20145.217 ±(99.9%) 7949.971 ns/op [Average]
  (min, avg, max) = (19209.369, 20145.217, 23838.416), stdev = 2064.582
  CI (99.9%): [12195.246, 28095.189] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:05:05
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 922.229 ns/op
# Warmup Iteration   2: 1093.645 ns/op
# Warmup Iteration   3: 918.045 ns/op
# Warmup Iteration   4: 808.204 ns/op
# Warmup Iteration   5: 945.585 ns/op
Iteration   1: 915.037 ns/op
Iteration   2: 1161.651 ns/op
Iteration   3: 1152.686 ns/op
Iteration   4: 945.068 ns/op
Iteration   5: 765.656 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft":
  988.020 ±(99.9%) 649.720 ns/op [Average]
  (min, avg, max) = (765.656, 988.020, 1161.651), stdev = 168.730
  CI (99.9%): [338.300, 1637.740] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 44.44% complete, ETA 00:04:14
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 376.746 ns/op
# Warmup Iteration   2: 329.914 ns/op
# Warmup Iteration   3: 334.818 ns/op
# Warmup Iteration   4: 335.546 ns/op
# Warmup Iteration   5: 335.469 ns/op
Iteration   1: 335.510 ns/op
Iteration   2: 335.492 ns/op
Iteration   3: 335.668 ns/op
Iteration   4: 335.509 ns/op
Iteration   5: 335.459 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop":
  335.528 ±(99.9%) 0.313 ns/op [Average]
  (min, avg, max) = (335.459, 335.528, 335.668), stdev = 0.081
  CI (99.9%): [335.215, 335.841] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 55.56% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 377.009 ns/op
# Warmup Iteration   2: 509.582 ns/op
# Warmup Iteration   3: 408.320 ns/op
# Warmup Iteration   4: 335.357 ns/op
# Warmup Iteration   5: 335.140 ns/op
Iteration   1: 335.136 ns/op
Iteration   2: 335.141 ns/op
Iteration   3: 335.135 ns/op
Iteration   4: 412.952 ns/op
Iteration   5: 411.316 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach":
  365.936 ±(99.9%) 162.408 ns/op [Average]
  (min, avg, max) = (335.135, 365.936, 412.952), stdev = 42.177
  CI (99.9%): [203.528, 528.344] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 703.805 ns/op
# Warmup Iteration   2: 763.173 ns/op
# Warmup Iteration   3: 619.068 ns/op
# Warmup Iteration   4: 619.009 ns/op
# Warmup Iteration   5: 619.670 ns/op
Iteration   1: 619.104 ns/op
Iteration   2: 617.825 ns/op
Iteration   3: 619.613 ns/op
Iteration   4: 619.037 ns/op
Iteration   5: 618.284 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate":
  618.773 ±(99.9%) 2.738 ns/op [Average]
  (min, avg, max) = (617.825, 618.773, 619.613), stdev = 0.711
  CI (99.9%): [616.034, 621.511] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map
# Parameters: (size = 1000)

# Run progress: 77.78% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4861.311 ns/op
# Warmup Iteration   2: 5161.411 ns/op
# Warmup Iteration   3: 6446.975 ns/op
# Warmup Iteration   4: 4206.837 ns/op
# Warmup Iteration   5: 4205.735 ns/op
Iteration   1: 4204.822 ns/op
Iteration   2: 4200.904 ns/op
Iteration   3: 4202.991 ns/op
Iteration   4: 4199.493 ns/op
Iteration   5: 4198.573 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map":
  4201.357 ±(99.9%) 9.838 ns/op [Average]
  (min, avg, max) = (4198.573, 4201.357, 4204.822), stdev = 2.555
  CI (99.9%): [4191.519, 4211.194] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 88.89% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.317 ns/op
# Warmup Iteration   2: 1.148 ns/op
# Warmup Iteration   3: 1.129 ns/op
# Warmup Iteration   4: 1.124 ns/op
# Warmup Iteration   5: 1.125 ns/op
Iteration   1: 1.124 ns/op
Iteration   2: 1.124 ns/op
Iteration   3: 1.125 ns/op
Iteration   4: 1.125 ns/op
Iteration   5: 1.125 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size":
  1.125 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.124, 1.125, 1.125), stdev = 0.001
  CI (99.9%): [1.124, 1.125] (assumes normal distribution)


# Run complete. Total time: 00:07:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt      Score      Error  Units
SetBenchmark.contains_few     1000  avgt    5  10435.688 ±   14.006  ns/op
SetBenchmark.contains_many    1000  avgt    5  12337.588 ±    1.399  ns/op
SetBenchmark.flatMap          1000  avgt    5  20145.217 ± 7949.971  ns/op
SetBenchmark.foldLeft         1000  avgt    5    988.020 ±  649.720  ns/op
SetBenchmark.for_loop         1000  avgt    5    335.528 ±    0.313  ns/op
SetBenchmark.foreach          1000  avgt    5    365.936 ±  162.408  ns/op
SetBenchmark.iterate          1000  avgt    5    618.773 ±    2.738  ns/op
SetBenchmark.map              1000  avgt    5   4201.357 ±    9.838  ns/op
SetBenchmark.read_size        1000  avgt    5      1.125 ±    0.001  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Thu Oct 16 12:45:16 PM UTC 2025)
Thu Oct 16 12:45:16 PM UTC 2025

Running SetAddBenchmark benchmark ...
Thu Oct 16 12:45:17 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetAddBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/SetAddBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 10987.570 ns/op
# Warmup Iteration   2: 9617.328 ns/op
# Warmup Iteration   3: 8234.658 ns/op
# Warmup Iteration   4: 8234.739 ns/op
# Warmup Iteration   5: 8244.615 ns/op
Iteration   1: 8232.380 ns/op
Iteration   2: 8237.142 ns/op
Iteration   3: 8241.634 ns/op
Iteration   4: 8229.870 ns/op
Iteration   5: 8231.062 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10":
  8234.417 ±(99.9%) 18.824 ns/op [Average]
  (min, avg, max) = (8229.870, 8234.417, 8241.634), stdev = 4.888
  CI (99.9%): [8215.594, 8253.241] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 27815.081 ns/op
# Warmup Iteration   2: 19173.181 ns/op
# Warmup Iteration   3: 17846.496 ns/op
# Warmup Iteration   4: 17862.903 ns/op
# Warmup Iteration   5: 17862.091 ns/op
Iteration   1: 17826.325 ns/op
Iteration   2: 21049.125 ns/op
Iteration   3: 17834.233 ns/op
Iteration   4: 21302.450 ns/op
Iteration   5: 22201.944 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100":
  20042.815 ±(99.9%) 7950.400 ns/op [Average]
  (min, avg, max) = (17826.325, 20042.815, 22201.944), stdev = 2064.694
  CI (99.9%): [12092.416, 27993.215] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score      Error  Units
SetAddBenchmark.add_10     1000  avgt    5   8234.417 ±   18.824  ns/op
SetAddBenchmark.add_100    1000  avgt    5  20042.815 ± 7950.400  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/SetAddBenchmark.scala.csv

Finished SetAddBenchmark benchmark (Thu Oct 16 12:46:59 PM UTC 2025)
Thu Oct 16 12:46:59 PM UTC 2025

Running VectorBenchmark benchmark ...
Thu Oct 16 12:46:59 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 27024.375 ns/op
# Warmup Iteration   2: 18629.194 ns/op
# Warmup Iteration   3: 18539.621 ns/op
# Warmup Iteration   4: 18565.182 ns/op
# Warmup Iteration   5: 18546.045 ns/op
Iteration   1: 18522.730 ns/op
Iteration   2: 18533.955 ns/op
Iteration   3: 27092.116 ns/op
Iteration   4: 29516.983 ns/op
Iteration   5: 27979.714 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append":
  24329.100 ±(99.9%) 20662.302 ns/op [Average]
  (min, avg, max) = (18522.730, 24329.100, 29516.983), stdev = 5365.934
  CI (99.9%): [3666.798, 44991.402] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 9.09% complete, ETA 00:08:29
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 48831.213 ns/op
# Warmup Iteration   2: 42250.486 ns/op
# Warmup Iteration   3: 43994.496 ns/op
# Warmup Iteration   4: 43966.234 ns/op
# Warmup Iteration   5: 59742.884 ns/op
Iteration   1: 43957.106 ns/op
Iteration   2: 43966.668 ns/op
Iteration   3: 43972.243 ns/op
Iteration   4: 43958.997 ns/op
Iteration   5: 64566.204 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  48084.244 ±(99.9%) 35478.671 ns/op [Average]
  (min, avg, max) = (43957.106, 48084.244, 64566.204), stdev = 9213.698
  CI (99.9%): [12605.573, 83562.914] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 18.18% complete, ETA 00:07:37
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6311.927 ns/op
# Warmup Iteration   2: 5693.040 ns/op
# Warmup Iteration   3: 6347.703 ns/op
# Warmup Iteration   4: 5520.796 ns/op
# Warmup Iteration   5: 5425.986 ns/op
Iteration   1: 5424.591 ns/op
Iteration   2: 6345.342 ns/op
Iteration   3: 8352.342 ns/op
Iteration   4: 5424.541 ns/op
Iteration   5: 7894.187 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft":
  6688.201 ±(99.9%) 5284.952 ns/op [Average]
  (min, avg, max) = (5424.541, 6688.201, 8352.342), stdev = 1372.485
  CI (99.9%): [1403.248, 11973.153] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 27.27% complete, ETA 00:06:46
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 882.245 ns/op
# Warmup Iteration   2: 811.051 ns/op
# Warmup Iteration   3: 818.198 ns/op
# Warmup Iteration   4: 818.158 ns/op
# Warmup Iteration   5: 818.166 ns/op
Iteration   1: 818.188 ns/op
Iteration   2: 818.185 ns/op
Iteration   3: 818.211 ns/op
Iteration   4: 818.249 ns/op
Iteration   5: 818.213 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop":
  818.209 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (818.185, 818.209, 818.249), stdev = 0.026
  CI (99.9%): [818.109, 818.309] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 36.36% complete, ETA 00:05:55
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 876.408 ns/op
# Warmup Iteration   2: 810.973 ns/op
# Warmup Iteration   3: 818.133 ns/op
# Warmup Iteration   4: 818.120 ns/op
# Warmup Iteration   5: 818.117 ns/op
Iteration   1: 818.152 ns/op
Iteration   2: 818.156 ns/op
Iteration   3: 818.143 ns/op
Iteration   4: 818.125 ns/op
Iteration   5: 818.170 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach":
  818.149 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (818.125, 818.149, 818.170), stdev = 0.017
  CI (99.9%): [818.084, 818.214] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 45.45% complete, ETA 00:05:04
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2329.463 ns/op
# Warmup Iteration   2: 1965.027 ns/op
# Warmup Iteration   3: 1739.187 ns/op
# Warmup Iteration   4: 1740.749 ns/op
# Warmup Iteration   5: 1741.663 ns/op
Iteration   1: 1740.732 ns/op
Iteration   2: 1737.782 ns/op
Iteration   3: 1737.647 ns/op
Iteration   4: 1738.051 ns/op
Iteration   5: 1737.889 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate":
  1738.420 ±(99.9%) 5.009 ns/op [Average]
  (min, avg, max) = (1737.647, 1738.420, 1740.732), stdev = 1.301
  CI (99.9%): [1733.411, 1743.430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map
# Parameters: (size = 1000)

# Run progress: 54.55% complete, ETA 00:04:13
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5736.267 ns/op
# Warmup Iteration   2: 4289.136 ns/op
# Warmup Iteration   3: 4269.435 ns/op
# Warmup Iteration   4: 4908.733 ns/op
# Warmup Iteration   5: 4328.893 ns/op
Iteration   1: 5026.756 ns/op
Iteration   2: 4267.327 ns/op
Iteration   3: 7486.807 ns/op
Iteration   4: 6103.031 ns/op
Iteration   5: 7150.902 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map":
  6006.965 ±(99.9%) 5270.919 ns/op [Average]
  (min, avg, max) = (4267.327, 6006.965, 7486.807), stdev = 1368.841
  CI (99.9%): [736.045, 11277.884] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access
# Parameters: (size = 1000)

# Run progress: 63.64% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5940.033 ns/op
# Warmup Iteration   2: 5984.308 ns/op
# Warmup Iteration   3: 4971.862 ns/op
# Warmup Iteration   4: 4973.021 ns/op
# Warmup Iteration   5: 4972.306 ns/op
Iteration   1: 4973.007 ns/op
Iteration   2: 4971.225 ns/op
Iteration   3: 4971.841 ns/op
Iteration   4: 4972.122 ns/op
Iteration   5: 4972.362 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access":
  4972.111 ±(99.9%) 2.529 ns/op [Average]
  (min, avg, max) = (4971.225, 4972.111, 4973.007), stdev = 0.657
  CI (99.9%): [4969.583, 4974.640] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 72.73% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.057 ns/op
# Warmup Iteration   2: 0.877 ns/op
# Warmup Iteration   3: 0.859 ns/op
# Warmup Iteration   4: 0.859 ns/op
# Warmup Iteration   5: 0.859 ns/op
Iteration   1: 0.859 ns/op
Iteration   2: 0.859 ns/op
Iteration   3: 0.859 ns/op
Iteration   4: 0.859 ns/op
Iteration   5: 0.859 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size":
  0.859 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.859, 0.859, 0.859), stdev = 0.001
  CI (99.9%): [0.859, 0.859] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 81.82% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 10219.260 ns/op
# Warmup Iteration   2: 9090.432 ns/op
# Warmup Iteration   3: 9436.578 ns/op
# Warmup Iteration   4: 9434.732 ns/op
# Warmup Iteration   5: 9435.861 ns/op
Iteration   1: 9429.728 ns/op
Iteration   2: 9432.515 ns/op
Iteration   3: 9431.877 ns/op
Iteration   4: 9493.428 ns/op
Iteration   5: 9437.499 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse":
  9445.009 ±(99.9%) 104.799 ns/op [Average]
  (min, avg, max) = (9429.728, 9445.009, 9493.428), stdev = 27.216
  CI (99.9%): [9340.210, 9549.809] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access
# Parameters: (size = 1000)

# Run progress: 90.91% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1848.767 ns/op
# Warmup Iteration   2: 1555.680 ns/op
# Warmup Iteration   3: 1653.628 ns/op
# Warmup Iteration   4: 1654.197 ns/op
# Warmup Iteration   5: 1654.164 ns/op
Iteration   1: 1654.232 ns/op
Iteration   2: 1654.218 ns/op
Iteration   3: 1654.291 ns/op
Iteration   4: 1654.641 ns/op
Iteration   5: 1652.955 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access":
  1654.068 ±(99.9%) 2.485 ns/op [Average]
  (min, avg, max) = (1652.955, 1654.068, 1654.641), stdev = 0.645
  CI (99.9%): [1651.582, 1656.553] (assumes normal distribution)


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (size)  Mode  Cnt      Score       Error  Units
VectorBenchmark.append               1000  avgt    5  24329.100 ± 20662.302  ns/op
VectorBenchmark.flatMap              1000  avgt    5  48084.244 ± 35478.671  ns/op
VectorBenchmark.foldLeft             1000  avgt    5   6688.201 ±  5284.952  ns/op
VectorBenchmark.for_loop             1000  avgt    5    818.209 ±     0.100  ns/op
VectorBenchmark.foreach              1000  avgt    5    818.149 ±     0.065  ns/op
VectorBenchmark.iterate              1000  avgt    5   1738.420 ±     5.009  ns/op
VectorBenchmark.map                  1000  avgt    5   6006.965 ±  5270.919  ns/op
VectorBenchmark.random_access        1000  avgt    5   4972.111 ±     2.529  ns/op
VectorBenchmark.read_size            1000  avgt    5      0.859 ±     0.001  ns/op
VectorBenchmark.reverse              1000  avgt    5   9445.009 ±   104.799  ns/op
VectorBenchmark.sequential_access    1000  avgt    5   1654.068 ±     2.485  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Thu Oct 16 12:56:18 PM UTC 2025)
Thu Oct 16 12:56:18 PM UTC 2025

Running FutureBenchmark benchmark ...
Thu Oct 16 12:56:19 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FutureBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/FutureBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 21.126 us/op
# Warmup Iteration   2: 19.190 us/op
# Warmup Iteration   3: 13.850 us/op
# Warmup Iteration   4: 17.270 us/op
# Warmup Iteration   5: 18.485 us/op
Iteration   1: 19.728 us/op
Iteration   2: 15.410 us/op
Iteration   3: 16.857 us/op
Iteration   4: 23.816 us/op
Iteration   5: 14.704 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  18.103 ±(99.9%) 14.360 us/op [Average]
  (min, avg, max) = (14.704, 18.103, 23.816), stdev = 3.729
  CI (99.9%): [3.743, 32.463] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 10000)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 53.330 us/op
# Warmup Iteration   2: 37.553 us/op
# Warmup Iteration   3: 46.554 us/op
# Warmup Iteration   4: 30.452 us/op
# Warmup Iteration   5: 41.773 us/op
Iteration   1: 40.117 us/op
Iteration   2: 49.066 us/op
Iteration   3: 44.636 us/op
Iteration   4: 39.201 us/op
Iteration   5: 51.809 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  44.966 ±(99.9%) 21.134 us/op [Average]
  (min, avg, max) = (39.201, 44.966, 51.809), stdev = 5.488
  CI (99.9%): [23.832, 66.100] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 1000)

# Run progress: 50.00% complete, ETA 00:01:42
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.544 us/op
# Warmup Iteration   2: 1.749 us/op
# Warmup Iteration   3: 1.254 us/op
# Warmup Iteration   4: 1.249 us/op
# Warmup Iteration   5: 1.249 us/op
Iteration   1: 1.249 us/op
Iteration   2: 1.249 us/op
Iteration   3: 1.249 us/op
Iteration   4: 1.249 us/op
Iteration   5: 1.249 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  1.249 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.249, 1.249, 1.249), stdev = 0.001
  CI (99.9%): [1.249, 1.250] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 10000)

# Run progress: 75.00% complete, ETA 00:00:51
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16.120 us/op
# Warmup Iteration   2: 14.062 us/op
# Warmup Iteration   3: 11.612 us/op
# Warmup Iteration   4: 11.545 us/op
# Warmup Iteration   5: 11.730 us/op
Iteration   1: 12.083 us/op
Iteration   2: 11.980 us/op
Iteration   3: 12.045 us/op
Iteration   4: 11.994 us/op
Iteration   5: 12.054 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  12.031 ±(99.9%) 0.166 us/op [Average]
  (min, avg, max) = (11.980, 12.031, 12.083), stdev = 0.043
  CI (99.9%): [11.865, 12.197] (assumes normal distribution)


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                      (computationSize)  Mode  Cnt   Score    Error  Units
FutureBenchmark.run_future                  1000  avgt    5  18.103 ± 14.360  us/op
FutureBenchmark.run_future                 10000  avgt    5  44.966 ± 21.134  us/op
FutureBenchmark.run_no_future               1000  avgt    5   1.249 ±  0.001  us/op
FutureBenchmark.run_no_future              10000  avgt    5  12.031 ±  0.166  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/FutureBenchmark.scala.csv

Finished FutureBenchmark benchmark (Thu Oct 16 12:59:44 PM UTC 2025)
Thu Oct 16 12:59:44 PM UTC 2025

Running ScalaRandomBenchmark benchmark ...
Thu Oct 16 12:59:44 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ScalaRandomBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ScalaRandomBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.161 ns/op
# Warmup Iteration   2: 10.320 ns/op
# Warmup Iteration   3: 10.311 ns/op
# Warmup Iteration   4: 10.311 ns/op
# Warmup Iteration   5: 10.311 ns/op
Iteration   1: 10.311 ns/op
Iteration   2: 10.311 ns/op
Iteration   3: 10.311 ns/op
Iteration   4: 10.311 ns/op
Iteration   5: 10.311 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean":
  10.311 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.311, 10.311, 10.311), stdev = 0.001
  CI (99.9%): [10.311, 10.311] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double

# Run progress: 16.67% complete, ETA 00:04:13
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.420 ns/op
# Warmup Iteration   2: 20.648 ns/op
# Warmup Iteration   3: 20.630 ns/op
# Warmup Iteration   4: 20.630 ns/op
# Warmup Iteration   5: 20.631 ns/op
Iteration   1: 20.630 ns/op
Iteration   2: 20.630 ns/op
Iteration   3: 20.630 ns/op
Iteration   4: 20.630 ns/op
Iteration   5: 20.630 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double":
  20.630 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.630, 20.630, 20.630), stdev = 0.001
  CI (99.9%): [20.630, 20.630] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float

# Run progress: 33.33% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.486 ns/op
# Warmup Iteration   2: 10.319 ns/op
# Warmup Iteration   3: 10.310 ns/op
# Warmup Iteration   4: 10.310 ns/op
# Warmup Iteration   5: 10.310 ns/op
Iteration   1: 10.310 ns/op
Iteration   2: 10.310 ns/op
Iteration   3: 10.310 ns/op
Iteration   4: 10.310 ns/op
Iteration   5: 10.310 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float":
  10.310 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.310, 10.310, 10.310), stdev = 0.001
  CI (99.9%): [10.309, 10.310] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 78.039 ns/op
# Warmup Iteration   2: 66.743 ns/op
# Warmup Iteration   3: 66.423 ns/op
# Warmup Iteration   4: 66.421 ns/op
# Warmup Iteration   5: 66.409 ns/op
Iteration   1: 66.420 ns/op
Iteration   2: 66.421 ns/op
Iteration   3: 66.437 ns/op
Iteration   4: 66.420 ns/op
Iteration   5: 66.433 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian":
  66.426 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (66.420, 66.426, 66.437), stdev = 0.008
  CI (99.9%): [66.395, 66.458] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.713 ns/op
# Warmup Iteration   2: 10.322 ns/op
# Warmup Iteration   3: 10.314 ns/op
# Warmup Iteration   4: 10.314 ns/op
# Warmup Iteration   5: 10.314 ns/op
Iteration   1: 10.314 ns/op
Iteration   2: 10.314 ns/op
Iteration   3: 10.314 ns/op
Iteration   4: 10.314 ns/op
Iteration   5: 10.314 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int":
  10.314 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.314, 10.314, 10.314), stdev = 0.001
  CI (99.9%): [10.313, 10.315] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.080 ns/op
# Warmup Iteration   2: 20.645 ns/op
# Warmup Iteration   3: 20.630 ns/op
# Warmup Iteration   4: 20.630 ns/op
# Warmup Iteration   5: 20.630 ns/op
Iteration   1: 20.630 ns/op
Iteration   2: 20.631 ns/op
Iteration   3: 20.630 ns/op
Iteration   4: 20.631 ns/op
Iteration   5: 20.630 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long":
  20.631 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (20.630, 20.631, 20.631), stdev = 0.001
  CI (99.9%): [20.629, 20.632] (assumes normal distribution)


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt   Score    Error  Units
ScalaRandomBenchmark.next_boolean   avgt    5  10.311 ±  0.001  ns/op
ScalaRandomBenchmark.next_double    avgt    5  20.630 ±  0.001  ns/op
ScalaRandomBenchmark.next_float     avgt    5  10.310 ±  0.001  ns/op
ScalaRandomBenchmark.next_gaussian  avgt    5  66.426 ±  0.032  ns/op
ScalaRandomBenchmark.next_int       avgt    5  10.314 ±  0.001  ns/op
ScalaRandomBenchmark.next_long      avgt    5  20.631 ±  0.002  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ScalaRandomBenchmark.scala.csv

Finished ScalaRandomBenchmark benchmark (Thu Oct 16 01:04:49 PM UTC 2025)
Thu Oct 16 01:04:49 PM UTC 2025

Running StringConcatenationBenchmark benchmark ...
Thu Oct 16 01:04:49 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringConcatenationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/StringConcatenationBenchmark.scala.csv -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 292.963 ns/op
# Warmup Iteration   2: 242.719 ns/op
# Warmup Iteration   3: 236.631 ns/op
# Warmup Iteration   4: 236.511 ns/op
# Warmup Iteration   5: 300.453 ns/op
Iteration   1: 335.055 ns/op
                 gc.alloc.rate:      2322.448 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           4.000 counts
                 gc.time:            6.000 ms

Iteration   2: 293.855 ns/op
                 gc.alloc.rate:      2648.113 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   3: 293.750 ns/op
                 gc.alloc.rate:      2649.023 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms

Iteration   4: 236.557 ns/op
                 gc.alloc.rate:      3289.533 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   5: 279.046 ns/op
                 gc.alloc.rate:      2788.601 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  287.653 ±(99.9%) 136.242 ns/op [Average]
  (min, avg, max) = (236.557, 287.653, 335.055), stdev = 35.382
  CI (99.9%): [151.411, 423.895] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  2739.544 ±(99.9%) 1355.155 MB/sec [Average]
  (min, avg, max) = (2322.448, 2739.544, 3289.533), stdev = 351.929
  CI (99.9%): [1384.389, 4094.699] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  816.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
  CI (99.9%): [816.000, 816.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  41.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 8.200, 10.000), stdev = 1.483
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = UTF16, length = 128)

# Run progress: 8.33% complete, ETA 00:09:18
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 469.682 ns/op
# Warmup Iteration   2: 359.230 ns/op
# Warmup Iteration   3: 363.392 ns/op
# Warmup Iteration   4: 363.242 ns/op
# Warmup Iteration   5: 363.236 ns/op
Iteration   1: 363.193 ns/op
                 gc.alloc.rate:      3886.012 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 365.417 ns/op
                 gc.alloc.rate:      3862.349 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   3: 363.296 ns/op
                 gc.alloc.rate:      3884.907 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            12.000 ms

Iteration   4: 363.246 ns/op
                 gc.alloc.rate:      3885.450 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 363.181 ns/op
                 gc.alloc.rate:      3886.080 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  363.667 ±(99.9%) 3.772 ns/op [Average]
  (min, avg, max) = (363.181, 363.667, 365.417), stdev = 0.979
  CI (99.9%): [359.895, 367.438] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  3880.960 ±(99.9%) 40.102 MB/sec [Average]
  (min, avg, max) = (3862.349, 3880.960, 3886.080), stdev = 10.414
  CI (99.9%): [3840.857, 3921.062] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  1480.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1480.001, 1480.001, 1480.001), stdev = 0.001
  CI (99.9%): [1480.001, 1480.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  56.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 16.67% complete, ETA 00:08:26
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 284.967 ns/op
# Warmup Iteration   2: 242.105 ns/op
# Warmup Iteration   3: 280.629 ns/op
# Warmup Iteration   4: 238.063 ns/op
# Warmup Iteration   5: 255.399 ns/op
Iteration   1: 259.244 ns/op
                 gc.alloc.rate:      3001.632 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   2: 365.263 ns/op
                 gc.alloc.rate:      2130.383 MB/sec
                 gc.alloc.rate.norm: 816.001 B/op
                 gc.count:           4.000 counts
                 gc.time:            6.000 ms

Iteration   3: 238.277 ns/op
                 gc.alloc.rate:      3265.782 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 238.117 ns/op
                 gc.alloc.rate:      3267.997 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   5: 237.993 ns/op
                 gc.alloc.rate:      3269.650 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  267.779 ±(99.9%) 212.775 ns/op [Average]
  (min, avg, max) = (237.993, 267.779, 365.263), stdev = 55.257
  CI (99.9%): [55.004, 480.554] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  2987.089 ±(99.9%) 1896.785 MB/sec [Average]
  (min, avg, max) = (2130.383, 2987.089, 3269.650), stdev = 492.589
  CI (99.9%): [1090.304, 4883.873] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  816.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (816.000, 816.000, 816.001), stdev = 0.001
  CI (99.9%): [816.000, 816.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 8.800, 10.000), stdev = 1.643
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 25.00% complete, ETA 00:07:36
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 439.296 ns/op
# Warmup Iteration   2: 344.036 ns/op
# Warmup Iteration   3: 334.807 ns/op
# Warmup Iteration   4: 334.517 ns/op
# Warmup Iteration   5: 334.556 ns/op
Iteration   1: 334.451 ns/op
                 gc.alloc.rate:      4197.174 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 336.656 ns/op
                 gc.alloc.rate:      4169.680 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            15.000 ms

Iteration   3: 334.342 ns/op
                 gc.alloc.rate:      4198.546 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   4: 334.510 ns/op
                 gc.alloc.rate:      4196.440 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   5: 334.367 ns/op
                 gc.alloc.rate:      4198.155 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  334.865 ±(99.9%) 3.864 ns/op [Average]
  (min, avg, max) = (334.342, 334.865, 336.656), stdev = 1.003
  CI (99.9%): [331.001, 338.729] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  4191.999 ±(99.9%) 48.149 MB/sec [Average]
  (min, avg, max) = (4169.680, 4191.999, 4198.546), stdev = 12.504
  CI (99.9%): [4143.850, 4240.148] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  1472.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1472.000, 1472.000, 1472.000), stdev = 0.001
  CI (99.9%): [1472.000, 1472.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  42.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  61.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.200, 15.000), stdev = 1.789
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 33.33% complete, ETA 00:06:46
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 290.970 ns/op
# Warmup Iteration   2: 235.901 ns/op
# Warmup Iteration   3: 231.684 ns/op
# Warmup Iteration   4: 230.377 ns/op
# Warmup Iteration   5: 230.875 ns/op
Iteration   1: 230.614 ns/op
                 gc.alloc.rate:      3308.149 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   2: 230.610 ns/op
                 gc.alloc.rate:      3308.214 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   3: 230.343 ns/op
                 gc.alloc.rate:      3312.040 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   4: 281.287 ns/op
                 gc.alloc.rate:      2712.191 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 232.575 ns/op
                 gc.alloc.rate:      3280.204 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  241.086 ±(99.9%) 86.604 ns/op [Average]
  (min, avg, max) = (230.343, 241.086, 281.287), stdev = 22.491
  CI (99.9%): [154.482, 327.690] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  3184.160 ±(99.9%) 1017.138 MB/sec [Average]
  (min, avg, max) = (2712.191, 3184.160, 3312.040), stdev = 264.147
  CI (99.9%): [2167.022, 4201.297] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  800.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (800.000, 800.000, 800.000), stdev = 0.001
  CI (99.9%): [800.000, 800.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  46.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = UTF16, length = 128)

# Run progress: 41.67% complete, ETA 00:05:55
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 388.373 ns/op
# Warmup Iteration   2: 339.997 ns/op
# Warmup Iteration   3: 332.516 ns/op
# Warmup Iteration   4: 332.641 ns/op
# Warmup Iteration   5: 332.455 ns/op
Iteration   1: 332.589 ns/op
                 gc.alloc.rate:      4174.798 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   2: 332.554 ns/op
                 gc.alloc.rate:      4175.241 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   3: 332.635 ns/op
                 gc.alloc.rate:      4174.218 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            12.000 ms

Iteration   4: 332.430 ns/op
                 gc.alloc.rate:      4176.794 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 332.580 ns/op
                 gc.alloc.rate:      4174.852 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  332.557 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (332.430, 332.557, 332.635), stdev = 0.077
  CI (99.9%): [332.260, 332.855] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  4175.181 ±(99.9%) 3.747 MB/sec [Average]
  (min, avg, max) = (4174.218, 4175.181, 4176.794), stdev = 0.973
  CI (99.9%): [4171.434, 4178.927] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  1456.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
  CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  43.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  60.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.000, 13.000), stdev = 1.000
  CI (99.9%): [60.000, 60.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 50.00% complete, ETA 00:05:04
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 479.641 ns/op
# Warmup Iteration   2: 246.080 ns/op
# Warmup Iteration   3: 235.179 ns/op
# Warmup Iteration   4: 234.809 ns/op
# Warmup Iteration   5: 234.889 ns/op
Iteration   1: 234.867 ns/op
                 gc.alloc.rate:      3313.209 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   2: 234.965 ns/op
                 gc.alloc.rate:      3311.827 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   3: 234.840 ns/op
                 gc.alloc.rate:      3313.591 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   4: 234.902 ns/op
                 gc.alloc.rate:      3312.720 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   5: 234.877 ns/op
                 gc.alloc.rate:      3313.026 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  234.890 ±(99.9%) 0.182 ns/op [Average]
  (min, avg, max) = (234.840, 234.890, 234.965), stdev = 0.047
  CI (99.9%): [234.708, 235.073] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  3312.875 ±(99.9%) 2.561 MB/sec [Average]
  (min, avg, max) = (3311.827, 3312.875, 3313.591), stdev = 0.665
  CI (99.9%): [3310.314, 3315.436] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  816.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
  CI (99.9%): [816.000, 816.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  48.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 58.33% complete, ETA 00:04:13
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 416.098 ns/op
# Warmup Iteration   2: 578.040 ns/op
# Warmup Iteration   3: 342.403 ns/op
# Warmup Iteration   4: 338.867 ns/op
# Warmup Iteration   5: 338.643 ns/op
Iteration   1: 338.774 ns/op
                 gc.alloc.rate:      4143.603 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   2: 338.723 ns/op
                 gc.alloc.rate:      4144.232 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            12.000 ms

Iteration   3: 402.767 ns/op
                 gc.alloc.rate:      3485.200 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 338.611 ns/op
                 gc.alloc.rate:      4145.579 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   5: 338.424 ns/op
                 gc.alloc.rate:      4147.847 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  351.460 ±(99.9%) 110.444 ns/op [Average]
  (min, avg, max) = (338.424, 351.460, 402.767), stdev = 28.682
  CI (99.9%): [241.016, 461.904] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  4013.292 ±(99.9%) 1136.774 MB/sec [Average]
  (min, avg, max) = (3485.200, 4013.292, 4147.847), stdev = 295.217
  CI (99.9%): [2876.518, 5150.067] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  1472.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1472.000, 1472.000, 1472.001), stdev = 0.001
  CI (99.9%): [1472.000, 1472.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  41.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  59.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.800, 13.000), stdev = 1.304
  CI (99.9%): [59.000, 59.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 66.67% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 425.517 ns/op
# Warmup Iteration   2: 357.528 ns/op
# Warmup Iteration   3: 349.987 ns/op
# Warmup Iteration   4: 349.894 ns/op
# Warmup Iteration   5: 349.695 ns/op
Iteration   1: 349.792 ns/op
                 gc.alloc.rate:      5169.029 MB/sec
                 gc.alloc.rate.norm: 1896.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            15.000 ms

Iteration   2: 351.608 ns/op
                 gc.alloc.rate:      5142.328 MB/sec
                 gc.alloc.rate.norm: 1896.000 B/op
                 gc.count:           11.000 counts
                 gc.time:            17.000 ms

Iteration   3: 350.074 ns/op
                 gc.alloc.rate:      5164.863 MB/sec
                 gc.alloc.rate.norm: 1896.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   4: 410.320 ns/op
                 gc.alloc.rate:      4406.444 MB/sec
                 gc.alloc.rate.norm: 1896.001 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   5: 350.105 ns/op
                 gc.alloc.rate:      5164.323 MB/sec
                 gc.alloc.rate.norm: 1896.000 B/op
                 gc.count:           11.000 counts
                 gc.time:            15.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  362.380 ±(99.9%) 103.231 ns/op [Average]
  (min, avg, max) = (349.792, 362.380, 410.320), stdev = 26.809
  CI (99.9%): [259.149, 465.611] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  5009.397 ±(99.9%) 1298.524 MB/sec [Average]
  (min, avg, max) = (4406.444, 5009.397, 5169.029), stdev = 337.223
  CI (99.9%): [3710.873, 6307.922] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  1896.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1896.000, 1896.001, 1896.001), stdev = 0.001
  CI (99.9%): [1896.000, 1896.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  74.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (13.000, 14.800, 17.000), stdev = 1.483
  CI (99.9%): [74.000, 74.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = UTF16, length = 128)

# Run progress: 75.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 439.174 ns/op
# Warmup Iteration   2: 430.363 ns/op
# Warmup Iteration   3: 419.667 ns/op
# Warmup Iteration   4: 420.117 ns/op
# Warmup Iteration   5: 419.506 ns/op
Iteration   1: 420.033 ns/op
                 gc.alloc.rate:      7428.671 MB/sec
                 gc.alloc.rate.norm: 3272.001 B/op
                 gc.count:           15.000 counts
                 gc.time:            21.000 ms

Iteration   2: 420.300 ns/op
                 gc.alloc.rate:      7423.915 MB/sec
                 gc.alloc.rate.norm: 3272.001 B/op
                 gc.count:           15.000 counts
                 gc.time:            21.000 ms

Iteration   3: 420.385 ns/op
                 gc.alloc.rate:      7422.465 MB/sec
                 gc.alloc.rate.norm: 3272.001 B/op
                 gc.count:           16.000 counts
                 gc.time:            22.000 ms

Iteration   4: 419.741 ns/op
                 gc.alloc.rate:      7433.858 MB/sec
                 gc.alloc.rate.norm: 3272.001 B/op
                 gc.count:           15.000 counts
                 gc.time:            21.000 ms

Iteration   5: 419.757 ns/op
                 gc.alloc.rate:      7433.474 MB/sec
                 gc.alloc.rate.norm: 3272.001 B/op
                 gc.count:           15.000 counts
                 gc.time:            20.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  420.043 ±(99.9%) 1.149 ns/op [Average]
  (min, avg, max) = (419.741, 420.043, 420.385), stdev = 0.298
  CI (99.9%): [418.894, 421.192] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  7428.476 ±(99.9%) 20.276 MB/sec [Average]
  (min, avg, max) = (7422.465, 7428.476, 7433.858), stdev = 5.266
  CI (99.9%): [7408.200, 7448.753] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  3272.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (3272.001, 3272.001, 3272.001), stdev = 0.001
  CI (99.9%): [3272.001, 3272.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  76.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.200, 16.000), stdev = 0.447
  CI (99.9%): [76.000, 76.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  105.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 21.000, 22.000), stdev = 0.707
  CI (99.9%): [105.000, 105.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 83.33% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 275.718 ns/op
# Warmup Iteration   2: 232.008 ns/op
# Warmup Iteration   3: 229.869 ns/op
# Warmup Iteration   4: 260.263 ns/op
# Warmup Iteration   5: 310.402 ns/op
Iteration   1: 229.196 ns/op
                 gc.alloc.rate:      3328.610 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   2: 229.208 ns/op
                 gc.alloc.rate:      3328.440 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   3: 229.328 ns/op
                 gc.alloc.rate:      3326.703 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 229.100 ns/op
                 gc.alloc.rate:      3330.019 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 260.125 ns/op
                 gc.alloc.rate:      2932.770 MB/sec
                 gc.alloc.rate.norm: 800.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  235.391 ±(99.9%) 53.242 ns/op [Average]
  (min, avg, max) = (229.100, 235.391, 260.125), stdev = 13.827
  CI (99.9%): [182.149, 288.633] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  3249.308 ±(99.9%) 681.388 MB/sec [Average]
  (min, avg, max) = (2932.770, 3249.308, 3330.019), stdev = 176.954
  CI (99.9%): [2567.920, 3930.697] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  800.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (800.000, 800.000, 800.000), stdev = 0.001
  CI (99.9%): [800.000, 800.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  46.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = UTF16, length = 128)

# Run progress: 91.67% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 551.983 ns/op
# Warmup Iteration   2: 343.448 ns/op
# Warmup Iteration   3: 335.155 ns/op
# Warmup Iteration   4: 335.216 ns/op
# Warmup Iteration   5: 335.158 ns/op
Iteration   1: 335.143 ns/op
                 gc.alloc.rate:      4142.965 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 335.213 ns/op
                 gc.alloc.rate:      4142.113 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            12.000 ms

Iteration   3: 335.255 ns/op
                 gc.alloc.rate:      4141.594 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            13.000 ms

Iteration   4: 335.339 ns/op
                 gc.alloc.rate:      4140.557 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            14.000 ms

Iteration   5: 335.040 ns/op
                 gc.alloc.rate:      4144.203 MB/sec
                 gc.alloc.rate.norm: 1456.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  335.198 ±(99.9%) 0.436 ns/op [Average]
  (min, avg, max) = (335.040, 335.198, 335.339), stdev = 0.113
  CI (99.9%): [334.762, 335.634] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  4142.286 ±(99.9%) 5.320 MB/sec [Average]
  (min, avg, max) = (4140.557, 4142.286, 4144.203), stdev = 1.382
  CI (99.9%): [4136.967, 4147.606] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  1456.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
  CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  42.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  61.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.200, 14.000), stdev = 1.304
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)


# Run complete. Total time: 00:10:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                            (coder)  (length)  Mode  Cnt     Score      Error   Units
StringConcatenationBenchmark.java_string_buffer                       LATIN1       128  avgt    5   287.653 ±  136.242   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate         LATIN1       128  avgt    5  2739.544 ± 1355.155  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm    LATIN1       128  avgt    5   816.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count              LATIN1       128  avgt    5    28.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time               LATIN1       128  avgt    5    41.000                 ms
StringConcatenationBenchmark.java_string_buffer                        UTF16       128  avgt    5   363.667 ±    3.772   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate          UTF16       128  avgt    5  3880.960 ±   40.102  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm     UTF16       128  avgt    5  1480.001 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count               UTF16       128  avgt    5    40.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time                UTF16       128  avgt    5    56.000                 ms
StringConcatenationBenchmark.java_string_builder                      LATIN1       128  avgt    5   267.779 ±  212.775   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate        LATIN1       128  avgt    5  2987.089 ± 1896.785  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm   LATIN1       128  avgt    5   816.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count             LATIN1       128  avgt    5    30.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time              LATIN1       128  avgt    5    44.000                 ms
StringConcatenationBenchmark.java_string_builder                       UTF16       128  avgt    5   334.865 ±    3.864   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate         UTF16       128  avgt    5  4191.999 ±   48.149  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm    UTF16       128  avgt    5  1472.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count              UTF16       128  avgt    5    42.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time               UTF16       128  avgt    5    61.000                 ms
StringConcatenationBenchmark.plus_operator                            LATIN1       128  avgt    5   241.086 ±   86.604   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate              LATIN1       128  avgt    5  3184.160 ± 1017.138  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm         LATIN1       128  avgt    5   800.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                   LATIN1       128  avgt    5    33.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                    LATIN1       128  avgt    5    46.000                 ms
StringConcatenationBenchmark.plus_operator                             UTF16       128  avgt    5   332.557 ±    0.297   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate               UTF16       128  avgt    5  4175.181 ±    3.747  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm          UTF16       128  avgt    5  1456.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                    UTF16       128  avgt    5    43.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                     UTF16       128  avgt    5    60.000                 ms
StringConcatenationBenchmark.string_builder                           LATIN1       128  avgt    5   234.890 ±    0.182   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate             LATIN1       128  avgt    5  3312.875 ±    2.561  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm        LATIN1       128  avgt    5   816.000 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                  LATIN1       128  avgt    5    34.000             counts
StringConcatenationBenchmark.string_builder:gc.time                   LATIN1       128  avgt    5    48.000                 ms
StringConcatenationBenchmark.string_builder                            UTF16       128  avgt    5   351.460 ±  110.444   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate              UTF16       128  avgt    5  4013.292 ± 1136.774  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm         UTF16       128  avgt    5  1472.000 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                   UTF16       128  avgt    5    41.000             counts
StringConcatenationBenchmark.string_builder:gc.time                    UTF16       128  avgt    5    59.000                 ms
StringConcatenationBenchmark.string_concat                            LATIN1       128  avgt    5   362.380 ±  103.231   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate              LATIN1       128  avgt    5  5009.397 ± 1298.524  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm         LATIN1       128  avgt    5  1896.001 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                   LATIN1       128  avgt    5    51.000             counts
StringConcatenationBenchmark.string_concat:gc.time                    LATIN1       128  avgt    5    74.000                 ms
StringConcatenationBenchmark.string_concat                             UTF16       128  avgt    5   420.043 ±    1.149   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate               UTF16       128  avgt    5  7428.476 ±   20.276  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm          UTF16       128  avgt    5  3272.001 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                    UTF16       128  avgt    5    76.000             counts
StringConcatenationBenchmark.string_concat:gc.time                     UTF16       128  avgt    5   105.000                 ms
StringConcatenationBenchmark.template                                 LATIN1       128  avgt    5   235.391 ±   53.242   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                   LATIN1       128  avgt    5  3249.308 ±  681.388  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm              LATIN1       128  avgt    5   800.000 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                        LATIN1       128  avgt    5    33.000             counts
StringConcatenationBenchmark.template:gc.time                         LATIN1       128  avgt    5    46.000                 ms
StringConcatenationBenchmark.template                                  UTF16       128  avgt    5   335.198 ±    0.436   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                    UTF16       128  avgt    5  4142.286 ±    5.320  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm               UTF16       128  avgt    5  1456.000 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                         UTF16       128  avgt    5    42.000             counts
StringConcatenationBenchmark.template:gc.time                          UTF16       128  avgt    5    61.000                 ms

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/StringConcatenationBenchmark.scala.csv

Finished StringConcatenationBenchmark benchmark (Thu Oct 16 01:14:58 PM UTC 2025)
Thu Oct 16 01:14:58 PM UTC 2025

Running StringRegexMatcherBenchmark benchmark ...
Thu Oct 16 01:14:59 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringRegexMatcherBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/StringRegexMatcherBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 366.602 us/op
# Warmup Iteration   2: 280.161 us/op
# Warmup Iteration   3: 279.796 us/op
# Warmup Iteration   4: 280.103 us/op
# Warmup Iteration   5: 279.869 us/op
Iteration   1: 279.793 us/op
Iteration   2: 283.948 us/op
Iteration   3: 281.057 us/op
Iteration   4: 341.714 us/op
Iteration   5: 280.748 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture":
  293.452 ±(99.9%) 104.059 us/op [Average]
  (min, avg, max) = (279.793, 293.452, 341.714), stdev = 27.024
  CI (99.9%): [189.393, 397.511] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 213.676 us/op
# Warmup Iteration   2: 184.254 us/op
# Warmup Iteration   3: 184.259 us/op
# Warmup Iteration   4: 183.701 us/op
# Warmup Iteration   5: 189.601 us/op
Iteration   1: 191.764 us/op
Iteration   2: 191.712 us/op
Iteration   3: 191.707 us/op
Iteration   4: 191.683 us/op
Iteration   5: 191.654 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match":
  191.704 ±(99.9%) 0.157 us/op [Average]
  (min, avg, max) = (191.654, 191.704, 191.764), stdev = 0.041
  CI (99.9%): [191.547, 191.860] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 50.00% complete, ETA 00:01:42
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 345.113 us/op
# Warmup Iteration   2: 355.923 us/op
# Warmup Iteration   3: 362.930 us/op
# Warmup Iteration   4: 296.291 us/op
# Warmup Iteration   5: 296.419 us/op
Iteration   1: 296.226 us/op
Iteration   2: 296.085 us/op
Iteration   3: 297.862 us/op
Iteration   4: 297.878 us/op
Iteration   5: 297.831 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture":
  297.176 ±(99.9%) 3.595 us/op [Average]
  (min, avg, max) = (296.085, 297.176, 297.878), stdev = 0.934
  CI (99.9%): [293.581, 300.771] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 75.00% complete, ETA 00:00:51
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 249.062 us/op
# Warmup Iteration   2: 224.570 us/op
# Warmup Iteration   3: 220.973 us/op
# Warmup Iteration   4: 224.813 us/op
# Warmup Iteration   5: 231.345 us/op
Iteration   1: 188.585 us/op
Iteration   2: 189.852 us/op
Iteration   3: 189.858 us/op
Iteration   4: 189.891 us/op
Iteration   5: 189.901 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match":
  189.617 ±(99.9%) 2.224 us/op [Average]
  (min, avg, max) = (188.585, 189.617, 189.901), stdev = 0.578
  CI (99.9%): [187.393, 191.842] (assumes normal distribution)


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                (regexString)  Mode  Cnt    Score     Error  Units
StringRegexMatcherBenchmark.java_regex_capture  ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  293.452 ± 104.059  us/op
StringRegexMatcherBenchmark.java_regex_match    ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  191.704 ±   0.157  us/op
StringRegexMatcherBenchmark.regex_capture       ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  297.176 ±   3.595  us/op
StringRegexMatcherBenchmark.regex_match         ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  189.617 ±   2.224  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/StringRegexMatcherBenchmark.scala.csv

Finished StringRegexMatcherBenchmark benchmark (Thu Oct 16 01:18:23 PM UTC 2025)
Thu Oct 16 01:18:23 PM UTC 2025

Running EnumLookupBenchmark benchmark ...
Thu Oct 16 01:18:24 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.EnumLookupBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/EnumLookupBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 36.072 ns/op
# Warmup Iteration   2: 29.473 ns/op
# Warmup Iteration   3: 31.100 ns/op
# Warmup Iteration   4: 31.101 ns/op
# Warmup Iteration   5: 31.100 ns/op
Iteration   1: 31.100 ns/op
Iteration   2: 31.104 ns/op
Iteration   3: 31.103 ns/op
Iteration   4: 31.100 ns/op
Iteration   5: 31.098 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values":
  31.101 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (31.098, 31.101, 31.104), stdev = 0.002
  CI (99.9%): [31.092, 31.111] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 434.541 ns/op
# Warmup Iteration   2: 365.285 ns/op
# Warmup Iteration   3: 446.339 ns/op
# Warmup Iteration   4: 427.682 ns/op
# Warmup Iteration   5: 360.273 ns/op
Iteration   1: 360.242 ns/op
Iteration   2: 360.497 ns/op
Iteration   3: 434.473 ns/op
Iteration   4: 364.184 ns/op
Iteration   5: 360.337 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values":
  375.946 ±(99.9%) 126.145 ns/op [Average]
  (min, avg, max) = (360.242, 375.946, 434.473), stdev = 32.759
  CI (99.9%): [249.801, 502.091] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt    Score     Error  Units
EnumLookupBenchmark.cached_enum_values  avgt    5   31.101 ±   0.009  ns/op
EnumLookupBenchmark.enum_values         avgt    5  375.946 ± 126.145  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/EnumLookupBenchmark.scala.csv

Finished EnumLookupBenchmark benchmark (Thu Oct 16 01:20:06 PM UTC 2025)
Thu Oct 16 01:20:06 PM UTC 2025

Running LoopOptimizationBenchmark benchmark ...
Thu Oct 16 01:20:06 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.LoopOptimizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/LoopOptimizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 321.790 ns/op
# Warmup Iteration   2: 292.567 ns/op
# Warmup Iteration   3: 292.549 ns/op
# Warmup Iteration   4: 292.431 ns/op
# Warmup Iteration   5: 292.435 ns/op
Iteration   1: 292.457 ns/op
Iteration   2: 292.783 ns/op
Iteration   3: 292.458 ns/op
Iteration   4: 292.459 ns/op
Iteration   5: 292.458 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array":
  292.523 ±(99.9%) 0.560 ns/op [Average]
  (min, avg, max) = (292.457, 292.523, 292.783), stdev = 0.145
  CI (99.9%): [291.963, 293.083] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range
# Parameters: (size = 1000)

# Run progress: 16.67% complete, ETA 00:04:14
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 371.449 ns/op
# Warmup Iteration   2: 309.291 ns/op
# Warmup Iteration   3: 303.501 ns/op
# Warmup Iteration   4: 303.494 ns/op
# Warmup Iteration   5: 303.499 ns/op
Iteration   1: 303.493 ns/op
Iteration   2: 303.495 ns/op
Iteration   3: 303.492 ns/op
Iteration   4: 303.495 ns/op
Iteration   5: 303.502 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range":
  303.495 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (303.492, 303.495, 303.502), stdev = 0.004
  CI (99.9%): [303.480, 303.510] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 333.678 ns/op
# Warmup Iteration   2: 285.141 ns/op
# Warmup Iteration   3: 284.755 ns/op
# Warmup Iteration   4: 284.752 ns/op
# Warmup Iteration   5: 284.754 ns/op
Iteration   1: 284.756 ns/op
Iteration   2: 284.754 ns/op
Iteration   3: 284.763 ns/op
Iteration   4: 284.762 ns/op
Iteration   5: 284.756 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array":
  284.758 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (284.754, 284.758, 284.763), stdev = 0.004
  CI (99.9%): [284.743, 284.773] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 351.454 ns/op
# Warmup Iteration   2: 302.496 ns/op
# Warmup Iteration   3: 301.725 ns/op
# Warmup Iteration   4: 301.684 ns/op
# Warmup Iteration   5: 301.674 ns/op
Iteration   1: 301.664 ns/op
Iteration   2: 301.699 ns/op
Iteration   3: 301.707 ns/op
Iteration   4: 301.672 ns/op
Iteration   5: 301.664 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop":
  301.681 ±(99.9%) 0.078 ns/op [Average]
  (min, avg, max) = (301.664, 301.681, 301.707), stdev = 0.020
  CI (99.9%): [301.603, 301.760] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 339.853 ns/op
# Warmup Iteration   2: 285.859 ns/op
# Warmup Iteration   3: 285.199 ns/op
# Warmup Iteration   4: 334.563 ns/op
# Warmup Iteration   5: 285.308 ns/op
Iteration   1: 285.315 ns/op
Iteration   2: 285.393 ns/op
Iteration   3: 285.354 ns/op
Iteration   4: 285.350 ns/op
Iteration   5: 285.323 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array":
  285.347 ±(99.9%) 0.119 ns/op [Average]
  (min, avg, max) = (285.315, 285.347, 285.393), stdev = 0.031
  CI (99.9%): [285.228, 285.466] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range
# Parameters: (size = 1000)

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 348.013 ns/op
# Warmup Iteration   2: 302.485 ns/op
# Warmup Iteration   3: 302.329 ns/op
# Warmup Iteration   4: 302.334 ns/op
# Warmup Iteration   5: 302.142 ns/op
Iteration   1: 302.050 ns/op
Iteration   2: 302.583 ns/op
Iteration   3: 302.600 ns/op
Iteration   4: 302.490 ns/op
Iteration   5: 302.441 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range":
  302.433 ±(99.9%) 0.862 ns/op [Average]
  (min, avg, max) = (302.050, 302.433, 302.600), stdev = 0.224
  CI (99.9%): [301.571, 303.295] (assumes normal distribution)


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          (size)  Mode  Cnt    Score   Error  Units
LoopOptimizationBenchmark.for_array                  1000  avgt    5  292.523 ± 0.560  ns/op
LoopOptimizationBenchmark.for_range                  1000  avgt    5  303.495 ± 0.015  ns/op
LoopOptimizationBenchmark.macro_fastForeach_array    1000  avgt    5  284.758 ± 0.015  ns/op
LoopOptimizationBenchmark.macro_fastLoop             1000  avgt    5  301.681 ± 0.078  ns/op
LoopOptimizationBenchmark.while_array                1000  avgt    5  285.347 ± 0.119  ns/op
LoopOptimizationBenchmark.while_range                1000  avgt    5  302.433 ± 0.862  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/LoopOptimizationBenchmark.scala.csv

Finished LoopOptimizationBenchmark benchmark (Thu Oct 16 01:25:12 PM UTC 2025)
Thu Oct 16 01:25:12 PM UTC 2025

Running ArithmeticCanonicalizationBenchmark benchmark ...
Thu Oct 16 01:25:12 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ArithmeticCanonicalizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ArithmeticCanonicalizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 15.688 ns/op
# Warmup Iteration   2: 13.158 ns/op
# Warmup Iteration   3: 12.211 ns/op
# Warmup Iteration   4: 12.211 ns/op
# Warmup Iteration   5: 12.210 ns/op
Iteration   1: 12.211 ns/op
Iteration   2: 12.211 ns/op
Iteration   3: 12.211 ns/op
Iteration   4: 15.129 ns/op
Iteration   5: 12.211 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add":
  12.794 ±(99.9%) 5.025 ns/op [Average]
  (min, avg, max) = (12.211, 12.794, 15.129), stdev = 1.305
  CI (99.9%): [7.769, 17.819] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.185 ns/op
# Warmup Iteration   2: 2.651 ns/op
# Warmup Iteration   3: 2.169 ns/op
# Warmup Iteration   4: 2.169 ns/op
# Warmup Iteration   5: 2.169 ns/op
Iteration   1: 2.169 ns/op
Iteration   2: 2.169 ns/op
Iteration   3: 2.169 ns/op
Iteration   4: 2.169 ns/op
Iteration   5: 2.169 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift":
  2.169 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (2.169, 2.169, 2.169), stdev = 0.001
  CI (99.9%): [2.169, 2.169] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (isHeavy)    (value)  Mode  Cnt   Score    Error  Units
ArithmeticCanonicalizationBenchmark.add         true  179426549  avgt    5  12.794 ±  5.025  ns/op
ArithmeticCanonicalizationBenchmark.shift       true  179426549  avgt    5   2.169 ±  0.001  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ArithmeticCanonicalizationBenchmark.scala.csv

Finished ArithmeticCanonicalizationBenchmark benchmark (Thu Oct 16 01:26:54 PM UTC 2025)
Thu Oct 16 01:26:54 PM UTC 2025

Running IfConditionalBranchBenchmark benchmark ...
Thu Oct 16 01:26:55 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.IfConditionalBranchBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/IfConditionalBranchBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch
# Parameters: (size = 16384)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5.576 us/op
# Warmup Iteration   2: 4.696 us/op
# Warmup Iteration   3: 4.694 us/op
# Warmup Iteration   4: 4.694 us/op
# Warmup Iteration   5: 4.694 us/op
Iteration   1: 4.694 us/op
Iteration   2: 4.694 us/op
Iteration   3: 4.694 us/op
Iteration   4: 4.694 us/op
Iteration   5: 4.694 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch":
  4.694 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (4.694, 4.694, 4.694), stdev = 0.001
  CI (99.9%): [4.694, 4.694] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch
# Parameters: (size = 16384)

# Run progress: 33.33% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5.452 us/op
# Warmup Iteration   2: 4.716 us/op
# Warmup Iteration   3: 4.717 us/op
# Warmup Iteration   4: 4.716 us/op
# Warmup Iteration   5: 4.716 us/op
Iteration   1: 4.716 us/op
Iteration   2: 4.716 us/op
Iteration   3: 4.716 us/op
Iteration   4: 4.716 us/op
Iteration   5: 4.716 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch":
  4.716 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (4.716, 4.716, 4.716), stdev = 0.001
  CI (99.9%): [4.715, 4.717] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch
# Parameters: (size = 16384)

# Run progress: 66.67% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16.683 us/op
# Warmup Iteration   2: 14.084 us/op
# Warmup Iteration   3: 14.080 us/op
# Warmup Iteration   4: 14.080 us/op
# Warmup Iteration   5: 14.080 us/op
Iteration   1: 14.080 us/op
Iteration   2: 14.080 us/op
Iteration   3: 14.080 us/op
Iteration   4: 14.080 us/op
Iteration   5: 14.080 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch":
  14.080 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (14.080, 14.080, 14.080), stdev = 0.001
  CI (99.9%): [14.080, 14.081] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             (size)  Mode  Cnt   Score    Error  Units
IfConditionalBranchBenchmark.no_if_branch              16384  avgt    5   4.694 ±  0.001  us/op
IfConditionalBranchBenchmark.predictable_if_branch     16384  avgt    5   4.716 ±  0.001  us/op
IfConditionalBranchBenchmark.unpredictable_if_branch   16384  avgt    5  14.080 ±  0.001  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/IfConditionalBranchBenchmark.scala.csv

Finished IfConditionalBranchBenchmark benchmark (Thu Oct 16 01:29:28 PM UTC 2025)
Thu Oct 16 01:29:28 PM UTC 2025

Running CatsTypeclassesBenchmark benchmark ...
Thu Oct 16 01:29:28 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypeclassesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsTypeclassesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.153 us/op
# Warmup Iteration   2: 2.508 us/op
# Warmup Iteration   3: 2.625 us/op
# Warmup Iteration   4: 2.601 us/op
# Warmup Iteration   5: 2.623 us/op
Iteration   1: 2.632 us/op
Iteration   2: 2.618 us/op
Iteration   3: 2.598 us/op
Iteration   4: 2.625 us/op
Iteration   5: 2.629 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable":
  2.620 ±(99.9%) 0.053 us/op [Average]
  (min, avg, max) = (2.598, 2.620, 2.632), stdev = 0.014
  CI (99.9%): [2.568, 2.673] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:03:23
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16.332 us/op
# Warmup Iteration   2: 14.261 us/op
# Warmup Iteration   3: 14.487 us/op
# Warmup Iteration   4: 14.528 us/op
# Warmup Iteration   5: 14.527 us/op
Iteration   1: 14.473 us/op
Iteration   2: 14.474 us/op
Iteration   3: 14.440 us/op
Iteration   4: 14.434 us/op
Iteration   5: 14.374 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension":
  14.439 ±(99.9%) 0.157 us/op [Average]
  (min, avg, max) = (14.374, 14.439, 14.474), stdev = 0.041
  CI (99.9%): [14.282, 14.596] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 11.170 us/op
# Warmup Iteration   2: 11.692 us/op
# Warmup Iteration   3: 10.880 us/op
# Warmup Iteration   4: 10.852 us/op
# Warmup Iteration   5: 10.871 us/op
Iteration   1: 10.856 us/op
Iteration   2: 11.231 us/op
Iteration   3: 12.540 us/op
Iteration   4: 12.561 us/op
Iteration   5: 12.597 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor":
  11.957 ±(99.9%) 3.253 us/op [Average]
  (min, avg, max) = (10.856, 11.957, 12.597), stdev = 0.845
  CI (99.9%): [8.704, 15.210] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 15.209 us/op
# Warmup Iteration   2: 9.430 us/op
# Warmup Iteration   3: 9.047 us/op
# Warmup Iteration   4: 9.044 us/op
# Warmup Iteration   5: 9.019 us/op
Iteration   1: 8.946 us/op
Iteration   2: 9.019 us/op
Iteration   3: 9.022 us/op
Iteration   4: 9.131 us/op
Iteration   5: 9.141 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad":
  9.052 ±(99.9%) 0.318 us/op [Average]
  (min, avg, max) = (8.946, 9.052, 9.141), stdev = 0.083
  CI (99.9%): [8.734, 9.370] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.150 us/op
# Warmup Iteration   2: 12.896 us/op
# Warmup Iteration   3: 13.145 us/op
# Warmup Iteration   4: 13.189 us/op
# Warmup Iteration   5: 13.182 us/op
Iteration   1: 13.185 us/op
Iteration   2: 13.147 us/op
Iteration   3: 13.158 us/op
Iteration   4: 13.169 us/op
Iteration   5: 13.154 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid":
  13.163 ±(99.9%) 0.058 us/op [Average]
  (min, avg, max) = (13.147, 13.163, 13.185), stdev = 0.015
  CI (99.9%): [13.104, 13.221] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (size)  Mode  Cnt   Score   Error  Units
CatsTypeclassesBenchmark.foldable            1000  avgt    5   2.620 ± 0.053  us/op
CatsTypeclassesBenchmark.forComprehension    1000  avgt    5  14.439 ± 0.157  us/op
CatsTypeclassesBenchmark.functor             1000  avgt    5  11.957 ± 3.253  us/op
CatsTypeclassesBenchmark.monad               1000  avgt    5   9.052 ± 0.318  us/op
CatsTypeclassesBenchmark.monoid              1000  avgt    5  13.163 ± 0.058  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsTypeclassesBenchmark.scala.csv

Finished CatsTypeclassesBenchmark benchmark (Thu Oct 16 01:33:42 PM UTC 2025)
Thu Oct 16 01:33:42 PM UTC 2025

Running CatsTypesBenchmark benchmark ...
Thu Oct 16 01:33:43 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsTypesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 19.684 us/op
# Warmup Iteration   2: 15.742 us/op
# Warmup Iteration   3: 18.028 us/op
# Warmup Iteration   4: 18.099 us/op
# Warmup Iteration   5: 18.100 us/op
Iteration   1: 18.100 us/op
Iteration   2: 18.095 us/op
Iteration   3: 18.094 us/op
Iteration   4: 18.095 us/op
Iteration   5: 18.098 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT":
  18.096 ±(99.9%) 0.009 us/op [Average]
  (min, avg, max) = (18.094, 18.096, 18.100), stdev = 0.002
  CI (99.9%): [18.087, 18.106] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt   Score   Error  Units
CatsTypesBenchmark.eitherT    1000  avgt    5  18.096 ± 0.009  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsTypesBenchmark.scala.csv

Finished CatsTypesBenchmark benchmark (Thu Oct 16 01:34:34 PM UTC 2025)
Thu Oct 16 01:34:34 PM UTC 2025

Running CatsEffectBasicBenchmark benchmark ...
Thu Oct 16 01:34:35 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 154.816 us/op
# Warmup Iteration   2: 149.143 us/op
# Warmup Iteration   3: 147.362 us/op
# Warmup Iteration   4: 147.063 us/op
# Warmup Iteration   5: 146.822 us/op
Iteration   1: 147.544 us/op
Iteration   2: 147.426 us/op
Iteration   3: 148.348 us/op
Iteration   4: 147.399 us/op
Iteration   5: 147.357 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial":
  147.615 ±(99.9%) 1.601 us/op [Average]
  (min, avg, max) = (147.357, 147.615, 148.348), stdev = 0.416
  CI (99.9%): [146.014, 149.216] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt    Score   Error  Units
CatsEffectBasicBenchmark.factorial  avgt    5  147.615 ± 1.601  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectBasicBenchmark.scala.csv

Finished CatsEffectBasicBenchmark benchmark (Thu Oct 16 01:35:26 PM UTC 2025)
Thu Oct 16 01:35:26 PM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Thu Oct 16 01:35:26 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 11310.315 ms/op
# Warmup Iteration   2: 11066.107 ms/op
# Warmup Iteration   3: 12118.424 ms/op
# Warmup Iteration   4: 12114.631 ms/op
# Warmup Iteration   5: 11586.528 ms/op
Iteration   1: 11668.976 ms/op
Iteration   2: 10949.835 ms/op
Iteration   3: 10456.587 ms/op
Iteration   4: 11915.358 ms/op
Iteration   5: 10254.014 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  11048.954 ±(99.9%) 2808.421 ms/op [Average]
  (min, avg, max) = (10254.014, 11048.954, 11915.358), stdev = 729.338
  CI (99.9%): [8240.533, 13857.375] (assumes normal distribution)


# Run complete. Total time: 00:01:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt      Score      Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt    5  11048.954 ± 2808.421  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Thu Oct 16 01:37:27 PM UTC 2025)
Thu Oct 16 01:37:27 PM UTC 2025

Running CatsEffectWordFrequencyBenchmark benchmark ...
Thu Oct 16 01:37:27 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26.755 ms/op
# Warmup Iteration   2: 17.174 ms/op
# Warmup Iteration   3: 17.048 ms/op
# Warmup Iteration   4: 17.000 ms/op
# Warmup Iteration   5: 16.983 ms/op
Iteration   1: 16.986 ms/op
Iteration   2: 17.017 ms/op
Iteration   3: 17.043 ms/op
Iteration   4: 17.026 ms/op
Iteration   5: 17.056 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency":
  17.026 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (16.986, 17.026, 17.056), stdev = 0.027
  CI (99.9%): [16.923, 17.129] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 279.648 ms/op
# Warmup Iteration   2: 158.736 ms/op
# Warmup Iteration   3: 156.966 ms/op
# Warmup Iteration   4: 156.048 ms/op
# Warmup Iteration   5: 156.036 ms/op
Iteration   1: 156.941 ms/op
Iteration   2: 156.392 ms/op
Iteration   3: 156.496 ms/op
Iteration   4: 156.304 ms/op
Iteration   5: 155.805 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2":
  156.387 ±(99.9%) 1.570 ms/op [Average]
  (min, avg, max) = (155.805, 156.387, 156.941), stdev = 0.408
  CI (99.9%): [154.818, 157.957] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                Mode  Cnt    Score   Error  Units
CatsEffectWordFrequencyBenchmark.wordFrequency           avgt    5   17.026 ± 0.103  ms/op
CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2  avgt    5  156.387 ± 1.570  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/CatsEffectWordFrequencyBenchmark.scala.csv

Finished CatsEffectWordFrequencyBenchmark benchmark (Thu Oct 16 01:39:09 PM UTC 2025)
Thu Oct 16 01:39:09 PM UTC 2025

Running ZioBasicBenchmark benchmark ...
Thu Oct 16 01:39:10 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 118.130 us/op
# Warmup Iteration   2: 106.660 us/op
# Warmup Iteration   3: 143.709 us/op
# Warmup Iteration   4: 145.736 us/op
# Warmup Iteration   5: 147.062 us/op
Iteration   1: 147.012 us/op
Iteration   2: 147.989 us/op
Iteration   3: 146.915 us/op
Iteration   4: 146.954 us/op
Iteration   5: 147.726 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial":
  147.319 ±(99.9%) 1.931 us/op [Average]
  (min, avg, max) = (146.915, 147.319, 147.989), stdev = 0.502
  CI (99.9%): [145.388, 149.251] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    Mode  Cnt    Score   Error  Units
ZioBasicBenchmark.factorial  avgt    5  147.319 ± 1.931  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioBasicBenchmark.scala.csv

Finished ZioBasicBenchmark benchmark (Thu Oct 16 01:40:01 PM UTC 2025)
Thu Oct 16 01:40:01 PM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Thu Oct 16 01:40:01 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 11885.787 ms/op
# Warmup Iteration   2: 10582.123 ms/op
# Warmup Iteration   3: 11140.472 ms/op
# Warmup Iteration   4: 10600.558 ms/op
# Warmup Iteration   5: 11798.733 ms/op
Iteration   1: 11915.448 ms/op
Iteration   2: 10240.615 ms/op
Iteration   3: 11422.789 ms/op
Iteration   4: 11442.015 ms/op
Iteration   5: 10268.447 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  11057.863 ±(99.9%) 2924.505 ms/op [Average]
  (min, avg, max) = (10240.615, 11057.863, 11915.448), stdev = 759.485
  CI (99.9%): [8133.358, 13982.368] (assumes normal distribution)


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt      Score      Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt    5  11057.863 ± 2924.505  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Thu Oct 16 01:42:01 PM UTC 2025)
Thu Oct 16 01:42:01 PM UTC 2025

Running ZioWordFrequencyBenchmark benchmark ...
Thu Oct 16 01:42:01 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26.067 ms/op
# Warmup Iteration   2: 16.794 ms/op
# Warmup Iteration   3: 16.522 ms/op
# Warmup Iteration   4: 16.455 ms/op
# Warmup Iteration   5: 16.400 ms/op
Iteration   1: 16.384 ms/op
Iteration   2: 16.469 ms/op
Iteration   3: 16.459 ms/op
Iteration   4: 16.574 ms/op
Iteration   5: 16.412 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency":
  16.459 ±(99.9%) 0.279 ms/op [Average]
  (min, avg, max) = (16.384, 16.459, 16.574), stdev = 0.073
  CI (99.9%): [16.180, 16.739] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 836.023 ms/op
# Warmup Iteration   2: 257.144 ms/op
# Warmup Iteration   3: 212.825 ms/op
# Warmup Iteration   4: 215.508 ms/op
# Warmup Iteration   5: 212.731 ms/op
Iteration   1: 210.786 ms/op
Iteration   2: 211.112 ms/op
Iteration   3: 213.013 ms/op
Iteration   4: 211.004 ms/op
Iteration   5: 211.210 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream":
  211.425 ±(99.9%) 3.471 ms/op [Average]
  (min, avg, max) = (210.786, 211.425, 213.013), stdev = 0.901
  CI (99.9%): [207.954, 214.896] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt    Score   Error  Units
ZioWordFrequencyBenchmark.wordFrequency        avgt    5   16.459 ± 0.279  ms/op
ZioWordFrequencyBenchmark.wordFrequencyStream  avgt    5  211.425 ± 3.471  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/ZioWordFrequencyBenchmark.scala.csv

Finished ZioWordFrequencyBenchmark benchmark (Thu Oct 16 01:43:43 PM UTC 2025)
Thu Oct 16 01:43:43 PM UTC 2025

Running DijkstraBenchmark benchmark ...
Thu Oct 16 01:43:43 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 19917.614 ms/op
# Warmup Iteration   2: 23495.226 ms/op
# Warmup Iteration   3: 16789.304 ms/op
# Warmup Iteration   4: 16792.578 ms/op
# Warmup Iteration   5: 16788.953 ms/op
Iteration   1: 16833.668 ms/op
Iteration   2: 16742.292 ms/op
Iteration   3: 16747.848 ms/op
Iteration   4: 16740.949 ms/op
Iteration   5: 16747.885 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  16762.528 ±(99.9%) 153.616 ms/op [Average]
  (min, avg, max) = (16740.949, 16762.528, 16833.668), stdev = 39.894
  CI (99.9%): [16608.913, 16916.144] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:03:06
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 115.966 ms/op
# Warmup Iteration   2: 112.293 ms/op
# Warmup Iteration   3: 112.262 ms/op
# Warmup Iteration   4: 112.264 ms/op
# Warmup Iteration   5: 112.255 ms/op
Iteration   1: 134.306 ms/op
Iteration   2: 112.237 ms/op
Iteration   3: 112.242 ms/op
Iteration   4: 136.773 ms/op
Iteration   5: 112.217 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  121.555 ±(99.9%) 49.271 ms/op [Average]
  (min, avg, max) = (112.217, 121.555, 136.773), stdev = 12.796
  CI (99.9%): [72.284, 170.826] (assumes normal distribution)


# Run complete. Total time: 00:04:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score     Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt    5  16762.528 ± 153.616  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt    5    121.555 ±  49.271  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Thu Oct 16 01:47:51 PM UTC 2025)
Thu Oct 16 01:47:51 PM UTC 2025

Running FactorialBenchmark benchmark ...
Thu Oct 16 01:47:51 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FactorialBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/FactorialBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 57.054 us/op
# Warmup Iteration   2: 52.211 us/op
# Warmup Iteration   3: 43.674 us/op
# Warmup Iteration   4: 59.952 us/op
# Warmup Iteration   5: 44.045 us/op
Iteration   1: 43.719 us/op
Iteration   2: 43.740 us/op
Iteration   3: 43.709 us/op
Iteration   4: 43.709 us/op
Iteration   5: 43.722 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  43.720 ±(99.9%) 0.049 us/op [Average]
  (min, avg, max) = (43.709, 43.720, 43.740), stdev = 0.013
  CI (99.9%): [43.671, 43.768] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 25.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 815.940 us/op
# Warmup Iteration   2: 740.252 us/op
# Warmup Iteration   3: 907.821 us/op
# Warmup Iteration   4: 600.713 us/op
# Warmup Iteration   5: 594.993 us/op
Iteration   1: 595.152 us/op
Iteration   2: 595.062 us/op
Iteration   3: 595.118 us/op
Iteration   4: 594.707 us/op
Iteration   5: 594.647 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  594.937 ±(99.9%) 0.926 us/op [Average]
  (min, avg, max) = (594.647, 594.937, 595.152), stdev = 0.241
  CI (99.9%): [594.011, 595.863] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 205.399 us/op
# Warmup Iteration   2: 196.788 us/op
# Warmup Iteration   3: 256.662 us/op
# Warmup Iteration   4: 201.615 us/op
# Warmup Iteration   5: 166.255 us/op
Iteration   1: 166.457 us/op
Iteration   2: 166.653 us/op
Iteration   3: 166.657 us/op
Iteration   4: 166.653 us/op
Iteration   5: 166.521 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  166.588 ±(99.9%) 0.359 us/op [Average]
  (min, avg, max) = (166.457, 166.588, 166.657), stdev = 0.093
  CI (99.9%): [166.229, 166.947] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 75.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6326.403 us/op
# Warmup Iteration   2: 5198.297 us/op
# Warmup Iteration   3: 5139.238 us/op
# Warmup Iteration   4: 6179.238 us/op
# Warmup Iteration   5: 5140.209 us/op
Iteration   1: 5141.682 us/op
Iteration   2: 5142.505 us/op
Iteration   3: 5142.167 us/op
Iteration   4: 5144.339 us/op
Iteration   5: 5142.795 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  5142.698 ±(99.9%) 3.877 us/op [Average]
  (min, avg, max) = (5141.682, 5142.698, 5144.339), stdev = 1.007
  CI (99.9%): [5138.821, 5146.575] (assumes normal distribution)


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       (n)  Mode  Cnt     Score   Error  Units
FactorialBenchmark.dac_big_int_multiply        1000  avgt    5    43.720 ± 0.049  us/op
FactorialBenchmark.dac_big_int_multiply        5000  avgt    5   594.937 ± 0.926  us/op
FactorialBenchmark.iterative_big_int_multiply  1000  avgt    5   166.588 ± 0.359  us/op
FactorialBenchmark.iterative_big_int_multiply  5000  avgt    5  5142.698 ± 3.877  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/FactorialBenchmark.scala.csv

Finished FactorialBenchmark benchmark (Thu Oct 16 01:51:15 PM UTC 2025)
Thu Oct 16 01:51:15 PM UTC 2025

Running GameOfLifeBenchmark benchmark ...
Thu Oct 16 01:51:15 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.GameOfLifeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/GameOfLifeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 41.903 ms/op
# Warmup Iteration   2: 37.890 ms/op
# Warmup Iteration   3: 32.998 ms/op
# Warmup Iteration   4: 27.648 ms/op
# Warmup Iteration   5: 27.634 ms/op
Iteration   1: 27.626 ms/op
Iteration   2: 27.623 ms/op
Iteration   3: 27.626 ms/op
Iteration   4: 27.621 ms/op
Iteration   5: 27.630 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy":
  27.625 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (27.621, 27.625, 27.630), stdev = 0.004
  CI (99.9%): [27.612, 27.639] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place

# Run progress: 50.00% complete, ETA 00:00:51
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 29.203 ms/op
# Warmup Iteration   2: 24.290 ms/op
# Warmup Iteration   3: 24.268 ms/op
# Warmup Iteration   4: 24.268 ms/op
# Warmup Iteration   5: 24.263 ms/op
Iteration   1: 24.266 ms/op
Iteration   2: 24.278 ms/op
Iteration   3: 24.274 ms/op
Iteration   4: 24.273 ms/op
Iteration   5: 24.280 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place":
  24.274 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (24.266, 24.274, 24.280), stdev = 0.005
  CI (99.9%): [24.254, 24.294] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt   Score   Error  Units
GameOfLifeBenchmark.array_copy  avgt    5  27.625 ± 0.014  ms/op
GameOfLifeBenchmark.in_place    avgt    5  24.274 ± 0.020  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/GameOfLifeBenchmark.scala.csv

Finished GameOfLifeBenchmark benchmark (Thu Oct 16 01:52:58 PM UTC 2025)
Thu Oct 16 01:52:58 PM UTC 2025

Running KnapsackBenchmark benchmark ...
Thu Oct 16 01:52:58 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 13690.466 ms/op
# Warmup Iteration   2: 14015.676 ms/op
# Warmup Iteration   3: 800.114 ms/op
# Warmup Iteration   4: 842.230 ms/op
# Warmup Iteration   5: 811.885 ms/op
Iteration   1: 1026.964 ms/op
Iteration   2: 705.661 ms/op
Iteration   3: 902.171 ms/op
Iteration   4: 878.921 ms/op
Iteration   5: 846.755 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  872.094 ±(99.9%) 444.404 ms/op [Average]
  (min, avg, max) = (705.661, 872.094, 1026.964), stdev = 115.410
  CI (99.9%): [427.691, 1316.498] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:01:12
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.425 ms/op
# Warmup Iteration   2: 16.557 ms/op
# Warmup Iteration   3: 17.521 ms/op
# Warmup Iteration   4: 14.067 ms/op
# Warmup Iteration   5: 11.198 ms/op
Iteration   1: 14.031 ms/op
Iteration   2: 13.970 ms/op
Iteration   3: 11.192 ms/op
Iteration   4: 11.194 ms/op
Iteration   5: 11.191 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  12.315 ±(99.9%) 5.924 ms/op [Average]
  (min, avg, max) = (11.191, 12.315, 14.031), stdev = 1.538
  CI (99.9%): [6.392, 18.239] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt    Score     Error  Units
KnapsackBenchmark.dynamic         50000  avgt    5  872.094 ± 444.404  ms/op
KnapsackBenchmark.greedy          50000  avgt    5   12.315 ±   5.924  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Thu Oct 16 01:55:02 PM UTC 2025)
Thu Oct 16 01:55:02 PM UTC 2025

Running NQueensBenchmark benchmark ...
Thu Oct 16 01:55:02 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.NQueensBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/NQueensBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking
# Parameters: (n = 24)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 218.276 ms/op
# Warmup Iteration   2: 187.763 ms/op
# Warmup Iteration   3: 187.874 ms/op
# Warmup Iteration   4: 187.884 ms/op
# Warmup Iteration   5: 187.839 ms/op
Iteration   1: 187.943 ms/op
Iteration   2: 187.883 ms/op
Iteration   3: 187.995 ms/op
Iteration   4: 187.889 ms/op
Iteration   5: 187.785 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking":
  187.899 ±(99.9%) 0.301 ms/op [Average]
  (min, avg, max) = (187.785, 187.899, 187.995), stdev = 0.078
  CI (99.9%): [187.598, 188.201] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing
# Parameters: (n = 24)

# Run progress: 50.00% complete, ETA 00:00:51
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.404 ms/op
# Warmup Iteration   2: 2.895 ms/op
# Warmup Iteration   3: 2.894 ms/op
# Warmup Iteration   4: 2.895 ms/op
# Warmup Iteration   5: 2.895 ms/op
Iteration   1: 2.969 ms/op
Iteration   2: 2.999 ms/op
Iteration   3: 2.996 ms/op
Iteration   4: 3.667 ms/op
Iteration   5: 2.997 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing":
  3.126 ±(99.9%) 1.166 ms/op [Average]
  (min, avg, max) = (2.969, 3.126, 3.667), stdev = 0.303
  CI (99.9%): [1.959, 4.292] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             (n)  Mode  Cnt    Score   Error  Units
NQueensBenchmark.backtracking          24  avgt    5  187.899 ± 0.301  ms/op
NQueensBenchmark.simulated_annealing   24  avgt    5    3.126 ± 1.166  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/NQueensBenchmark.scala.csv

Finished NQueensBenchmark benchmark (Thu Oct 16 01:56:46 PM UTC 2025)
Thu Oct 16 01:56:46 PM UTC 2025

Running PalindromeBenchmark benchmark ...
Thu Oct 16 01:56:46 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PalindromeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PalindromeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.583 ms/op
# Warmup Iteration   2: 1.281 ms/op
# Warmup Iteration   3: 1.273 ms/op
# Warmup Iteration   4: 1.586 ms/op
# Warmup Iteration   5: 1.272 ms/op
Iteration   1: 1.273 ms/op
Iteration   2: 1.510 ms/op
Iteration   3: 1.273 ms/op
Iteration   4: 1.510 ms/op
Iteration   5: 1.272 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional":
  1.368 ±(99.9%) 0.501 ms/op [Average]
  (min, avg, max) = (1.272, 1.368, 1.510), stdev = 0.130
  CI (99.9%): [0.867, 1.869] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative

# Run progress: 33.33% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.829 ms/op
# Warmup Iteration   2: 0.841 ms/op
# Warmup Iteration   3: 0.928 ms/op
# Warmup Iteration   4: 0.673 ms/op
# Warmup Iteration   5: 0.630 ms/op
Iteration   1: 0.629 ms/op
Iteration   2: 0.629 ms/op
Iteration   3: 0.629 ms/op
Iteration   4: 0.629 ms/op
Iteration   5: 0.629 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative":
  0.629 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.629, 0.629, 0.629), stdev = 0.001
  CI (99.9%): [0.629, 0.630] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive

# Run progress: 66.67% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.819 ms/op
# Warmup Iteration   2: 0.635 ms/op
# Warmup Iteration   3: 0.633 ms/op
# Warmup Iteration   4: 0.633 ms/op
# Warmup Iteration   5: 0.634 ms/op
Iteration   1: 0.633 ms/op
Iteration   2: 0.633 ms/op
Iteration   3: 0.633 ms/op
Iteration   4: 0.631 ms/op
Iteration   5: 0.632 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive":
  0.632 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.631, 0.632, 0.633), stdev = 0.001
  CI (99.9%): [0.628, 0.637] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt  Score   Error  Units
PalindromeBenchmark.functional  avgt    5  1.368 ± 0.501  ms/op
PalindromeBenchmark.iterative   avgt    5  0.629 ± 0.001  ms/op
PalindromeBenchmark.recursive   avgt    5  0.632 ± 0.005  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PalindromeBenchmark.scala.csv

Finished PalindromeBenchmark benchmark (Thu Oct 16 01:59:19 PM UTC 2025)
Thu Oct 16 01:59:19 PM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Thu Oct 16 01:59:19 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1888.252 ms/op
# Warmup Iteration   2: 1252.419 ms/op
# Warmup Iteration   3: 1041.396 ms/op
# Warmup Iteration   4: 1041.235 ms/op
# Warmup Iteration   5: 1415.583 ms/op
Iteration   1: 1796.424 ms/op
Iteration   2: 1713.015 ms/op
Iteration   3: 1790.603 ms/op
Iteration   4: 1303.546 ms/op
Iteration   5: 1039.844 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  1528.687 ±(99.9%) 1311.364 ms/op [Average]
  (min, avg, max) = (1039.844, 1528.687, 1796.424), stdev = 340.557
  CI (99.9%): [217.323, 2840.051] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:00:59
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 983.944 ms/op
# Warmup Iteration   2: 884.008 ms/op
# Warmup Iteration   3: 736.963 ms/op
# Warmup Iteration   4: 717.687 ms/op
# Warmup Iteration   5: 538.179 ms/op
Iteration   1: 534.964 ms/op
Iteration   2: 535.142 ms/op
Iteration   3: 532.814 ms/op
Iteration   4: 534.822 ms/op
Iteration   5: 535.118 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  534.572 ±(99.9%) 3.817 ms/op [Average]
  (min, avg, max) = (532.814, 534.572, 535.142), stdev = 0.991
  CI (99.9%): [530.755, 538.389] (assumes normal distribution)


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt     Score      Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt    5  1528.687 ± 1311.364  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt    5   534.572 ±    3.817  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Thu Oct 16 02:01:17 PM UTC 2025)
Thu Oct 16 02:01:17 PM UTC 2025

Running PrimesBenchmark benchmark ...
Thu Oct 16 02:01:17 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 38.551 ms/op
# Warmup Iteration   2: 31.000 ms/op
# Warmup Iteration   3: 37.507 ms/op
# Warmup Iteration   4: 34.843 ms/op
# Warmup Iteration   5: 32.378 ms/op
Iteration   1: 30.540 ms/op
Iteration   2: 30.532 ms/op
Iteration   3: 30.527 ms/op
Iteration   4: 30.527 ms/op
Iteration   5: 37.190 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  31.863 ±(99.9%) 11.467 ms/op [Average]
  (min, avg, max) = (30.527, 31.863, 37.190), stdev = 2.978
  CI (99.9%): [20.397, 43.330] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4487.691 ms/op
# Warmup Iteration   2: 4083.454 ms/op
# Warmup Iteration   3: 4088.836 ms/op
# Warmup Iteration   4: 4089.618 ms/op
# Warmup Iteration   5: 4089.103 ms/op
Iteration   1: 4088.977 ms/op
Iteration   2: 4084.807 ms/op
Iteration   3: 4086.877 ms/op
Iteration   4: 4082.934 ms/op
Iteration   5: 4086.592 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  4086.037 ±(99.9%) 8.781 ms/op [Average]
  (min, avg, max) = (4082.934, 4086.037, 4088.977), stdev = 2.280
  CI (99.9%): [4077.257, 4094.818] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:02:14
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6735.600 ms/op
# Warmup Iteration   2: 5513.322 ms/op
# Warmup Iteration   3: 5507.007 ms/op
# Warmup Iteration   4: 5506.726 ms/op
# Warmup Iteration   5: 5480.445 ms/op
Iteration   1: 5514.904 ms/op
Iteration   2: 5497.833 ms/op
Iteration   3: 5507.588 ms/op
Iteration   4: 5473.432 ms/op
Iteration   5: 5504.172 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  5499.586 ±(99.9%) 61.091 ms/op [Average]
  (min, avg, max) = (5473.432, 5499.586, 5514.904), stdev = 15.865
  CI (99.9%): [5438.494, 5560.677] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:01:03
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 7128.555 ms/op
# Warmup Iteration   2: 7033.953 ms/op
# Warmup Iteration   3: 5724.166 ms/op
# Warmup Iteration   4: 5724.330 ms/op
# Warmup Iteration   5: 5724.192 ms/op
Iteration   1: 5723.707 ms/op
Iteration   2: 5724.650 ms/op
Iteration   3: 5724.232 ms/op
Iteration   4: 5726.504 ms/op
Iteration   5: 5724.166 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  5724.652 ±(99.9%) 4.189 ms/op [Average]
  (min, avg, max) = (5723.707, 5724.652, 5726.504), stdev = 1.088
  CI (99.9%): [5720.463, 5728.841] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score    Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt    5    31.863 ± 11.467  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt    5  4086.037 ±  8.781  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt    5  5499.586 ± 61.091  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt    5  5724.652 ±  4.189  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Thu Oct 16 02:05:30 PM UTC 2025)
Thu Oct 16 02:05:30 PM UTC 2025

Running WordFrequencyBenchmark benchmark ...
Thu Oct 16 02:05:30 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.WordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/WordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 89.467 ms/op
# Warmup Iteration   2: 65.225 ms/op
# Warmup Iteration   3: 64.320 ms/op
# Warmup Iteration   4: 64.894 ms/op
# Warmup Iteration   5: 64.118 ms/op
Iteration   1: 64.572 ms/op
Iteration   2: 65.155 ms/op
Iteration   3: 64.602 ms/op
Iteration   4: 64.316 ms/op
Iteration   5: 64.688 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac":
  64.667 ±(99.9%) 1.179 ms/op [Average]
  (min, avg, max) = (64.316, 64.667, 65.155), stdev = 0.306
  CI (99.9%): [63.488, 65.846] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional

# Run progress: 20.00% complete, ETA 00:03:24
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26.409 ms/op
# Warmup Iteration   2: 23.720 ms/op
# Warmup Iteration   3: 24.240 ms/op
# Warmup Iteration   4: 20.595 ms/op
# Warmup Iteration   5: 20.435 ms/op
Iteration   1: 20.397 ms/op
Iteration   2: 20.586 ms/op
Iteration   3: 20.535 ms/op
Iteration   4: 25.655 ms/op
Iteration   5: 20.720 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional":
  21.578 ±(99.9%) 8.785 ms/op [Average]
  (min, avg, max) = (20.397, 21.578, 25.655), stdev = 2.282
  CI (99.9%): [12.793, 30.364] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 20.851 ms/op
# Warmup Iteration   2: 15.406 ms/op
# Warmup Iteration   3: 15.328 ms/op
# Warmup Iteration   4: 15.326 ms/op
# Warmup Iteration   5: 15.329 ms/op
Iteration   1: 15.332 ms/op
Iteration   2: 15.349 ms/op
Iteration   3: 15.318 ms/op
Iteration   4: 15.329 ms/op
Iteration   5: 15.325 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative":
  15.331 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (15.318, 15.331, 15.349), stdev = 0.011
  CI (99.9%): [15.287, 15.374] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6.126 ms/op
# Warmup Iteration   2: 5.063 ms/op
# Warmup Iteration   3: 5.011 ms/op
# Warmup Iteration   4: 5.008 ms/op
# Warmup Iteration   5: 5.031 ms/op
Iteration   1: 5.019 ms/op
Iteration   2: 4.982 ms/op
Iteration   3: 4.980 ms/op
Iteration   4: 4.981 ms/op
Iteration   5: 4.982 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream":
  4.989 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (4.980, 4.989, 5.019), stdev = 0.017
  CI (99.9%): [4.924, 5.053] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+36-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.916 ms/op
# Warmup Iteration   2: 17.027 ms/op
# Warmup Iteration   3: 14.356 ms/op
# Warmup Iteration   4: 14.366 ms/op
# Warmup Iteration   5: 14.357 ms/op
Iteration   1: 14.357 ms/op
Iteration   2: 14.361 ms/op
Iteration   3: 14.359 ms/op
Iteration   4: 14.356 ms/op
Iteration   5: 14.358 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream":
  14.358 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (14.356, 14.358, 14.361), stdev = 0.002
  CI (99.9%): [14.351, 14.365] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt   Score   Error  Units
WordFrequencyBenchmark.dac              avgt    5  64.667 ± 1.179  ms/op
WordFrequencyBenchmark.functional       avgt    5  21.578 ± 8.785  ms/op
WordFrequencyBenchmark.iterative        avgt    5  15.331 ± 0.043  ms/op
WordFrequencyBenchmark.parallel_stream  avgt    5   4.989 ± 0.065  ms/op
WordFrequencyBenchmark.pattern_stream   avgt    5  14.358 ± 0.007  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/openjdk-hotspot-vm/WordFrequencyBenchmark.scala.csv

Finished WordFrequencyBenchmark benchmark (Thu Oct 16 02:09:45 PM UTC 2025)
Thu Oct 16 02:09:45 PM UTC 2025

Finished OpenJDK HotSpot VM test suite!

Elapsed: 100 minutes and 38 seconds.

+=============================================
| Running steps 5 to 7 with graalvm-ce
+=============================================
| Thu Oct 16 02:09:45 PM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/25-graalce
JDK version: 25
JVM name: GraalVM CE
JVM identifier: graalvm-ce

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk25.json
JMH output folder: results/jdk-25/x86_64/jmh/graalvm-ce

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running GraalVM CE test suite ...
Creating folder: 'results/jdk-25/x86_64/jmh/graalvm-ce' ...

Running ListBenchmark benchmark ...
Thu Oct 16 02:09:46 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ListBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ListBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 28440.354 ns/op
# Warmup Iteration   2: 29679.875 ns/op
# Warmup Iteration   3: 29648.801 ns/op
# Warmup Iteration   4: 21922.778 ns/op
# Warmup Iteration   5: 26666.907 ns/op
Iteration   1: 25288.864 ns/op
Iteration   2: 33170.557 ns/op
Iteration   3: 22382.859 ns/op
Iteration   4: 26835.830 ns/op
Iteration   5: 21923.015 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap":
  25920.225 ±(99.9%) 17465.856 ns/op [Average]
  (min, avg, max) = (21923.015, 25920.225, 33170.557), stdev = 4535.827
  CI (99.9%): [8454.369, 43386.081] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 10.00% complete, ETA 00:07:38
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3044.036 ns/op
# Warmup Iteration   2: 2574.606 ns/op
# Warmup Iteration   3: 2738.931 ns/op
# Warmup Iteration   4: 2739.122 ns/op
# Warmup Iteration   5: 2739.607 ns/op
Iteration   1: 2739.009 ns/op
Iteration   2: 2739.155 ns/op
Iteration   3: 3238.018 ns/op
Iteration   4: 2738.966 ns/op
Iteration   5: 3326.427 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft":
  2956.315 ±(99.9%) 1151.916 ns/op [Average]
  (min, avg, max) = (2738.966, 2956.315, 3326.427), stdev = 299.149
  CI (99.9%): [1804.399, 4108.231] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:06:47
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2833.739 ns/op
# Warmup Iteration   2: 2908.527 ns/op
# Warmup Iteration   3: 2419.222 ns/op
# Warmup Iteration   4: 2416.993 ns/op
# Warmup Iteration   5: 2417.202 ns/op
Iteration   1: 2418.242 ns/op
Iteration   2: 2419.041 ns/op
Iteration   3: 2418.792 ns/op
Iteration   4: 2418.752 ns/op
Iteration   5: 2418.837 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop":
  2418.733 ±(99.9%) 1.140 ns/op [Average]
  (min, avg, max) = (2418.242, 2418.733, 2419.041), stdev = 0.296
  CI (99.9%): [2417.592, 2419.873] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 30.00% complete, ETA 00:05:56
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2734.950 ns/op
# Warmup Iteration   2: 2377.454 ns/op
# Warmup Iteration   3: 2414.194 ns/op
# Warmup Iteration   4: 2412.860 ns/op
# Warmup Iteration   5: 2413.161 ns/op
Iteration   1: 2414.213 ns/op
Iteration   2: 2414.321 ns/op
Iteration   3: 2414.550 ns/op
Iteration   4: 2414.408 ns/op
Iteration   5: 2413.969 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach":
  2414.292 ±(99.9%) 0.843 ns/op [Average]
  (min, avg, max) = (2413.969, 2414.292, 2414.550), stdev = 0.219
  CI (99.9%): [2413.449, 2415.135] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:05:05
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2671.583 ns/op
# Warmup Iteration   2: 2335.877 ns/op
# Warmup Iteration   3: 2230.974 ns/op
# Warmup Iteration   4: 2229.492 ns/op
# Warmup Iteration   5: 2230.337 ns/op
Iteration   1: 2231.054 ns/op
Iteration   2: 2229.869 ns/op
Iteration   3: 2229.944 ns/op
Iteration   4: 2228.997 ns/op
Iteration   5: 2230.513 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate":
  2230.075 ±(99.9%) 2.964 ns/op [Average]
  (min, avg, max) = (2228.997, 2230.075, 2231.054), stdev = 0.770
  CI (99.9%): [2227.111, 2233.040] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:04:14
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 8867.460 ns/op
# Warmup Iteration   2: 7140.161 ns/op
# Warmup Iteration   3: 5777.345 ns/op
# Warmup Iteration   4: 5778.639 ns/op
# Warmup Iteration   5: 7462.285 ns/op
Iteration   1: 10334.799 ns/op
Iteration   2: 6554.949 ns/op
Iteration   3: 7483.072 ns/op
Iteration   4: 10883.617 ns/op
Iteration   5: 8520.996 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map":
  8755.486 ±(99.9%) 7084.442 ns/op [Average]
  (min, avg, max) = (6554.949, 8755.486, 10883.617), stdev = 1839.807
  CI (99.9%): [1671.045, 15839.928] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:03:23
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6245.786 ns/op
# Warmup Iteration   2: 5026.738 ns/op
# Warmup Iteration   3: 4875.980 ns/op
# Warmup Iteration   4: 7089.806 ns/op
# Warmup Iteration   5: 6077.906 ns/op
Iteration   1: 8834.262 ns/op
Iteration   2: 4907.097 ns/op
Iteration   3: 7355.752 ns/op
Iteration   4: 7176.363 ns/op
Iteration   5: 7832.567 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend":
  7221.208 ±(99.9%) 5563.790 ns/op [Average]
  (min, avg, max) = (4907.097, 7221.208, 8834.262), stdev = 1444.899
  CI (99.9%): [1657.418, 12784.998] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 70.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2433.462 ns/op
# Warmup Iteration   2: 2482.733 ns/op
# Warmup Iteration   3: 2074.570 ns/op
# Warmup Iteration   4: 2074.322 ns/op
# Warmup Iteration   5: 2074.828 ns/op
Iteration   1: 2073.828 ns/op
Iteration   2: 2074.466 ns/op
Iteration   3: 2073.938 ns/op
Iteration   4: 2075.804 ns/op
Iteration   5: 2460.497 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size":
  2151.707 ±(99.9%) 664.702 ns/op [Average]
  (min, avg, max) = (2073.828, 2151.707, 2460.497), stdev = 172.621
  CI (99.9%): [1487.005, 2816.408] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4529.387 ns/op
# Warmup Iteration   2: 3316.971 ns/op
# Warmup Iteration   3: 3301.679 ns/op
# Warmup Iteration   4: 3304.203 ns/op
# Warmup Iteration   5: 3882.139 ns/op
Iteration   1: 3237.253 ns/op
Iteration   2: 4869.425 ns/op
Iteration   3: 4862.784 ns/op
Iteration   4: 4196.357 ns/op
Iteration   5: 3242.116 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse":
  4081.587 ±(99.9%) 3141.132 ns/op [Average]
  (min, avg, max) = (3237.253, 4081.587, 4869.425), stdev = 815.742
  CI (99.9%): [940.455, 7222.719] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply
# Parameters: (size = 1000)

# Run progress: 90.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2625.935 ns/op
# Warmup Iteration   2: 2414.849 ns/op
# Warmup Iteration   3: 2444.919 ns/op
# Warmup Iteration   4: 2445.095 ns/op
# Warmup Iteration   5: 2445.069 ns/op
Iteration   1: 2444.933 ns/op
Iteration   2: 2445.266 ns/op
Iteration   3: 2445.307 ns/op
Iteration   4: 2987.396 ns/op
Iteration   5: 2445.434 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply":
  2553.667 ±(99.9%) 933.634 ns/op [Average]
  (min, avg, max) = (2444.933, 2553.667, 2987.396), stdev = 242.462
  CI (99.9%): [1620.033, 3487.301] (assumes normal distribution)


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score       Error  Units
ListBenchmark.flatMap      1000  avgt    5  25920.225 ± 17465.856  ns/op
ListBenchmark.foldLeft     1000  avgt    5   2956.315 ±  1151.916  ns/op
ListBenchmark.for_loop     1000  avgt    5   2418.733 ±     1.140  ns/op
ListBenchmark.foreach      1000  avgt    5   2414.292 ±     0.843  ns/op
ListBenchmark.iterate      1000  avgt    5   2230.075 ±     2.964  ns/op
ListBenchmark.map          1000  avgt    5   8755.486 ±  7084.442  ns/op
ListBenchmark.prepend      1000  avgt    5   7221.208 ±  5563.790  ns/op
ListBenchmark.read_size    1000  avgt    5   2151.707 ±   664.702  ns/op
ListBenchmark.reverse      1000  avgt    5   4081.587 ±  3141.132  ns/op
ListBenchmark.unapply      1000  avgt    5   2553.667 ±   933.634  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ListBenchmark.scala.csv

Finished ListBenchmark benchmark (Thu Oct 16 02:18:15 PM UTC 2025)
Thu Oct 16 02:18:15 PM UTC 2025

Running SetBenchmark benchmark ...
Thu Oct 16 02:18:16 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:07:30
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 13125.924 ns/op
# Warmup Iteration   2: 11904.595 ns/op
# Warmup Iteration   3: 11794.007 ns/op
# Warmup Iteration   4: 11787.482 ns/op
# Warmup Iteration   5: 14176.868 ns/op
Iteration   1: 11788.099 ns/op
Iteration   2: 13827.450 ns/op
Iteration   3: 14154.108 ns/op
Iteration   4: 14151.597 ns/op
Iteration   5: 11793.469 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few":
  13142.945 ±(99.9%) 4780.489 ns/op [Average]
  (min, avg, max) = (11788.099, 13142.945, 14154.108), stdev = 1241.478
  CI (99.9%): [8362.455, 17923.434] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many
# Parameters: (size = 1000)

# Run progress: 11.11% complete, ETA 00:06:47
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16015.546 ns/op
# Warmup Iteration   2: 13560.772 ns/op
# Warmup Iteration   3: 13478.476 ns/op
# Warmup Iteration   4: 13478.605 ns/op
# Warmup Iteration   5: 13478.736 ns/op
Iteration   1: 13478.419 ns/op
Iteration   2: 13480.836 ns/op
Iteration   3: 13478.649 ns/op
Iteration   4: 13477.277 ns/op
Iteration   5: 13478.703 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many":
  13478.777 ±(99.9%) 4.961 ns/op [Average]
  (min, avg, max) = (13477.277, 13478.777, 13480.836), stdev = 1.288
  CI (99.9%): [13473.816, 13483.738] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 22.22% complete, ETA 00:05:55
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 19839.680 ns/op
# Warmup Iteration   2: 13949.077 ns/op
# Warmup Iteration   3: 13934.579 ns/op
# Warmup Iteration   4: 13937.497 ns/op
# Warmup Iteration   5: 13929.279 ns/op
Iteration   1: 13925.108 ns/op
Iteration   2: 13909.349 ns/op
Iteration   3: 13913.994 ns/op
Iteration   4: 13910.754 ns/op
Iteration   5: 13914.230 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  13914.687 ±(99.9%) 23.834 ns/op [Average]
  (min, avg, max) = (13909.349, 13914.687, 13925.108), stdev = 6.190
  CI (99.9%): [13890.853, 13938.521] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:05:05
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 704.914 ns/op
# Warmup Iteration   2: 599.125 ns/op
# Warmup Iteration   3: 598.554 ns/op
# Warmup Iteration   4: 598.246 ns/op
# Warmup Iteration   5: 598.608 ns/op
Iteration   1: 598.201 ns/op
Iteration   2: 598.494 ns/op
Iteration   3: 598.069 ns/op
Iteration   4: 598.577 ns/op
Iteration   5: 598.611 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft":
  598.390 ±(99.9%) 0.930 ns/op [Average]
  (min, avg, max) = (598.069, 598.390, 598.611), stdev = 0.242
  CI (99.9%): [597.460, 599.321] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 44.44% complete, ETA 00:04:14
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 315.165 ns/op
# Warmup Iteration   2: 344.707 ns/op
# Warmup Iteration   3: 267.425 ns/op
# Warmup Iteration   4: 331.530 ns/op
# Warmup Iteration   5: 267.603 ns/op
Iteration   1: 267.598 ns/op
Iteration   2: 267.600 ns/op
Iteration   3: 268.192 ns/op
Iteration   4: 268.136 ns/op
Iteration   5: 268.153 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop":
  267.936 ±(99.9%) 1.186 ns/op [Average]
  (min, avg, max) = (267.598, 267.936, 268.192), stdev = 0.308
  CI (99.9%): [266.749, 269.122] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 55.56% complete, ETA 00:03:23
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 393.829 ns/op
# Warmup Iteration   2: 283.853 ns/op
# Warmup Iteration   3: 268.250 ns/op
# Warmup Iteration   4: 267.279 ns/op
# Warmup Iteration   5: 267.280 ns/op
Iteration   1: 267.278 ns/op
Iteration   2: 288.009 ns/op
Iteration   3: 327.014 ns/op
Iteration   4: 272.925 ns/op
Iteration   5: 269.784 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach":
  285.002 ±(99.9%) 95.603 ns/op [Average]
  (min, avg, max) = (267.278, 285.002, 327.014), stdev = 24.828
  CI (99.9%): [189.398, 380.605] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 699.290 ns/op
# Warmup Iteration   2: 591.119 ns/op
# Warmup Iteration   3: 722.046 ns/op
# Warmup Iteration   4: 589.377 ns/op
# Warmup Iteration   5: 588.929 ns/op
Iteration   1: 590.402 ns/op
Iteration   2: 590.617 ns/op
Iteration   3: 588.973 ns/op
Iteration   4: 593.004 ns/op
Iteration   5: 589.606 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate":
  590.520 ±(99.9%) 5.910 ns/op [Average]
  (min, avg, max) = (588.973, 590.520, 593.004), stdev = 1.535
  CI (99.9%): [584.610, 596.430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map
# Parameters: (size = 1000)

# Run progress: 77.78% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 8248.354 ns/op
# Warmup Iteration   2: 6617.894 ns/op
# Warmup Iteration   3: 7520.928 ns/op
# Warmup Iteration   4: 5323.074 ns/op
# Warmup Iteration   5: 4436.542 ns/op
Iteration   1: 4438.616 ns/op
Iteration   2: 5207.799 ns/op
Iteration   3: 6597.347 ns/op
Iteration   4: 6416.459 ns/op
Iteration   5: 4608.349 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map":
  5453.714 ±(99.9%) 3870.000 ns/op [Average]
  (min, avg, max) = (4438.616, 5453.714, 6597.347), stdev = 1005.027
  CI (99.9%): [1583.714, 9323.714] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 88.89% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.351 ns/op
# Warmup Iteration   2: 1.296 ns/op
# Warmup Iteration   3: 1.538 ns/op
# Warmup Iteration   4: 1.289 ns/op
# Warmup Iteration   5: 1.289 ns/op
Iteration   1: 1.289 ns/op
Iteration   2: 1.289 ns/op
Iteration   3: 1.289 ns/op
Iteration   4: 1.289 ns/op
Iteration   5: 1.289 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size":
  1.289 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.289, 1.289, 1.289), stdev = 0.001
  CI (99.9%): [1.289, 1.289] (assumes normal distribution)


# Run complete. Total time: 00:07:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt      Score      Error  Units
SetBenchmark.contains_few     1000  avgt    5  13142.945 ± 4780.489  ns/op
SetBenchmark.contains_many    1000  avgt    5  13478.777 ±    4.961  ns/op
SetBenchmark.flatMap          1000  avgt    5  13914.687 ±   23.834  ns/op
SetBenchmark.foldLeft         1000  avgt    5    598.390 ±    0.930  ns/op
SetBenchmark.for_loop         1000  avgt    5    267.936 ±    1.186  ns/op
SetBenchmark.foreach          1000  avgt    5    285.002 ±   95.603  ns/op
SetBenchmark.iterate          1000  avgt    5    590.520 ±    5.910  ns/op
SetBenchmark.map              1000  avgt    5   5453.714 ± 3870.000  ns/op
SetBenchmark.read_size        1000  avgt    5      1.289 ±    0.001  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Thu Oct 16 02:25:55 PM UTC 2025)
Thu Oct 16 02:25:55 PM UTC 2025

Running SetAddBenchmark benchmark ...
Thu Oct 16 02:25:55 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetAddBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/SetAddBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 9819.228 ns/op
# Warmup Iteration   2: 6125.042 ns/op
# Warmup Iteration   3: 7573.313 ns/op
# Warmup Iteration   4: 6314.518 ns/op
# Warmup Iteration   5: 6307.584 ns/op
Iteration   1: 6304.886 ns/op
Iteration   2: 6314.389 ns/op
Iteration   3: 6314.943 ns/op
Iteration   4: 7572.961 ns/op
Iteration   5: 6311.027 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10":
  6563.641 ±(99.9%) 2172.691 ns/op [Average]
  (min, avg, max) = (6304.886, 6563.641, 7572.961), stdev = 564.241
  CI (99.9%): [4390.950, 8736.333] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 30965.774 ns/op
# Warmup Iteration   2: 23220.723 ns/op
# Warmup Iteration   3: 24234.731 ns/op
# Warmup Iteration   4: 24254.373 ns/op
# Warmup Iteration   5: 24242.447 ns/op
Iteration   1: 24240.996 ns/op
Iteration   2: 24238.463 ns/op
Iteration   3: 24221.330 ns/op
Iteration   4: 24195.964 ns/op
Iteration   5: 30141.453 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100":
  25407.641 ±(99.9%) 10190.122 ns/op [Average]
  (min, avg, max) = (24195.964, 25407.641, 30141.453), stdev = 2646.342
  CI (99.9%): [15217.519, 35597.764] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score       Error  Units
SetAddBenchmark.add_10     1000  avgt    5   6563.641 ±  2172.691  ns/op
SetAddBenchmark.add_100    1000  avgt    5  25407.641 ± 10190.122  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/SetAddBenchmark.scala.csv

Finished SetAddBenchmark benchmark (Thu Oct 16 02:27:37 PM UTC 2025)
Thu Oct 16 02:27:37 PM UTC 2025

Running VectorBenchmark benchmark ...
Thu Oct 16 02:27:38 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 33615.026 ns/op
# Warmup Iteration   2: 28021.523 ns/op
# Warmup Iteration   3: 26479.784 ns/op
# Warmup Iteration   4: 26482.921 ns/op
# Warmup Iteration   5: 26504.734 ns/op
Iteration   1: 26476.413 ns/op
Iteration   2: 26513.354 ns/op
Iteration   3: 26509.339 ns/op
Iteration   4: 39549.777 ns/op
Iteration   5: 37496.322 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append":
  31309.041 ±(99.9%) 25511.949 ns/op [Average]
  (min, avg, max) = (26476.413, 31309.041, 39549.777), stdev = 6625.372
  CI (99.9%): [5797.092, 56820.990] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 9.09% complete, ETA 00:08:29
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 38478.147 ns/op
# Warmup Iteration   2: 45483.986 ns/op
# Warmup Iteration   3: 37373.624 ns/op
# Warmup Iteration   4: 37336.650 ns/op
# Warmup Iteration   5: 45745.477 ns/op
Iteration   1: 45951.986 ns/op
Iteration   2: 37362.598 ns/op
Iteration   3: 45755.764 ns/op
Iteration   4: 43174.858 ns/op
Iteration   5: 45761.442 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  43601.330 ±(99.9%) 14139.901 ns/op [Average]
  (min, avg, max) = (37362.598, 43601.330, 45951.986), stdev = 3672.087
  CI (99.9%): [29461.429, 57741.231] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 18.18% complete, ETA 00:07:37
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3210.298 ns/op
# Warmup Iteration   2: 2247.781 ns/op
# Warmup Iteration   3: 2176.427 ns/op
# Warmup Iteration   4: 2177.940 ns/op
# Warmup Iteration   5: 2176.249 ns/op
Iteration   1: 2176.020 ns/op
Iteration   2: 2175.636 ns/op
Iteration   3: 2176.593 ns/op
Iteration   4: 2176.131 ns/op
Iteration   5: 2176.572 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft":
  2176.191 ±(99.9%) 1.549 ns/op [Average]
  (min, avg, max) = (2175.636, 2176.191, 2176.593), stdev = 0.402
  CI (99.9%): [2174.641, 2177.740] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 27.27% complete, ETA 00:06:46
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1136.945 ns/op
# Warmup Iteration   2: 1209.045 ns/op
# Warmup Iteration   3: 1182.973 ns/op
# Warmup Iteration   4: 1183.123 ns/op
# Warmup Iteration   5: 1183.218 ns/op
Iteration   1: 1183.086 ns/op
Iteration   2: 1185.021 ns/op
Iteration   3: 1186.309 ns/op
Iteration   4: 1186.411 ns/op
Iteration   5: 1186.515 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop":
  1185.468 ±(99.9%) 5.636 ns/op [Average]
  (min, avg, max) = (1183.086, 1185.468, 1186.515), stdev = 1.464
  CI (99.9%): [1179.832, 1191.104] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 36.36% complete, ETA 00:05:55
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1447.743 ns/op
# Warmup Iteration   2: 1211.833 ns/op
# Warmup Iteration   3: 1184.279 ns/op
# Warmup Iteration   4: 1183.867 ns/op
# Warmup Iteration   5: 1183.963 ns/op
Iteration   1: 1184.088 ns/op
Iteration   2: 1185.893 ns/op
Iteration   3: 1185.147 ns/op
Iteration   4: 1185.718 ns/op
Iteration   5: 1185.600 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach":
  1185.289 ±(99.9%) 2.794 ns/op [Average]
  (min, avg, max) = (1184.088, 1185.289, 1185.893), stdev = 0.726
  CI (99.9%): [1182.495, 1188.083] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 45.45% complete, ETA 00:05:04
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2678.764 ns/op
# Warmup Iteration   2: 2352.403 ns/op
# Warmup Iteration   3: 2349.951 ns/op
# Warmup Iteration   4: 2347.103 ns/op
# Warmup Iteration   5: 2346.823 ns/op
Iteration   1: 2346.870 ns/op
Iteration   2: 2906.807 ns/op
Iteration   3: 2346.765 ns/op
Iteration   4: 2349.388 ns/op
Iteration   5: 2349.007 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate":
  2459.767 ±(99.9%) 962.297 ns/op [Average]
  (min, avg, max) = (2346.765, 2459.767, 2906.807), stdev = 249.906
  CI (99.9%): [1497.470, 3422.065] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map
# Parameters: (size = 1000)

# Run progress: 54.55% complete, ETA 00:04:13
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4250.744 ns/op
# Warmup Iteration   2: 3652.401 ns/op
# Warmup Iteration   3: 3601.302 ns/op
# Warmup Iteration   4: 3601.239 ns/op
# Warmup Iteration   5: 3600.575 ns/op
Iteration   1: 4178.865 ns/op
Iteration   2: 3620.460 ns/op
Iteration   3: 3605.550 ns/op
Iteration   4: 3604.910 ns/op
Iteration   5: 3604.538 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map":
  3722.865 ±(99.9%) 981.914 ns/op [Average]
  (min, avg, max) = (3604.538, 3722.865, 4178.865), stdev = 255.000
  CI (99.9%): [2740.951, 4704.778] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access
# Parameters: (size = 1000)

# Run progress: 63.64% complete, ETA 00:03:23
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6990.081 ns/op
# Warmup Iteration   2: 5571.549 ns/op
# Warmup Iteration   3: 5563.534 ns/op
# Warmup Iteration   4: 5563.758 ns/op
# Warmup Iteration   5: 5563.549 ns/op
Iteration   1: 5564.979 ns/op
Iteration   2: 5563.886 ns/op
Iteration   3: 5565.194 ns/op
Iteration   4: 6674.102 ns/op
Iteration   5: 5561.183 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access":
  5785.869 ±(99.9%) 1911.999 ns/op [Average]
  (min, avg, max) = (5561.183, 5785.869, 6674.102), stdev = 496.540
  CI (99.9%): [3873.870, 7697.868] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 72.73% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.020 ns/op
# Warmup Iteration   2: 1.101 ns/op
# Warmup Iteration   3: 0.898 ns/op
# Warmup Iteration   4: 0.898 ns/op
# Warmup Iteration   5: 0.898 ns/op
Iteration   1: 0.898 ns/op
Iteration   2: 0.898 ns/op
Iteration   3: 0.898 ns/op
Iteration   4: 0.898 ns/op
Iteration   5: 0.898 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size":
  0.898 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.898, 0.898, 0.898), stdev = 0.001
  CI (99.9%): [0.898, 0.898] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 81.82% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 10726.748 ns/op
# Warmup Iteration   2: 7959.689 ns/op
# Warmup Iteration   3: 12024.200 ns/op
# Warmup Iteration   4: 7924.693 ns/op
# Warmup Iteration   5: 7924.929 ns/op
Iteration   1: 7921.412 ns/op
Iteration   2: 11335.084 ns/op
Iteration   3: 10768.467 ns/op
Iteration   4: 7927.857 ns/op
Iteration   5: 7921.215 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse":
  9174.807 ±(99.9%) 6642.759 ns/op [Average]
  (min, avg, max) = (7921.215, 9174.807, 11335.084), stdev = 1725.103
  CI (99.9%): [2532.048, 15817.566] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access
# Parameters: (size = 1000)

# Run progress: 90.91% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4061.392 ns/op
# Warmup Iteration   2: 2105.527 ns/op
# Warmup Iteration   3: 2542.489 ns/op
# Warmup Iteration   4: 2054.355 ns/op
# Warmup Iteration   5: 2054.483 ns/op
Iteration   1: 2054.417 ns/op
Iteration   2: 2054.462 ns/op
Iteration   3: 2054.039 ns/op
Iteration   4: 2054.824 ns/op
Iteration   5: 2054.691 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access":
  2054.486 ±(99.9%) 1.158 ns/op [Average]
  (min, avg, max) = (2054.039, 2054.486, 2054.824), stdev = 0.301
  CI (99.9%): [2053.328, 2055.644] (assumes normal distribution)


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (size)  Mode  Cnt      Score       Error  Units
VectorBenchmark.append               1000  avgt    5  31309.041 ± 25511.949  ns/op
VectorBenchmark.flatMap              1000  avgt    5  43601.330 ± 14139.901  ns/op
VectorBenchmark.foldLeft             1000  avgt    5   2176.191 ±     1.549  ns/op
VectorBenchmark.for_loop             1000  avgt    5   1185.468 ±     5.636  ns/op
VectorBenchmark.foreach              1000  avgt    5   1185.289 ±     2.794  ns/op
VectorBenchmark.iterate              1000  avgt    5   2459.767 ±   962.297  ns/op
VectorBenchmark.map                  1000  avgt    5   3722.865 ±   981.914  ns/op
VectorBenchmark.random_access        1000  avgt    5   5785.869 ±  1911.999  ns/op
VectorBenchmark.read_size            1000  avgt    5      0.898 ±     0.001  ns/op
VectorBenchmark.reverse              1000  avgt    5   9174.807 ±  6642.759  ns/op
VectorBenchmark.sequential_access    1000  avgt    5   2054.486 ±     1.158  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Thu Oct 16 02:36:57 PM UTC 2025)
Thu Oct 16 02:36:57 PM UTC 2025

Running FutureBenchmark benchmark ...
Thu Oct 16 02:36:58 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FutureBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/FutureBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.471 us/op
# Warmup Iteration   2: 24.915 us/op
# Warmup Iteration   3: 23.424 us/op
# Warmup Iteration   4: 19.712 us/op
# Warmup Iteration   5: 23.198 us/op
Iteration   1: 24.888 us/op
Iteration   2: 21.708 us/op
Iteration   3: 11.581 us/op
Iteration   4: 19.237 us/op
Iteration   5: 23.009 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  20.085 ±(99.9%) 19.942 us/op [Average]
  (min, avg, max) = (11.581, 20.085, 24.888), stdev = 5.179
  CI (99.9%): [0.143, 40.027] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 10000)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 57.358 us/op
# Warmup Iteration   2: 54.647 us/op
# Warmup Iteration   3: 50.169 us/op
# Warmup Iteration   4: 42.298 us/op
# Warmup Iteration   5: 56.912 us/op
Iteration   1: 35.978 us/op
Iteration   2: 33.267 us/op
Iteration   3: 51.654 us/op
Iteration   4: 38.312 us/op
Iteration   5: 44.620 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  40.766 ±(99.9%) 28.465 us/op [Average]
  (min, avg, max) = (33.267, 40.766, 51.654), stdev = 7.392
  CI (99.9%): [12.301, 69.231] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 1000)

# Run progress: 50.00% complete, ETA 00:01:42
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.920 us/op
# Warmup Iteration   2: 1.931 us/op
# Warmup Iteration   3: 1.733 us/op
# Warmup Iteration   4: 1.733 us/op
# Warmup Iteration   5: 1.733 us/op
Iteration   1: 1.733 us/op
Iteration   2: 1.733 us/op
Iteration   3: 1.733 us/op
Iteration   4: 1.732 us/op
Iteration   5: 1.732 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  1.733 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.732, 1.733, 1.733), stdev = 0.001
  CI (99.9%): [1.732, 1.733] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 10000)

# Run progress: 75.00% complete, ETA 00:00:51
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 19.401 us/op
# Warmup Iteration   2: 19.444 us/op
# Warmup Iteration   3: 17.255 us/op
# Warmup Iteration   4: 17.260 us/op
# Warmup Iteration   5: 17.250 us/op
Iteration   1: 17.250 us/op
Iteration   2: 17.260 us/op
Iteration   3: 17.258 us/op
Iteration   4: 17.250 us/op
Iteration   5: 17.251 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  17.254 ±(99.9%) 0.018 us/op [Average]
  (min, avg, max) = (17.250, 17.254, 17.260), stdev = 0.005
  CI (99.9%): [17.236, 17.272] (assumes normal distribution)


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                      (computationSize)  Mode  Cnt   Score    Error  Units
FutureBenchmark.run_future                  1000  avgt    5  20.085 ± 19.942  us/op
FutureBenchmark.run_future                 10000  avgt    5  40.766 ± 28.465  us/op
FutureBenchmark.run_no_future               1000  avgt    5   1.733 ±  0.001  us/op
FutureBenchmark.run_no_future              10000  avgt    5  17.254 ±  0.018  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/FutureBenchmark.scala.csv

Finished FutureBenchmark benchmark (Thu Oct 16 02:40:23 PM UTC 2025)
Thu Oct 16 02:40:23 PM UTC 2025

Running ScalaRandomBenchmark benchmark ...
Thu Oct 16 02:40:23 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ScalaRandomBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ScalaRandomBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 11.801 ns/op
# Warmup Iteration   2: 10.329 ns/op
# Warmup Iteration   3: 10.315 ns/op
# Warmup Iteration   4: 12.111 ns/op
# Warmup Iteration   5: 10.311 ns/op
Iteration   1: 10.317 ns/op
Iteration   2: 10.317 ns/op
Iteration   3: 10.317 ns/op
Iteration   4: 12.101 ns/op
Iteration   5: 10.317 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean":
  10.674 ±(99.9%) 3.073 ns/op [Average]
  (min, avg, max) = (10.317, 10.674, 12.101), stdev = 0.798
  CI (99.9%): [7.601, 13.747] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double

# Run progress: 16.67% complete, ETA 00:04:13
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 23.345 ns/op
# Warmup Iteration   2: 20.660 ns/op
# Warmup Iteration   3: 20.639 ns/op
# Warmup Iteration   4: 20.638 ns/op
# Warmup Iteration   5: 20.635 ns/op
Iteration   1: 20.638 ns/op
Iteration   2: 20.639 ns/op
Iteration   3: 20.638 ns/op
Iteration   4: 20.639 ns/op
Iteration   5: 20.638 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double":
  20.639 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.638, 20.639, 20.639), stdev = 0.001
  CI (99.9%): [20.637, 20.640] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float

# Run progress: 33.33% complete, ETA 00:03:22
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 10.656 ns/op
# Warmup Iteration   2: 12.649 ns/op
# Warmup Iteration   3: 10.315 ns/op
# Warmup Iteration   4: 10.316 ns/op
# Warmup Iteration   5: 10.317 ns/op
Iteration   1: 10.315 ns/op
Iteration   2: 10.315 ns/op
Iteration   3: 10.316 ns/op
Iteration   4: 10.316 ns/op
Iteration   5: 10.315 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float":
  10.315 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.315, 10.315, 10.316), stdev = 0.001
  CI (99.9%): [10.314, 10.316] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 77.520 ns/op
# Warmup Iteration   2: 66.107 ns/op
# Warmup Iteration   3: 66.074 ns/op
# Warmup Iteration   4: 66.071 ns/op
# Warmup Iteration   5: 66.071 ns/op
Iteration   1: 66.076 ns/op
Iteration   2: 66.076 ns/op
Iteration   3: 66.073 ns/op
Iteration   4: 66.074 ns/op
Iteration   5: 66.074 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian":
  66.075 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (66.073, 66.075, 66.076), stdev = 0.001
  CI (99.9%): [66.069, 66.080] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16.425 ns/op
# Warmup Iteration   2: 10.333 ns/op
# Warmup Iteration   3: 10.317 ns/op
# Warmup Iteration   4: 10.317 ns/op
# Warmup Iteration   5: 10.311 ns/op
Iteration   1: 10.317 ns/op
Iteration   2: 10.317 ns/op
Iteration   3: 10.317 ns/op
Iteration   4: 10.317 ns/op
Iteration   5: 10.317 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int":
  10.317 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.317, 10.317, 10.317), stdev = 0.001
  CI (99.9%): [10.317, 10.318] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.024 ns/op
# Warmup Iteration   2: 25.046 ns/op
# Warmup Iteration   3: 20.924 ns/op
# Warmup Iteration   4: 20.925 ns/op
# Warmup Iteration   5: 20.926 ns/op
Iteration   1: 20.925 ns/op
Iteration   2: 20.925 ns/op
Iteration   3: 20.925 ns/op
Iteration   4: 20.924 ns/op
Iteration   5: 20.924 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long":
  20.925 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.924, 20.925, 20.925), stdev = 0.001
  CI (99.9%): [20.924, 20.926] (assumes normal distribution)


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt   Score   Error  Units
ScalaRandomBenchmark.next_boolean   avgt    5  10.674 ± 3.073  ns/op
ScalaRandomBenchmark.next_double    avgt    5  20.639 ± 0.001  ns/op
ScalaRandomBenchmark.next_float     avgt    5  10.315 ± 0.001  ns/op
ScalaRandomBenchmark.next_gaussian  avgt    5  66.075 ± 0.006  ns/op
ScalaRandomBenchmark.next_int       avgt    5  10.317 ± 0.001  ns/op
ScalaRandomBenchmark.next_long      avgt    5  20.925 ± 0.001  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ScalaRandomBenchmark.scala.csv

Finished ScalaRandomBenchmark benchmark (Thu Oct 16 02:45:28 PM UTC 2025)
Thu Oct 16 02:45:28 PM UTC 2025

Running StringConcatenationBenchmark benchmark ...
Thu Oct 16 02:45:29 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringConcatenationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/StringConcatenationBenchmark.scala.csv -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 475.841 ns/op
# Warmup Iteration   2: 345.748 ns/op
# Warmup Iteration   3: 341.720 ns/op
# Warmup Iteration   4: 335.068 ns/op
# Warmup Iteration   5: 464.098 ns/op
Iteration   1: 334.790 ns/op
                 gc.alloc.rate:      2483.822 MB/sec
                 gc.alloc.rate.norm: 872.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms

Iteration   2: 321.462 ns/op
                 gc.alloc.rate:      2586.830 MB/sec
                 gc.alloc.rate.norm: 872.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            7.000 ms

Iteration   3: 321.543 ns/op
                 gc.alloc.rate:      2586.158 MB/sec
                 gc.alloc.rate.norm: 872.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   4: 321.412 ns/op
                 gc.alloc.rate:      2587.229 MB/sec
                 gc.alloc.rate.norm: 872.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            6.000 ms

Iteration   5: 321.187 ns/op
                 gc.alloc.rate:      2589.034 MB/sec
                 gc.alloc.rate.norm: 872.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            7.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  324.079 ±(99.9%) 23.062 ns/op [Average]
  (min, avg, max) = (321.187, 324.079, 334.790), stdev = 5.989
  CI (99.9%): [301.017, 347.141] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  2566.615 ±(99.9%) 178.265 MB/sec [Average]
  (min, avg, max) = (2483.822, 2566.615, 2589.034), stdev = 46.295
  CI (99.9%): [2388.350, 2744.880] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  872.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (872.000, 872.000, 872.000), stdev = 0.001
  CI (99.9%): [872.000, 872.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  37.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = UTF16, length = 128)

# Run progress: 8.33% complete, ETA 00:09:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 584.659 ns/op
# Warmup Iteration   2: 564.801 ns/op
# Warmup Iteration   3: 464.573 ns/op
# Warmup Iteration   4: 462.934 ns/op
# Warmup Iteration   5: 555.141 ns/op
Iteration   1: 712.199 ns/op
                 gc.alloc.rate:      1981.656 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           4.000 counts
                 gc.time:            6.000 ms

Iteration   2: 555.557 ns/op
                 gc.alloc.rate:      2540.429 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms

Iteration   3: 462.564 ns/op
                 gc.alloc.rate:      3051.186 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   4: 462.657 ns/op
                 gc.alloc.rate:      3050.591 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 462.757 ns/op
                 gc.alloc.rate:      3049.908 MB/sec
                 gc.alloc.rate.norm: 1480.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  531.147 ±(99.9%) 419.381 ns/op [Average]
  (min, avg, max) = (462.564, 531.147, 712.199), stdev = 108.912
  CI (99.9%): [111.766, 950.528] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  2734.754 ±(99.9%) 1830.700 MB/sec [Average]
  (min, avg, max) = (1981.656, 2734.754, 3051.186), stdev = 475.427
  CI (99.9%): [904.054, 4565.455] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  1480.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1480.001, 1480.001, 1480.001), stdev = 0.001
  CI (99.9%): [1480.000, 1480.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  40.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 8.000, 10.000), stdev = 1.414
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 16.67% complete, ETA 00:08:28
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 344.097 ns/op
# Warmup Iteration   2: 267.069 ns/op
# Warmup Iteration   3: 254.829 ns/op
# Warmup Iteration   4: 254.630 ns/op
# Warmup Iteration   5: 254.458 ns/op
Iteration   1: 305.666 ns/op
                 gc.alloc.rate:      2620.674 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms

Iteration   2: 259.602 ns/op
                 gc.alloc.rate:      3085.623 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   3: 254.292 ns/op
                 gc.alloc.rate:      3150.106 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            10.000 ms

Iteration   4: 254.347 ns/op
                 gc.alloc.rate:      3149.438 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   5: 254.243 ns/op
                 gc.alloc.rate:      3150.708 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  265.630 ±(99.9%) 86.633 ns/op [Average]
  (min, avg, max) = (254.243, 265.630, 305.666), stdev = 22.498
  CI (99.9%): [178.997, 352.263] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  3031.310 ±(99.9%) 890.436 MB/sec [Average]
  (min, avg, max) = (2620.674, 3031.310, 3150.708), stdev = 231.243
  CI (99.9%): [2140.874, 3921.746] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  840.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (840.000, 840.000, 840.000), stdev = 0.001
  CI (99.9%): [840.000, 840.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 25.00% complete, ETA 00:07:37
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 467.459 ns/op
# Warmup Iteration   2: 530.267 ns/op
# Warmup Iteration   3: 452.364 ns/op
# Warmup Iteration   4: 366.616 ns/op
# Warmup Iteration   5: 366.491 ns/op
Iteration   1: 366.666 ns/op
                 gc.alloc.rate:      3828.406 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 450.848 ns/op
                 gc.alloc.rate:      3113.522 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            11.000 ms

Iteration   3: 366.042 ns/op
                 gc.alloc.rate:      3834.907 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 365.946 ns/op
                 gc.alloc.rate:      3835.941 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 365.928 ns/op
                 gc.alloc.rate:      3836.102 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  383.086 ±(99.9%) 145.867 ns/op [Average]
  (min, avg, max) = (365.928, 383.086, 450.848), stdev = 37.881
  CI (99.9%): [237.219, 528.953] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  3689.775 ±(99.9%) 1240.489 MB/sec [Average]
  (min, avg, max) = (3113.522, 3689.775, 3836.102), stdev = 322.151
  CI (99.9%): [2449.286, 4930.265] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  1472.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1472.001, 1472.001, 1472.001), stdev = 0.001
  CI (99.9%): [1472.000, 1472.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  38.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  54.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 33.33% complete, ETA 00:06:46
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 367.998 ns/op
# Warmup Iteration   2: 254.654 ns/op
# Warmup Iteration   3: 245.972 ns/op
# Warmup Iteration   4: 377.911 ns/op
# Warmup Iteration   5: 247.239 ns/op
Iteration   1: 246.145 ns/op
                 gc.alloc.rate:      3130.414 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   2: 246.150 ns/op
                 gc.alloc.rate:      3130.349 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   3: 246.149 ns/op
                 gc.alloc.rate:      3130.342 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 246.091 ns/op
                 gc.alloc.rate:      3131.105 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 246.196 ns/op
                 gc.alloc.rate:      3129.749 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  246.146 ±(99.9%) 0.143 ns/op [Average]
  (min, avg, max) = (246.091, 246.146, 246.196), stdev = 0.037
  CI (99.9%): [246.003, 246.290] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  3130.392 ±(99.9%) 1.854 MB/sec [Average]
  (min, avg, max) = (3129.749, 3130.392, 3131.105), stdev = 0.482
  CI (99.9%): [3128.537, 3132.246] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  808.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
  CI (99.9%): [808.000, 808.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  43.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = UTF16, length = 128)

# Run progress: 41.67% complete, ETA 00:05:55
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 440.505 ns/op
# Warmup Iteration   2: 347.343 ns/op
# Warmup Iteration   3: 417.831 ns/op
# Warmup Iteration   4: 334.939 ns/op
# Warmup Iteration   5: 335.032 ns/op
Iteration   1: 335.016 ns/op
                 gc.alloc.rate:      4076.228 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 334.969 ns/op
                 gc.alloc.rate:      4076.807 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   3: 335.082 ns/op
                 gc.alloc.rate:      4075.389 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            12.000 ms

Iteration   4: 335.044 ns/op
                 gc.alloc.rate:      4075.893 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 334.925 ns/op
                 gc.alloc.rate:      4077.312 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  335.007 ±(99.9%) 0.238 ns/op [Average]
  (min, avg, max) = (334.925, 335.007, 335.082), stdev = 0.062
  CI (99.9%): [334.769, 335.245] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  4076.326 ±(99.9%) 2.907 MB/sec [Average]
  (min, avg, max) = (4075.389, 4076.326, 4077.312), stdev = 0.755
  CI (99.9%): [4073.419, 4079.232] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  1432.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
  CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  41.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  56.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 50.00% complete, ETA 00:05:04
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 326.088 ns/op
# Warmup Iteration   2: 317.906 ns/op
# Warmup Iteration   3: 263.529 ns/op
# Warmup Iteration   4: 262.922 ns/op
# Warmup Iteration   5: 262.772 ns/op
Iteration   1: 262.756 ns/op
                 gc.alloc.rate:      3048.650 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   2: 262.763 ns/op
                 gc.alloc.rate:      3048.566 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   3: 262.748 ns/op
                 gc.alloc.rate:      3048.712 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   4: 262.783 ns/op
                 gc.alloc.rate:      3048.337 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   5: 262.714 ns/op
                 gc.alloc.rate:      3049.121 MB/sec
                 gc.alloc.rate.norm: 840.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  262.753 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (262.714, 262.753, 262.783), stdev = 0.025
  CI (99.9%): [262.655, 262.851] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  3048.677 ±(99.9%) 1.102 MB/sec [Average]
  (min, avg, max) = (3048.337, 3048.677, 3049.121), stdev = 0.286
  CI (99.9%): [3047.575, 3049.779] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  840.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (840.000, 840.000, 840.000), stdev = 0.001
  CI (99.9%): [840.000, 840.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  42.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 58.33% complete, ETA 00:04:13
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 456.711 ns/op
# Warmup Iteration   2: 372.684 ns/op
# Warmup Iteration   3: 354.181 ns/op
# Warmup Iteration   4: 354.198 ns/op
# Warmup Iteration   5: 422.309 ns/op
Iteration   1: 354.221 ns/op
                 gc.alloc.rate:      3962.912 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 354.314 ns/op
                 gc.alloc.rate:      3961.874 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   3: 436.840 ns/op
                 gc.alloc.rate:      3213.314 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   4: 354.148 ns/op
                 gc.alloc.rate:      3963.737 MB/sec
                 gc.alloc.rate.norm: 1472.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 521.816 ns/op
                 gc.alloc.rate:      2690.047 MB/sec
                 gc.alloc.rate.norm: 1472.001 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  404.268 ±(99.9%) 288.095 ns/op [Average]
  (min, avg, max) = (354.148, 404.268, 521.816), stdev = 74.817
  CI (99.9%): [116.173, 692.363] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  3558.377 ±(99.9%) 2248.460 MB/sec [Average]
  (min, avg, max) = (2690.047, 3558.377, 3963.737), stdev = 583.918
  CI (99.9%): [1309.917, 5806.837] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  1472.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1472.000, 1472.001, 1472.001), stdev = 0.001
  CI (99.9%): [1472.000, 1472.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 7.200, 8.000), stdev = 1.304
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  51.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 10.200, 11.000), stdev = 1.304
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 66.67% complete, ETA 00:03:23
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 465.826 ns/op
# Warmup Iteration   2: 479.134 ns/op
# Warmup Iteration   3: 426.748 ns/op
# Warmup Iteration   4: 623.599 ns/op
# Warmup Iteration   5: 491.946 ns/op
Iteration   1: 541.247 ns/op
                 gc.alloc.rate:      3298.071 MB/sec
                 gc.alloc.rate.norm: 1872.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            11.000 ms

Iteration   2: 364.632 ns/op
                 gc.alloc.rate:      4895.897 MB/sec
                 gc.alloc.rate.norm: 1872.001 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   3: 422.572 ns/op
                 gc.alloc.rate:      4224.483 MB/sec
                 gc.alloc.rate.norm: 1872.001 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   4: 363.506 ns/op
                 gc.alloc.rate:      4911.066 MB/sec
                 gc.alloc.rate.norm: 1872.001 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   5: 363.424 ns/op
                 gc.alloc.rate:      4912.070 MB/sec
                 gc.alloc.rate.norm: 1872.001 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  411.076 ±(99.9%) 296.821 ns/op [Average]
  (min, avg, max) = (363.424, 411.076, 541.247), stdev = 77.083
  CI (99.9%): [114.255, 707.897] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  4448.318 ±(99.9%) 2724.654 MB/sec [Average]
  (min, avg, max) = (3298.071, 4448.318, 4912.070), stdev = 707.584
  CI (99.9%): [1723.663, 7172.972] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  1872.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1872.001, 1872.001, 1872.001), stdev = 0.001
  CI (99.9%): [1872.000, 1872.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 9.200, 10.000), stdev = 1.304
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  66.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 13.200, 14.000), stdev = 1.304
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = UTF16, length = 128)

# Run progress: 75.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 666.782 ns/op
# Warmup Iteration   2: 686.368 ns/op
# Warmup Iteration   3: 595.626 ns/op
# Warmup Iteration   4: 540.124 ns/op
# Warmup Iteration   5: 676.938 ns/op
Iteration   1: 538.605 ns/op
                 gc.alloc.rate:      5665.770 MB/sec
                 gc.alloc.rate.norm: 3200.001 B/op
                 gc.count:           12.000 counts
                 gc.time:            17.000 ms

Iteration   2: 538.506 ns/op
                 gc.alloc.rate:      5666.817 MB/sec
                 gc.alloc.rate.norm: 3200.001 B/op
                 gc.count:           11.000 counts
                 gc.time:            15.000 ms

Iteration   3: 538.612 ns/op
                 gc.alloc.rate:      5665.672 MB/sec
                 gc.alloc.rate.norm: 3200.001 B/op
                 gc.count:           12.000 counts
                 gc.time:            16.000 ms

Iteration   4: 538.434 ns/op
                 gc.alloc.rate:      5667.591 MB/sec
                 gc.alloc.rate.norm: 3200.001 B/op
                 gc.count:           11.000 counts
                 gc.time:            15.000 ms

Iteration   5: 538.667 ns/op
                 gc.alloc.rate:      5665.093 MB/sec
                 gc.alloc.rate.norm: 3200.001 B/op
                 gc.count:           12.000 counts
                 gc.time:            16.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  538.565 ±(99.9%) 0.360 ns/op [Average]
  (min, avg, max) = (538.434, 538.565, 538.667), stdev = 0.093
  CI (99.9%): [538.205, 538.924] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  5666.188 ±(99.9%) 3.853 MB/sec [Average]
  (min, avg, max) = (5665.093, 5666.188, 5667.591), stdev = 1.001
  CI (99.9%): [5662.336, 5670.041] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  3200.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (3200.001, 3200.001, 3200.001), stdev = 0.001
  CI (99.9%): [3200.001, 3200.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  58.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  79.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (15.000, 15.800, 17.000), stdev = 0.837
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 83.33% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 393.794 ns/op
# Warmup Iteration   2: 254.272 ns/op
# Warmup Iteration   3: 245.405 ns/op
# Warmup Iteration   4: 304.236 ns/op
# Warmup Iteration   5: 244.912 ns/op
Iteration   1: 244.839 ns/op
                 gc.alloc.rate:      3147.105 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   2: 244.800 ns/op
                 gc.alloc.rate:      3147.609 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   3: 244.847 ns/op
                 gc.alloc.rate:      3146.975 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   4: 244.966 ns/op
                 gc.alloc.rate:      3145.474 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   5: 288.752 ns/op
                 gc.alloc.rate:      2668.478 MB/sec
                 gc.alloc.rate.norm: 808.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  253.641 ±(99.9%) 75.580 ns/op [Average]
  (min, avg, max) = (244.800, 253.641, 288.752), stdev = 19.628
  CI (99.9%): [178.061, 329.221] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  3051.128 ±(99.9%) 823.689 MB/sec [Average]
  (min, avg, max) = (2668.478, 3051.128, 3147.609), stdev = 213.910
  CI (99.9%): [2227.439, 3874.817] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  808.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
  CI (99.9%): [808.000, 808.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  43.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = UTF16, length = 128)

# Run progress: 91.67% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 487.551 ns/op
# Warmup Iteration   2: 489.277 ns/op
# Warmup Iteration   3: 343.114 ns/op
# Warmup Iteration   4: 518.807 ns/op
# Warmup Iteration   5: 460.072 ns/op
Iteration   1: 339.590 ns/op
                 gc.alloc.rate:      4021.321 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   2: 339.543 ns/op
                 gc.alloc.rate:      4021.888 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   3: 339.675 ns/op
                 gc.alloc.rate:      4020.273 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   4: 339.666 ns/op
                 gc.alloc.rate:      4020.434 MB/sec
                 gc.alloc.rate.norm: 1432.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            11.000 ms

Iteration   5: 480.449 ns/op
                 gc.alloc.rate:      2842.287 MB/sec
                 gc.alloc.rate.norm: 1432.001 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  367.784 ±(99.9%) 242.518 ns/op [Average]
  (min, avg, max) = (339.543, 367.784, 480.449), stdev = 62.981
  CI (99.9%): [125.266, 610.303] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  3785.241 ±(99.9%) 2029.781 MB/sec [Average]
  (min, avg, max) = (2842.287, 3785.241, 4021.888), stdev = 527.128
  CI (99.9%): [1755.460, 5815.021] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  1432.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1432.000, 1432.001, 1432.001), stdev = 0.001
  CI (99.9%): [1432.000, 1432.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  39.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 7.800, 9.000), stdev = 1.095
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  55.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 11.000, 13.000), stdev = 1.414
  CI (99.9%): [55.000, 55.000] (assumes normal distribution)


# Run complete. Total time: 00:10:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                            (coder)  (length)  Mode  Cnt     Score      Error   Units
StringConcatenationBenchmark.java_string_buffer                       LATIN1       128  avgt    5   324.079 ±   23.062   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate         LATIN1       128  avgt    5  2566.615 ±  178.265  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm    LATIN1       128  avgt    5   872.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count              LATIN1       128  avgt    5    26.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time               LATIN1       128  avgt    5    37.000                 ms
StringConcatenationBenchmark.java_string_buffer                        UTF16       128  avgt    5   531.147 ±  419.381   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate          UTF16       128  avgt    5  2734.754 ± 1830.700  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm     UTF16       128  avgt    5  1480.001 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count               UTF16       128  avgt    5    28.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time                UTF16       128  avgt    5    40.000                 ms
StringConcatenationBenchmark.java_string_builder                      LATIN1       128  avgt    5   265.630 ±   86.633   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate        LATIN1       128  avgt    5  3031.310 ±  890.436  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm   LATIN1       128  avgt    5   840.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count             LATIN1       128  avgt    5    31.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time              LATIN1       128  avgt    5    45.000                 ms
StringConcatenationBenchmark.java_string_builder                       UTF16       128  avgt    5   383.086 ±  145.867   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate         UTF16       128  avgt    5  3689.775 ± 1240.489  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm    UTF16       128  avgt    5  1472.001 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count              UTF16       128  avgt    5    38.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time               UTF16       128  avgt    5    54.000                 ms
StringConcatenationBenchmark.plus_operator                            LATIN1       128  avgt    5   246.146 ±    0.143   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate              LATIN1       128  avgt    5  3130.392 ±    1.854  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm         LATIN1       128  avgt    5   808.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                   LATIN1       128  avgt    5    32.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                    LATIN1       128  avgt    5    43.000                 ms
StringConcatenationBenchmark.plus_operator                             UTF16       128  avgt    5   335.007 ±    0.238   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate               UTF16       128  avgt    5  4076.326 ±    2.907  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm          UTF16       128  avgt    5  1432.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                    UTF16       128  avgt    5    41.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                     UTF16       128  avgt    5    56.000                 ms
StringConcatenationBenchmark.string_builder                           LATIN1       128  avgt    5   262.753 ±    0.098   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate             LATIN1       128  avgt    5  3048.677 ±    1.102  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm        LATIN1       128  avgt    5   840.000 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                  LATIN1       128  avgt    5    31.000             counts
StringConcatenationBenchmark.string_builder:gc.time                   LATIN1       128  avgt    5    42.000                 ms
StringConcatenationBenchmark.string_builder                            UTF16       128  avgt    5   404.268 ±  288.095   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate              UTF16       128  avgt    5  3558.377 ± 2248.460  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm         UTF16       128  avgt    5  1472.001 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                   UTF16       128  avgt    5    36.000             counts
StringConcatenationBenchmark.string_builder:gc.time                    UTF16       128  avgt    5    51.000                 ms
StringConcatenationBenchmark.string_concat                            LATIN1       128  avgt    5   411.076 ±  296.821   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate              LATIN1       128  avgt    5  4448.318 ± 2724.654  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm         LATIN1       128  avgt    5  1872.001 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                   LATIN1       128  avgt    5    46.000             counts
StringConcatenationBenchmark.string_concat:gc.time                    LATIN1       128  avgt    5    66.000                 ms
StringConcatenationBenchmark.string_concat                             UTF16       128  avgt    5   538.565 ±    0.360   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate               UTF16       128  avgt    5  5666.188 ±    3.853  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm          UTF16       128  avgt    5  3200.001 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                    UTF16       128  avgt    5    58.000             counts
StringConcatenationBenchmark.string_concat:gc.time                     UTF16       128  avgt    5    79.000                 ms
StringConcatenationBenchmark.template                                 LATIN1       128  avgt    5   253.641 ±   75.580   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                   LATIN1       128  avgt    5  3051.128 ±  823.689  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm              LATIN1       128  avgt    5   808.000 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                        LATIN1       128  avgt    5    31.000             counts
StringConcatenationBenchmark.template:gc.time                         LATIN1       128  avgt    5    43.000                 ms
StringConcatenationBenchmark.template                                  UTF16       128  avgt    5   367.784 ±  242.518   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                    UTF16       128  avgt    5  3785.241 ± 2029.781  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm               UTF16       128  avgt    5  1432.001 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                         UTF16       128  avgt    5    39.000             counts
StringConcatenationBenchmark.template:gc.time                          UTF16       128  avgt    5    55.000                 ms

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/StringConcatenationBenchmark.scala.csv

Finished StringConcatenationBenchmark benchmark (Thu Oct 16 02:55:39 PM UTC 2025)
Thu Oct 16 02:55:39 PM UTC 2025

Running StringRegexMatcherBenchmark benchmark ...
Thu Oct 16 02:55:39 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringRegexMatcherBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/StringRegexMatcherBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 406.240 us/op
# Warmup Iteration   2: 279.074 us/op
# Warmup Iteration   3: 279.352 us/op
# Warmup Iteration   4: 279.764 us/op
# Warmup Iteration   5: 279.471 us/op
Iteration   1: 279.432 us/op
Iteration   2: 281.940 us/op
Iteration   3: 343.868 us/op
Iteration   4: 278.448 us/op
Iteration   5: 278.562 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture":
  292.450 ±(99.9%) 110.814 us/op [Average]
  (min, avg, max) = (278.448, 292.450, 343.868), stdev = 28.778
  CI (99.9%): [181.637, 403.264] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 249.161 us/op
# Warmup Iteration   2: 154.053 us/op
# Warmup Iteration   3: 153.320 us/op
# Warmup Iteration   4: 153.323 us/op
# Warmup Iteration   5: 181.116 us/op
Iteration   1: 151.419 us/op
Iteration   2: 151.448 us/op
Iteration   3: 151.400 us/op
Iteration   4: 151.437 us/op
Iteration   5: 151.430 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match":
  151.427 ±(99.9%) 0.071 us/op [Average]
  (min, avg, max) = (151.400, 151.427, 151.448), stdev = 0.018
  CI (99.9%): [151.356, 151.498] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 445.150 us/op
# Warmup Iteration   2: 311.200 us/op
# Warmup Iteration   3: 311.835 us/op
# Warmup Iteration   4: 311.098 us/op
# Warmup Iteration   5: 311.403 us/op
Iteration   1: 310.456 us/op
Iteration   2: 310.572 us/op
Iteration   3: 332.034 us/op
Iteration   4: 336.213 us/op
Iteration   5: 336.419 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture":
  325.139 ±(99.9%) 51.849 us/op [Average]
  (min, avg, max) = (310.456, 325.139, 336.419), stdev = 13.465
  CI (99.9%): [273.290, 376.987] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 75.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 214.613 us/op
# Warmup Iteration   2: 165.237 us/op
# Warmup Iteration   3: 164.122 us/op
# Warmup Iteration   4: 162.539 us/op
# Warmup Iteration   5: 150.970 us/op
Iteration   1: 151.060 us/op
Iteration   2: 151.070 us/op
Iteration   3: 150.974 us/op
Iteration   4: 186.768 us/op
Iteration   5: 151.079 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match":
  158.190 ±(99.9%) 61.517 us/op [Average]
  (min, avg, max) = (150.974, 158.190, 186.768), stdev = 15.976
  CI (99.9%): [96.673, 219.707] (assumes normal distribution)


# Run complete. Total time: 00:03:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                (regexString)  Mode  Cnt    Score     Error  Units
StringRegexMatcherBenchmark.java_regex_capture  ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  292.450 ± 110.814  us/op
StringRegexMatcherBenchmark.java_regex_match    ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  151.427 ±   0.071  us/op
StringRegexMatcherBenchmark.regex_capture       ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  325.139 ±  51.849  us/op
StringRegexMatcherBenchmark.regex_match         ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  158.190 ±  61.517  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/StringRegexMatcherBenchmark.scala.csv

Finished StringRegexMatcherBenchmark benchmark (Thu Oct 16 02:59:04 PM UTC 2025)
Thu Oct 16 02:59:04 PM UTC 2025

Running EnumLookupBenchmark benchmark ...
Thu Oct 16 02:59:04 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.EnumLookupBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/EnumLookupBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 47.744 ns/op
# Warmup Iteration   2: 41.297 ns/op
# Warmup Iteration   3: 41.247 ns/op
# Warmup Iteration   4: 42.007 ns/op
# Warmup Iteration   5: 36.069 ns/op
Iteration   1: 35.805 ns/op
Iteration   2: 40.289 ns/op
Iteration   3: 35.809 ns/op
Iteration   4: 41.131 ns/op
Iteration   5: 36.628 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values":
  37.933 ±(99.9%) 9.915 ns/op [Average]
  (min, avg, max) = (35.805, 37.933, 41.131), stdev = 2.575
  CI (99.9%): [28.018, 47.848] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 672.946 ns/op
# Warmup Iteration   2: 626.467 ns/op
# Warmup Iteration   3: 520.831 ns/op
# Warmup Iteration   4: 630.260 ns/op
# Warmup Iteration   5: 611.639 ns/op
Iteration   1: 527.406 ns/op
Iteration   2: 517.154 ns/op
Iteration   3: 516.972 ns/op
Iteration   4: 633.315 ns/op
Iteration   5: 617.194 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values":
  562.408 ±(99.9%) 222.596 ns/op [Average]
  (min, avg, max) = (516.972, 562.408, 633.315), stdev = 57.807
  CI (99.9%): [339.813, 785.004] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt    Score     Error  Units
EnumLookupBenchmark.cached_enum_values  avgt    5   37.933 ±   9.915  ns/op
EnumLookupBenchmark.enum_values         avgt    5  562.408 ± 222.596  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/EnumLookupBenchmark.scala.csv

Finished EnumLookupBenchmark benchmark (Thu Oct 16 03:00:47 PM UTC 2025)
Thu Oct 16 03:00:47 PM UTC 2025

Running LoopOptimizationBenchmark benchmark ...
Thu Oct 16 03:00:47 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.LoopOptimizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/LoopOptimizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 540.393 ns/op
# Warmup Iteration   2: 275.595 ns/op
# Warmup Iteration   3: 277.101 ns/op
# Warmup Iteration   4: 277.211 ns/op
# Warmup Iteration   5: 277.192 ns/op
Iteration   1: 277.037 ns/op
Iteration   2: 276.915 ns/op
Iteration   3: 277.292 ns/op
Iteration   4: 343.918 ns/op
Iteration   5: 277.332 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array":
  290.499 ±(99.9%) 114.991 ns/op [Average]
  (min, avg, max) = (276.915, 290.499, 343.918), stdev = 29.863
  CI (99.9%): [175.508, 405.489] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range
# Parameters: (size = 1000)

# Run progress: 16.67% complete, ETA 00:04:15
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 583.102 ns/op
# Warmup Iteration   2: 510.815 ns/op
# Warmup Iteration   3: 510.412 ns/op
# Warmup Iteration   4: 510.380 ns/op
# Warmup Iteration   5: 510.284 ns/op
Iteration   1: 510.444 ns/op
Iteration   2: 635.546 ns/op
Iteration   3: 510.405 ns/op
Iteration   4: 510.501 ns/op
Iteration   5: 510.572 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range":
  535.494 ±(99.9%) 215.371 ns/op [Average]
  (min, avg, max) = (510.405, 535.494, 635.546), stdev = 55.931
  CI (99.9%): [320.122, 750.865] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:03:23
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 541.222 ns/op
# Warmup Iteration   2: 274.718 ns/op
# Warmup Iteration   3: 275.438 ns/op
# Warmup Iteration   4: 275.593 ns/op
# Warmup Iteration   5: 275.428 ns/op
Iteration   1: 275.657 ns/op
Iteration   2: 275.407 ns/op
Iteration   3: 275.497 ns/op
Iteration   4: 337.970 ns/op
Iteration   5: 275.853 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array":
  288.077 ±(99.9%) 107.401 ns/op [Average]
  (min, avg, max) = (275.407, 288.077, 337.970), stdev = 27.892
  CI (99.9%): [180.676, 395.477] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 66.824 ns/op
# Warmup Iteration   2: 57.568 ns/op
# Warmup Iteration   3: 57.525 ns/op
# Warmup Iteration   4: 57.548 ns/op
# Warmup Iteration   5: 57.533 ns/op
Iteration   1: 57.543 ns/op
Iteration   2: 57.537 ns/op
Iteration   3: 57.539 ns/op
Iteration   4: 57.542 ns/op
Iteration   5: 57.534 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop":
  57.539 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (57.534, 57.539, 57.543), stdev = 0.004
  CI (99.9%): [57.525, 57.553] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 678.422 ns/op
# Warmup Iteration   2: 274.829 ns/op
# Warmup Iteration   3: 275.454 ns/op
# Warmup Iteration   4: 275.462 ns/op
# Warmup Iteration   5: 275.423 ns/op
Iteration   1: 275.455 ns/op
Iteration   2: 275.447 ns/op
Iteration   3: 275.472 ns/op
Iteration   4: 275.433 ns/op
Iteration   5: 275.397 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array":
  275.441 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (275.397, 275.441, 275.472), stdev = 0.028
  CI (99.9%): [275.332, 275.550] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range
# Parameters: (size = 1000)

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 60.959 ns/op
# Warmup Iteration   2: 57.953 ns/op
# Warmup Iteration   3: 68.663 ns/op
# Warmup Iteration   4: 58.356 ns/op
# Warmup Iteration   5: 58.367 ns/op
Iteration   1: 58.354 ns/op
Iteration   2: 58.365 ns/op
Iteration   3: 58.366 ns/op
Iteration   4: 58.368 ns/op
Iteration   5: 58.364 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range":
  58.363 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (58.354, 58.363, 58.368), stdev = 0.005
  CI (99.9%): [58.342, 58.384] (assumes normal distribution)


# Run complete. Total time: 00:05:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          (size)  Mode  Cnt    Score     Error  Units
LoopOptimizationBenchmark.for_array                  1000  avgt    5  290.499 ± 114.991  ns/op
LoopOptimizationBenchmark.for_range                  1000  avgt    5  535.494 ± 215.371  ns/op
LoopOptimizationBenchmark.macro_fastForeach_array    1000  avgt    5  288.077 ± 107.401  ns/op
LoopOptimizationBenchmark.macro_fastLoop             1000  avgt    5   57.539 ±   0.014  ns/op
LoopOptimizationBenchmark.while_array                1000  avgt    5  275.441 ±   0.109  ns/op
LoopOptimizationBenchmark.while_range                1000  avgt    5   58.363 ±   0.021  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/LoopOptimizationBenchmark.scala.csv

Finished LoopOptimizationBenchmark benchmark (Thu Oct 16 03:05:53 PM UTC 2025)
Thu Oct 16 03:05:53 PM UTC 2025

Running ArithmeticCanonicalizationBenchmark benchmark ...
Thu Oct 16 03:05:54 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ArithmeticCanonicalizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ArithmeticCanonicalizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.535 ns/op
# Warmup Iteration   2: 2.350 ns/op
# Warmup Iteration   3: 2.339 ns/op
# Warmup Iteration   4: 2.339 ns/op
# Warmup Iteration   5: 2.339 ns/op
Iteration   1: 2.339 ns/op
Iteration   2: 2.339 ns/op
Iteration   3: 2.339 ns/op
Iteration   4: 2.339 ns/op
Iteration   5: 2.339 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add":
  2.339 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (2.339, 2.339, 2.339), stdev = 0.001
  CI (99.9%): [2.339, 2.339] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.778 ns/op
# Warmup Iteration   2: 2.351 ns/op
# Warmup Iteration   3: 2.340 ns/op
# Warmup Iteration   4: 2.340 ns/op
# Warmup Iteration   5: 2.816 ns/op
Iteration   1: 2.339 ns/op
Iteration   2: 2.339 ns/op
Iteration   3: 2.815 ns/op
Iteration   4: 2.340 ns/op
Iteration   5: 2.340 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift":
  2.435 ±(99.9%) 0.819 ns/op [Average]
  (min, avg, max) = (2.339, 2.435, 2.815), stdev = 0.213
  CI (99.9%): [1.615, 3.254] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (isHeavy)    (value)  Mode  Cnt  Score    Error  Units
ArithmeticCanonicalizationBenchmark.add         true  179426549  avgt    5  2.339 ±  0.001  ns/op
ArithmeticCanonicalizationBenchmark.shift       true  179426549  avgt    5  2.435 ±  0.819  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ArithmeticCanonicalizationBenchmark.scala.csv

Finished ArithmeticCanonicalizationBenchmark benchmark (Thu Oct 16 03:07:36 PM UTC 2025)
Thu Oct 16 03:07:36 PM UTC 2025

Running IfConditionalBranchBenchmark benchmark ...
Thu Oct 16 03:07:37 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.IfConditionalBranchBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/IfConditionalBranchBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch
# Parameters: (size = 16384)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 9.758 us/op
# Warmup Iteration   2: 4.582 us/op
# Warmup Iteration   3: 4.584 us/op
# Warmup Iteration   4: 4.583 us/op
# Warmup Iteration   5: 5.610 us/op
Iteration   1: 4.579 us/op
Iteration   2: 4.579 us/op
Iteration   3: 5.527 us/op
Iteration   4: 4.579 us/op
Iteration   5: 4.580 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch":
  4.769 ±(99.9%) 1.633 us/op [Average]
  (min, avg, max) = (4.579, 4.769, 5.527), stdev = 0.424
  CI (99.9%): [3.136, 6.402] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch
# Parameters: (size = 16384)

# Run progress: 33.33% complete, ETA 00:01:42
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.225 us/op
# Warmup Iteration   2: 6.826 us/op
# Warmup Iteration   3: 6.826 us/op
# Warmup Iteration   4: 6.824 us/op
# Warmup Iteration   5: 6.824 us/op
Iteration   1: 6.826 us/op
Iteration   2: 6.826 us/op
Iteration   3: 8.447 us/op
Iteration   4: 8.127 us/op
Iteration   5: 8.444 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch":
  7.734 ±(99.9%) 3.231 us/op [Average]
  (min, avg, max) = (6.826, 7.734, 8.447), stdev = 0.839
  CI (99.9%): [4.503, 10.965] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch
# Parameters: (size = 16384)

# Run progress: 66.67% complete, ETA 00:00:51
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 65.266 us/op
# Warmup Iteration   2: 55.425 us/op
# Warmup Iteration   3: 55.258 us/op
# Warmup Iteration   4: 55.232 us/op
# Warmup Iteration   5: 55.251 us/op
Iteration   1: 55.252 us/op
Iteration   2: 55.254 us/op
Iteration   3: 55.232 us/op
Iteration   4: 55.234 us/op
Iteration   5: 55.236 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch":
  55.241 ±(99.9%) 0.041 us/op [Average]
  (min, avg, max) = (55.232, 55.241, 55.254), stdev = 0.011
  CI (99.9%): [55.201, 55.282] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             (size)  Mode  Cnt   Score   Error  Units
IfConditionalBranchBenchmark.no_if_branch              16384  avgt    5   4.769 ± 1.633  us/op
IfConditionalBranchBenchmark.predictable_if_branch     16384  avgt    5   7.734 ± 3.231  us/op
IfConditionalBranchBenchmark.unpredictable_if_branch   16384  avgt    5  55.241 ± 0.041  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/IfConditionalBranchBenchmark.scala.csv

Finished IfConditionalBranchBenchmark benchmark (Thu Oct 16 03:10:10 PM UTC 2025)
Thu Oct 16 03:10:10 PM UTC 2025

Running CatsTypeclassesBenchmark benchmark ...
Thu Oct 16 03:10:11 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypeclassesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/CatsTypeclassesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.198 us/op
# Warmup Iteration   2: 2.929 us/op
# Warmup Iteration   3: 2.936 us/op
# Warmup Iteration   4: 2.938 us/op
# Warmup Iteration   5: 3.661 us/op
Iteration   1: 2.936 us/op
Iteration   2: 2.940 us/op
Iteration   3: 2.945 us/op
Iteration   4: 3.044 us/op
Iteration   5: 3.684 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable":
  3.110 ±(99.9%) 1.248 us/op [Average]
  (min, avg, max) = (2.936, 3.110, 3.684), stdev = 0.324
  CI (99.9%): [1.862, 4.358] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:03:24
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 32.176 us/op
# Warmup Iteration   2: 23.200 us/op
# Warmup Iteration   3: 27.903 us/op
# Warmup Iteration   4: 23.186 us/op
# Warmup Iteration   5: 23.250 us/op
Iteration   1: 23.373 us/op
Iteration   2: 23.558 us/op
Iteration   3: 23.535 us/op
Iteration   4: 23.533 us/op
Iteration   5: 23.523 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension":
  23.505 ±(99.9%) 0.287 us/op [Average]
  (min, avg, max) = (23.373, 23.505, 23.558), stdev = 0.075
  CI (99.9%): [23.217, 23.792] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.445 us/op
# Warmup Iteration   2: 12.710 us/op
# Warmup Iteration   3: 12.197 us/op
# Warmup Iteration   4: 12.017 us/op
# Warmup Iteration   5: 9.880 us/op
Iteration   1: 10.138 us/op
Iteration   2: 9.972 us/op
Iteration   3: 10.755 us/op
Iteration   4: 10.751 us/op
Iteration   5: 10.747 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor":
  10.473 ±(99.9%) 1.484 us/op [Average]
  (min, avg, max) = (9.972, 10.473, 10.755), stdev = 0.386
  CI (99.9%): [8.988, 11.957] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 15.948 us/op
# Warmup Iteration   2: 12.694 us/op
# Warmup Iteration   3: 13.294 us/op
# Warmup Iteration   4: 13.243 us/op
# Warmup Iteration   5: 13.238 us/op
Iteration   1: 13.313 us/op
Iteration   2: 16.179 us/op
Iteration   3: 16.219 us/op
Iteration   4: 13.234 us/op
Iteration   5: 13.265 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad":
  14.442 ±(99.9%) 6.178 us/op [Average]
  (min, avg, max) = (13.234, 14.442, 16.219), stdev = 1.604
  CI (99.9%): [8.264, 20.620] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.078 us/op
# Warmup Iteration   2: 12.924 us/op
# Warmup Iteration   3: 12.032 us/op
# Warmup Iteration   4: 12.046 us/op
# Warmup Iteration   5: 12.047 us/op
Iteration   1: 12.047 us/op
Iteration   2: 12.056 us/op
Iteration   3: 12.041 us/op
Iteration   4: 12.043 us/op
Iteration   5: 14.980 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid":
  12.633 ±(99.9%) 5.051 us/op [Average]
  (min, avg, max) = (12.041, 12.633, 14.980), stdev = 1.312
  CI (99.9%): [7.582, 17.684] (assumes normal distribution)


# Run complete. Total time: 00:04:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (size)  Mode  Cnt   Score   Error  Units
CatsTypeclassesBenchmark.foldable            1000  avgt    5   3.110 ± 1.248  us/op
CatsTypeclassesBenchmark.forComprehension    1000  avgt    5  23.505 ± 0.287  us/op
CatsTypeclassesBenchmark.functor             1000  avgt    5  10.473 ± 1.484  us/op
CatsTypeclassesBenchmark.monad               1000  avgt    5  14.442 ± 6.178  us/op
CatsTypeclassesBenchmark.monoid              1000  avgt    5  12.633 ± 5.051  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/CatsTypeclassesBenchmark.scala.csv

Finished CatsTypeclassesBenchmark benchmark (Thu Oct 16 03:14:26 PM UTC 2025)
Thu Oct 16 03:14:26 PM UTC 2025

Running CatsTypesBenchmark benchmark ...
Thu Oct 16 03:14:26 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/CatsTypesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 34.310 us/op
# Warmup Iteration   2: 28.700 us/op
# Warmup Iteration   3: 28.923 us/op
# Warmup Iteration   4: 28.922 us/op
# Warmup Iteration   5: 44.059 us/op
Iteration   1: 28.959 us/op
Iteration   2: 40.032 us/op
Iteration   3: 30.706 us/op
Iteration   4: 34.957 us/op
Iteration   5: 28.908 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT":
  32.713 ±(99.9%) 18.387 us/op [Average]
  (min, avg, max) = (28.908, 32.713, 40.032), stdev = 4.775
  CI (99.9%): [14.325, 51.100] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt   Score    Error  Units
CatsTypesBenchmark.eitherT    1000  avgt    5  32.713 ± 18.387  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/CatsTypesBenchmark.scala.csv

Finished CatsTypesBenchmark benchmark (Thu Oct 16 03:15:18 PM UTC 2025)
Thu Oct 16 03:15:18 PM UTC 2025

Running CatsEffectBasicBenchmark benchmark ...
Thu Oct 16 03:15:19 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 183.618 us/op
# Warmup Iteration   2: 144.782 us/op
# Warmup Iteration   3: 152.733 us/op
# Warmup Iteration   4: 150.850 us/op
# Warmup Iteration   5: 152.927 us/op
Iteration   1: 152.106 us/op
Iteration   2: 152.001 us/op
Iteration   3: 153.000 us/op
Iteration   4: 152.144 us/op
Iteration   5: 152.005 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial":
  152.251 ±(99.9%) 1.630 us/op [Average]
  (min, avg, max) = (152.001, 152.251, 153.000), stdev = 0.423
  CI (99.9%): [150.622, 153.881] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt    Score   Error  Units
CatsEffectBasicBenchmark.factorial  avgt    5  152.251 ± 1.630  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectBasicBenchmark.scala.csv

Finished CatsEffectBasicBenchmark benchmark (Thu Oct 16 03:16:10 PM UTC 2025)
Thu Oct 16 03:16:10 PM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Thu Oct 16 03:16:11 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5340.656 ms/op
# Warmup Iteration   2: 5486.223 ms/op
# Warmup Iteration   3: 5548.767 ms/op
# Warmup Iteration   4: 6118.711 ms/op
# Warmup Iteration   5: 5401.661 ms/op
Iteration   1: 5057.772 ms/op
Iteration   2: 6425.424 ms/op
Iteration   3: 5404.822 ms/op
Iteration   4: 5843.015 ms/op
Iteration   5: 5792.255 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  5704.658 ±(99.9%) 1977.262 ms/op [Average]
  (min, avg, max) = (5057.772, 5704.658, 6425.424), stdev = 513.489
  CI (99.9%): [3727.396, 7681.920] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt     Score      Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt    5  5704.658 ± 1977.262  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Thu Oct 16 03:17:44 PM UTC 2025)
Thu Oct 16 03:17:44 PM UTC 2025

Running CatsEffectWordFrequencyBenchmark benchmark ...
Thu Oct 16 03:17:44 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 32.984 ms/op
# Warmup Iteration   2: 18.196 ms/op
# Warmup Iteration   3: 17.824 ms/op
# Warmup Iteration   4: 17.752 ms/op
# Warmup Iteration   5: 17.707 ms/op
Iteration   1: 17.794 ms/op
Iteration   2: 17.711 ms/op
Iteration   3: 17.633 ms/op
Iteration   4: 17.684 ms/op
Iteration   5: 17.708 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency":
  17.706 ±(99.9%) 0.226 ms/op [Average]
  (min, avg, max) = (17.633, 17.706, 17.794), stdev = 0.059
  CI (99.9%): [17.481, 17.932] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 421.530 ms/op
# Warmup Iteration   2: 183.532 ms/op
# Warmup Iteration   3: 180.972 ms/op
# Warmup Iteration   4: 180.415 ms/op
# Warmup Iteration   5: 180.024 ms/op
Iteration   1: 179.895 ms/op
Iteration   2: 180.077 ms/op
Iteration   3: 179.675 ms/op
Iteration   4: 179.843 ms/op
Iteration   5: 179.947 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2":
  179.887 ±(99.9%) 0.566 ms/op [Average]
  (min, avg, max) = (179.675, 179.887, 180.077), stdev = 0.147
  CI (99.9%): [179.321, 180.454] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                Mode  Cnt    Score   Error  Units
CatsEffectWordFrequencyBenchmark.wordFrequency           avgt    5   17.706 ± 0.226  ms/op
CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2  avgt    5  179.887 ± 0.566  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/CatsEffectWordFrequencyBenchmark.scala.csv

Finished CatsEffectWordFrequencyBenchmark benchmark (Thu Oct 16 03:19:26 PM UTC 2025)
Thu Oct 16 03:19:26 PM UTC 2025

Running ZioBasicBenchmark benchmark ...
Thu Oct 16 03:19:26 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ZioBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 172.576 us/op
# Warmup Iteration   2: 98.974 us/op
# Warmup Iteration   3: 143.316 us/op
# Warmup Iteration   4: 146.940 us/op
# Warmup Iteration   5: 151.316 us/op
Iteration   1: 153.339 us/op
Iteration   2: 154.033 us/op
Iteration   3: 153.786 us/op
Iteration   4: 153.945 us/op
Iteration   5: 154.523 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial":
  153.925 ±(99.9%) 1.649 us/op [Average]
  (min, avg, max) = (153.339, 153.925, 154.523), stdev = 0.428
  CI (99.9%): [152.276, 155.574] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    Mode  Cnt    Score   Error  Units
ZioBasicBenchmark.factorial  avgt    5  153.925 ± 1.649  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ZioBasicBenchmark.scala.csv

Finished ZioBasicBenchmark benchmark (Thu Oct 16 03:20:18 PM UTC 2025)
Thu Oct 16 03:20:18 PM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Thu Oct 16 03:20:18 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6071.543 ms/op
# Warmup Iteration   2: 5464.695 ms/op
# Warmup Iteration   3: 5393.746 ms/op
# Warmup Iteration   4: 4721.622 ms/op
# Warmup Iteration   5: 5890.403 ms/op
Iteration   1: 5818.463 ms/op
Iteration   2: 4650.546 ms/op
Iteration   3: 5889.609 ms/op
Iteration   4: 5873.181 ms/op
Iteration   5: 5855.286 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  5617.417 ±(99.9%) 2083.750 ms/op [Average]
  (min, avg, max) = (4650.546, 5617.417, 5889.609), stdev = 541.143
  CI (99.9%): [3533.667, 7701.167] (assumes normal distribution)


# Run complete. Total time: 00:01:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt     Score      Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt    5  5617.417 ± 2083.750  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Thu Oct 16 03:21:42 PM UTC 2025)
Thu Oct 16 03:21:42 PM UTC 2025

Running ZioWordFrequencyBenchmark benchmark ...
Thu Oct 16 03:21:42 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/ZioWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 40.465 ms/op
# Warmup Iteration   2: 18.242 ms/op
# Warmup Iteration   3: 17.851 ms/op
# Warmup Iteration   4: 17.778 ms/op
# Warmup Iteration   5: 17.732 ms/op
Iteration   1: 17.752 ms/op
Iteration   2: 17.796 ms/op
Iteration   3: 17.692 ms/op
Iteration   4: 17.699 ms/op
Iteration   5: 17.886 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency":
  17.765 ±(99.9%) 0.307 ms/op [Average]
  (min, avg, max) = (17.692, 17.765, 17.886), stdev = 0.080
  CI (99.9%): [17.458, 18.072] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2800.720 ms/op
# Warmup Iteration   2: 582.638 ms/op
# Warmup Iteration   3: 264.224 ms/op
# Warmup Iteration   4: 270.022 ms/op
# Warmup Iteration   5: 264.266 ms/op
Iteration   1: 260.520 ms/op
Iteration   2: 263.493 ms/op
Iteration   3: 265.869 ms/op
Iteration   4: 265.306 ms/op
Iteration   5: 268.179 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream":
  264.673 ±(99.9%) 11.020 ms/op [Average]
  (min, avg, max) = (260.520, 264.673, 268.179), stdev = 2.862
  CI (99.9%): [253.654, 275.693] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt    Score    Error  Units
ZioWordFrequencyBenchmark.wordFrequency        avgt    5   17.765 ±  0.307  ms/op
ZioWordFrequencyBenchmark.wordFrequencyStream  avgt    5  264.673 ± 11.020  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/ZioWordFrequencyBenchmark.scala.csv

Finished ZioWordFrequencyBenchmark benchmark (Thu Oct 16 03:23:25 PM UTC 2025)
Thu Oct 16 03:23:25 PM UTC 2025

Running DijkstraBenchmark benchmark ...
Thu Oct 16 03:23:25 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16208.505 ms/op
# Warmup Iteration   2: 15707.032 ms/op
# Warmup Iteration   3: 16841.967 ms/op
# Warmup Iteration   4: 16839.934 ms/op
# Warmup Iteration   5: 16851.635 ms/op
Iteration   1: 16842.436 ms/op
Iteration   2: 16865.260 ms/op
Iteration   3: 16814.304 ms/op
Iteration   4: 16823.115 ms/op
Iteration   5: 16813.119 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  16831.647 ±(99.9%) 85.305 ms/op [Average]
  (min, avg, max) = (16813.119, 16831.647, 16865.260), stdev = 22.153
  CI (99.9%): [16746.342, 16916.952] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:02:55
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 185.869 ms/op
# Warmup Iteration   2: 181.481 ms/op
# Warmup Iteration   3: 181.525 ms/op
# Warmup Iteration   4: 181.372 ms/op
# Warmup Iteration   5: 181.498 ms/op
Iteration   1: 181.466 ms/op
Iteration   2: 181.450 ms/op
Iteration   3: 224.862 ms/op
Iteration   4: 181.637 ms/op
Iteration   5: 181.657 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  190.214 ±(99.9%) 74.582 ms/op [Average]
  (min, avg, max) = (181.450, 190.214, 224.862), stdev = 19.369
  CI (99.9%): [115.632, 264.796] (assumes normal distribution)


# Run complete. Total time: 00:03:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score    Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt    5  16831.647 ± 85.305  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt    5    190.214 ± 74.582  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Thu Oct 16 03:27:22 PM UTC 2025)
Thu Oct 16 03:27:22 PM UTC 2025

Running FactorialBenchmark benchmark ...
Thu Oct 16 03:27:22 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FactorialBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/FactorialBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 54.510 us/op
# Warmup Iteration   2: 44.402 us/op
# Warmup Iteration   3: 62.147 us/op
# Warmup Iteration   4: 65.547 us/op
# Warmup Iteration   5: 47.407 us/op
Iteration   1: 49.553 us/op
Iteration   2: 62.642 us/op
Iteration   3: 64.700 us/op
Iteration   4: 64.307 us/op
Iteration   5: 64.274 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  61.095 ±(99.9%) 25.032 us/op [Average]
  (min, avg, max) = (49.553, 61.095, 64.700), stdev = 6.501
  CI (99.9%): [36.064, 86.127] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 25.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 721.648 us/op
# Warmup Iteration   2: 615.998 us/op
# Warmup Iteration   3: 692.053 us/op
# Warmup Iteration   4: 977.857 us/op
# Warmup Iteration   5: 758.123 us/op
Iteration   1: 750.726 us/op
Iteration   2: 956.714 us/op
Iteration   3: 885.844 us/op
Iteration   4: 893.592 us/op
Iteration   5: 813.697 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  860.115 ±(99.9%) 305.845 us/op [Average]
  (min, avg, max) = (750.726, 860.115, 956.714), stdev = 79.427
  CI (99.9%): [554.270, 1165.960] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 358.746 us/op
# Warmup Iteration   2: 231.740 us/op
# Warmup Iteration   3: 263.599 us/op
# Warmup Iteration   4: 270.571 us/op
# Warmup Iteration   5: 242.217 us/op
Iteration   1: 226.830 us/op
Iteration   2: 183.197 us/op
Iteration   3: 277.425 us/op
Iteration   4: 184.813 us/op
Iteration   5: 183.178 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  211.089 ±(99.9%) 159.880 us/op [Average]
  (min, avg, max) = (183.178, 211.089, 277.425), stdev = 41.520
  CI (99.9%): [51.209, 370.968] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 75.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 7377.116 us/op
# Warmup Iteration   2: 7037.778 us/op
# Warmup Iteration   3: 5240.410 us/op
# Warmup Iteration   4: 6251.053 us/op
# Warmup Iteration   5: 5243.739 us/op
Iteration   1: 6413.449 us/op
Iteration   2: 5239.022 us/op
Iteration   3: 5238.755 us/op
Iteration   4: 5774.047 us/op
Iteration   5: 5776.766 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  5688.408 ±(99.9%) 1871.588 us/op [Average]
  (min, avg, max) = (5238.755, 5688.408, 6413.449), stdev = 486.045
  CI (99.9%): [3816.820, 7559.996] (assumes normal distribution)


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       (n)  Mode  Cnt     Score      Error  Units
FactorialBenchmark.dac_big_int_multiply        1000  avgt    5    61.095 ±   25.032  us/op
FactorialBenchmark.dac_big_int_multiply        5000  avgt    5   860.115 ±  305.845  us/op
FactorialBenchmark.iterative_big_int_multiply  1000  avgt    5   211.089 ±  159.880  us/op
FactorialBenchmark.iterative_big_int_multiply  5000  avgt    5  5688.408 ± 1871.588  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/FactorialBenchmark.scala.csv

Finished FactorialBenchmark benchmark (Thu Oct 16 03:30:46 PM UTC 2025)
Thu Oct 16 03:30:46 PM UTC 2025

Running GameOfLifeBenchmark benchmark ...
Thu Oct 16 03:30:46 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.GameOfLifeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/GameOfLifeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.982 ms/op
# Warmup Iteration   2: 27.752 ms/op
# Warmup Iteration   3: 23.204 ms/op
# Warmup Iteration   4: 27.438 ms/op
# Warmup Iteration   5: 23.187 ms/op
Iteration   1: 23.189 ms/op
Iteration   2: 23.191 ms/op
Iteration   3: 23.171 ms/op
Iteration   4: 23.211 ms/op
Iteration   5: 23.209 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy":
  23.194 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (23.171, 23.194, 23.211), stdev = 0.016
  CI (99.9%): [23.131, 23.257] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place

# Run progress: 50.00% complete, ETA 00:00:51
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26.605 ms/op
# Warmup Iteration   2: 23.774 ms/op
# Warmup Iteration   3: 23.781 ms/op
# Warmup Iteration   4: 23.722 ms/op
# Warmup Iteration   5: 23.745 ms/op
Iteration   1: 23.750 ms/op
Iteration   2: 23.748 ms/op
Iteration   3: 23.723 ms/op
Iteration   4: 23.736 ms/op
Iteration   5: 23.729 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place":
  23.737 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (23.723, 23.737, 23.750), stdev = 0.011
  CI (99.9%): [23.693, 23.781] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt   Score   Error  Units
GameOfLifeBenchmark.array_copy  avgt    5  23.194 ± 0.063  ms/op
GameOfLifeBenchmark.in_place    avgt    5  23.737 ± 0.044  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/GameOfLifeBenchmark.scala.csv

Finished GameOfLifeBenchmark benchmark (Thu Oct 16 03:32:29 PM UTC 2025)
Thu Oct 16 03:32:29 PM UTC 2025

Running KnapsackBenchmark benchmark ...
Thu Oct 16 03:32:30 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 13905.569 ms/op
# Warmup Iteration   2: 13886.110 ms/op
# Warmup Iteration   3: 13541.229 ms/op
# Warmup Iteration   4: 13823.991 ms/op
# Warmup Iteration   5: 12918.902 ms/op
Iteration   1: 13002.393 ms/op
Iteration   2: 12916.095 ms/op
Iteration   3: 12930.582 ms/op
Iteration   4: 14656.433 ms/op
Iteration   5: 13784.401 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  13457.981 ±(99.9%) 2933.945 ms/op [Average]
  (min, avg, max) = (12916.095, 13457.981, 14656.433), stdev = 761.936
  CI (99.9%): [10524.036, 16391.926] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:02:16
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.977 ms/op
# Warmup Iteration   2: 13.632 ms/op
# Warmup Iteration   3: 11.131 ms/op
# Warmup Iteration   4: 11.087 ms/op
# Warmup Iteration   5: 11.087 ms/op
Iteration   1: 11.133 ms/op
Iteration   2: 11.136 ms/op
Iteration   3: 11.136 ms/op
Iteration   4: 11.143 ms/op
Iteration   5: 11.136 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  11.137 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (11.133, 11.137, 11.143), stdev = 0.004
  CI (99.9%): [11.122, 11.152] (assumes normal distribution)


# Run complete. Total time: 00:03:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt      Score      Error  Units
KnapsackBenchmark.dynamic         50000  avgt    5  13457.981 ± 2933.945  ms/op
KnapsackBenchmark.greedy          50000  avgt    5     11.137 ±    0.015  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Thu Oct 16 03:35:38 PM UTC 2025)
Thu Oct 16 03:35:38 PM UTC 2025

Running NQueensBenchmark benchmark ...
Thu Oct 16 03:35:38 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.NQueensBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/NQueensBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking
# Parameters: (n = 24)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 275.471 ms/op
# Warmup Iteration   2: 238.019 ms/op
# Warmup Iteration   3: 238.835 ms/op
# Warmup Iteration   4: 238.536 ms/op
# Warmup Iteration   5: 237.426 ms/op
Iteration   1: 236.498 ms/op
Iteration   2: 237.338 ms/op
Iteration   3: 237.549 ms/op
Iteration   4: 237.682 ms/op
Iteration   5: 237.902 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking":
  237.394 ±(99.9%) 2.082 ms/op [Average]
  (min, avg, max) = (236.498, 237.394, 237.902), stdev = 0.541
  CI (99.9%): [235.312, 239.476] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing
# Parameters: (n = 24)

# Run progress: 50.00% complete, ETA 00:00:52
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4.241 ms/op
# Warmup Iteration   2: 3.470 ms/op
# Warmup Iteration   3: 3.467 ms/op
# Warmup Iteration   4: 3.468 ms/op
# Warmup Iteration   5: 3.467 ms/op
Iteration   1: 3.466 ms/op
Iteration   2: 3.467 ms/op
Iteration   3: 3.482 ms/op
Iteration   4: 3.485 ms/op
Iteration   5: 3.483 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing":
  3.477 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (3.466, 3.477, 3.485), stdev = 0.009
  CI (99.9%): [3.441, 3.513] (assumes normal distribution)


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             (n)  Mode  Cnt    Score   Error  Units
NQueensBenchmark.backtracking          24  avgt    5  237.394 ± 2.082  ms/op
NQueensBenchmark.simulated_annealing   24  avgt    5    3.477 ± 0.036  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/NQueensBenchmark.scala.csv

Finished NQueensBenchmark benchmark (Thu Oct 16 03:37:23 PM UTC 2025)
Thu Oct 16 03:37:23 PM UTC 2025

Running PalindromeBenchmark benchmark ...
Thu Oct 16 03:37:23 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PalindromeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/PalindromeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.601 ms/op
# Warmup Iteration   2: 1.589 ms/op
# Warmup Iteration   3: 1.659 ms/op
# Warmup Iteration   4: 1.834 ms/op
# Warmup Iteration   5: 1.391 ms/op
Iteration   1: 1.332 ms/op
Iteration   2: 1.321 ms/op
Iteration   3: 1.321 ms/op
Iteration   4: 1.320 ms/op
Iteration   5: 1.321 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional":
  1.323 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (1.320, 1.323, 1.332), stdev = 0.005
  CI (99.9%): [1.305, 1.341] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative

# Run progress: 33.33% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.318 ms/op
# Warmup Iteration   2: 0.835 ms/op
# Warmup Iteration   3: 0.823 ms/op
# Warmup Iteration   4: 0.823 ms/op
# Warmup Iteration   5: 0.824 ms/op
Iteration   1: 0.823 ms/op
Iteration   2: 1.031 ms/op
Iteration   3: 0.823 ms/op
Iteration   4: 0.971 ms/op
Iteration   5: 1.035 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative":
  0.937 ±(99.9%) 0.411 ms/op [Average]
  (min, avg, max) = (0.823, 0.937, 1.035), stdev = 0.107
  CI (99.9%): [0.526, 1.348] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive

# Run progress: 66.67% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.345 ms/op
# Warmup Iteration   2: 0.829 ms/op
# Warmup Iteration   3: 0.822 ms/op
# Warmup Iteration   4: 0.823 ms/op
# Warmup Iteration   5: 0.821 ms/op
Iteration   1: 0.823 ms/op
Iteration   2: 0.820 ms/op
Iteration   3: 0.820 ms/op
Iteration   4: 0.821 ms/op
Iteration   5: 0.820 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive":
  0.821 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.820, 0.821, 0.823), stdev = 0.001
  CI (99.9%): [0.816, 0.826] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt  Score   Error  Units
PalindromeBenchmark.functional  avgt    5  1.323 ± 0.018  ms/op
PalindromeBenchmark.iterative   avgt    5  0.937 ± 0.411  ms/op
PalindromeBenchmark.recursive   avgt    5  0.821 ± 0.005  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/PalindromeBenchmark.scala.csv

Finished PalindromeBenchmark benchmark (Thu Oct 16 03:39:56 PM UTC 2025)
Thu Oct 16 03:39:56 PM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Thu Oct 16 03:39:57 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 517.490 ms/op
# Warmup Iteration   2: 507.487 ms/op
# Warmup Iteration   3: 544.697 ms/op
# Warmup Iteration   4: 534.177 ms/op
# Warmup Iteration   5: 534.211 ms/op
Iteration   1: 527.690 ms/op
Iteration   2: 534.574 ms/op
Iteration   3: 533.403 ms/op
Iteration   4: 592.354 ms/op
Iteration   5: 502.241 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  538.053 ±(99.9%) 127.308 ms/op [Average]
  (min, avg, max) = (502.241, 538.053, 592.354), stdev = 33.061
  CI (99.9%): [410.745, 665.360] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:00:57
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 272.522 ms/op
# Warmup Iteration   2: 312.775 ms/op
# Warmup Iteration   3: 267.081 ms/op
# Warmup Iteration   4: 267.089 ms/op
# Warmup Iteration   5: 267.088 ms/op
Iteration   1: 267.085 ms/op
Iteration   2: 267.071 ms/op
Iteration   3: 267.113 ms/op
Iteration   4: 267.061 ms/op
Iteration   5: 267.053 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  267.077 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (267.053, 267.077, 267.113), stdev = 0.024
  CI (99.9%): [266.985, 267.168] (assumes normal distribution)


# Run complete. Total time: 00:01:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt    Score     Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt    5  538.053 ± 127.308  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt    5  267.077 ±   0.091  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Thu Oct 16 03:41:50 PM UTC 2025)
Thu Oct 16 03:41:50 PM UTC 2025

Running PrimesBenchmark benchmark ...
Thu Oct 16 03:41:50 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 40.659 ms/op
# Warmup Iteration   2: 43.905 ms/op
# Warmup Iteration   3: 36.599 ms/op
# Warmup Iteration   4: 36.182 ms/op
# Warmup Iteration   5: 36.201 ms/op
Iteration   1: 36.198 ms/op
Iteration   2: 36.205 ms/op
Iteration   3: 36.178 ms/op
Iteration   4: 57.095 ms/op
Iteration   5: 36.758 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  40.487 ±(99.9%) 35.762 ms/op [Average]
  (min, avg, max) = (36.178, 40.487, 57.095), stdev = 9.287
  CI (99.9%): [4.725, 76.249] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4199.923 ms/op
# Warmup Iteration   2: 3848.664 ms/op
# Warmup Iteration   3: 3848.716 ms/op
# Warmup Iteration   4: 3848.391 ms/op
# Warmup Iteration   5: 4331.201 ms/op
Iteration   1: 3848.600 ms/op
Iteration   2: 3848.295 ms/op
Iteration   3: 3848.727 ms/op
Iteration   4: 3848.356 ms/op
Iteration   5: 3848.431 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  3848.482 ±(99.9%) 0.687 ms/op [Average]
  (min, avg, max) = (3848.295, 3848.482, 3848.727), stdev = 0.178
  CI (99.9%): [3847.795, 3849.169] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:02:10
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6115.666 ms/op
# Warmup Iteration   2: 5388.466 ms/op
# Warmup Iteration   3: 5452.393 ms/op
# Warmup Iteration   4: 5473.358 ms/op
# Warmup Iteration   5: 5495.119 ms/op
Iteration   1: 4499.799 ms/op
Iteration   2: 4501.986 ms/op
Iteration   3: 4499.745 ms/op
Iteration   4: 4499.656 ms/op
Iteration   5: 4502.010 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  4500.639 ±(99.9%) 4.780 ms/op [Average]
  (min, avg, max) = (4499.656, 4500.639, 4502.010), stdev = 1.241
  CI (99.9%): [4495.859, 4505.420] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:01:08
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4768.409 ms/op
# Warmup Iteration   2: 4706.949 ms/op
# Warmup Iteration   3: 4706.744 ms/op
# Warmup Iteration   4: 5659.758 ms/op
# Warmup Iteration   5: 4709.635 ms/op
Iteration   1: 4709.751 ms/op
Iteration   2: 4709.912 ms/op
Iteration   3: 4710.199 ms/op
Iteration   4: 4709.674 ms/op
Iteration   5: 4710.404 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  4709.988 ±(99.9%) 1.183 ms/op [Average]
  (min, avg, max) = (4709.674, 4709.988, 4710.404), stdev = 0.307
  CI (99.9%): [4708.805, 4711.171] (assumes normal distribution)


# Run complete. Total time: 00:04:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score    Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt    5    40.487 ± 35.762  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt    5  3848.482 ±  0.687  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt    5  4500.639 ±  4.780  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt    5  4709.988 ±  1.183  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Thu Oct 16 03:46:47 PM UTC 2025)
Thu Oct 16 03:46:47 PM UTC 2025

Running WordFrequencyBenchmark benchmark ...
Thu Oct 16 03:46:47 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.WordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ce/WordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 102.922 ms/op
# Warmup Iteration   2: 66.819 ms/op
# Warmup Iteration   3: 76.927 ms/op
# Warmup Iteration   4: 65.151 ms/op
# Warmup Iteration   5: 65.030 ms/op
Iteration   1: 65.146 ms/op
Iteration   2: 65.000 ms/op
Iteration   3: 65.016 ms/op
Iteration   4: 65.065 ms/op
Iteration   5: 65.043 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac":
  65.054 ±(99.9%) 0.221 ms/op [Average]
  (min, avg, max) = (65.000, 65.054, 65.146), stdev = 0.057
  CI (99.9%): [64.833, 65.275] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional

# Run progress: 20.00% complete, ETA 00:03:24
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26.266 ms/op
# Warmup Iteration   2: 19.963 ms/op
# Warmup Iteration   3: 20.019 ms/op
# Warmup Iteration   4: 20.016 ms/op
# Warmup Iteration   5: 20.026 ms/op
Iteration   1: 19.995 ms/op
Iteration   2: 20.064 ms/op
Iteration   3: 20.004 ms/op
Iteration   4: 19.718 ms/op
Iteration   5: 20.056 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional":
  19.967 ±(99.9%) 0.550 ms/op [Average]
  (min, avg, max) = (19.718, 19.967, 20.064), stdev = 0.143
  CI (99.9%): [19.417, 20.517] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 22.775 ms/op
# Warmup Iteration   2: 15.285 ms/op
# Warmup Iteration   3: 15.199 ms/op
# Warmup Iteration   4: 15.182 ms/op
# Warmup Iteration   5: 15.258 ms/op
Iteration   1: 15.274 ms/op
Iteration   2: 15.179 ms/op
Iteration   3: 15.172 ms/op
Iteration   4: 15.224 ms/op
Iteration   5: 15.171 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative":
  15.204 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (15.171, 15.204, 15.274), stdev = 0.045
  CI (99.9%): [15.031, 15.377] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6.168 ms/op
# Warmup Iteration   2: 4.929 ms/op
# Warmup Iteration   3: 4.885 ms/op
# Warmup Iteration   4: 4.897 ms/op
# Warmup Iteration   5: 4.896 ms/op
Iteration   1: 4.904 ms/op
Iteration   2: 4.875 ms/op
Iteration   3: 4.884 ms/op
Iteration   4: 4.873 ms/op
Iteration   5: 4.859 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream":
  4.879 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (4.859, 4.879, 4.904), stdev = 0.017
  CI (99.9%): [4.814, 4.943] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, OpenJDK 64-Bit Server VM, 25+37-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 13.571 ms/op
# Warmup Iteration   2: 15.557 ms/op
# Warmup Iteration   3: 13.007 ms/op
# Warmup Iteration   4: 12.934 ms/op
# Warmup Iteration   5: 12.941 ms/op
Iteration   1: 12.930 ms/op
Iteration   2: 15.158 ms/op
Iteration   3: 12.941 ms/op
Iteration   4: 14.362 ms/op
Iteration   5: 14.481 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream":
  13.974 ±(99.9%) 3.835 ms/op [Average]
  (min, avg, max) = (12.930, 13.974, 15.158), stdev = 0.996
  CI (99.9%): [10.139, 17.809] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt   Score   Error  Units
WordFrequencyBenchmark.dac              avgt    5  65.054 ± 0.221  ms/op
WordFrequencyBenchmark.functional       avgt    5  19.967 ± 0.550  ms/op
WordFrequencyBenchmark.iterative        avgt    5  15.204 ± 0.173  ms/op
WordFrequencyBenchmark.parallel_stream  avgt    5   4.879 ± 0.064  ms/op
WordFrequencyBenchmark.pattern_stream   avgt    5  13.974 ± 3.835  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ce/WordFrequencyBenchmark.scala.csv

Finished WordFrequencyBenchmark benchmark (Thu Oct 16 03:51:02 PM UTC 2025)
Thu Oct 16 03:51:02 PM UTC 2025

Finished GraalVM CE test suite!

Elapsed: 101 minutes and 17 seconds.

+=============================================
| Running steps 5 to 7 with graalvm-ee
+=============================================
| Thu Oct 16 03:51:02 PM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/25-graal
JDK version: 25
JVM name: GraalVM Oracle
JVM identifier: graalvm-ee

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk25.json
JMH output folder: results/jdk-25/x86_64/jmh/graalvm-ee

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running GraalVM Oracle test suite ...
Creating folder: 'results/jdk-25/x86_64/jmh/graalvm-ee' ...

Running ListBenchmark benchmark ...
Thu Oct 16 03:51:03 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ListBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ListBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 21136.852 ns/op
# Warmup Iteration   2: 22520.648 ns/op
# Warmup Iteration   3: 28957.344 ns/op
# Warmup Iteration   4: 21381.446 ns/op
# Warmup Iteration   5: 19273.736 ns/op
Iteration   1: 23362.399 ns/op
Iteration   2: 19738.289 ns/op
Iteration   3: 27105.317 ns/op
Iteration   4: 28550.299 ns/op
Iteration   5: 23218.622 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.flatMap":
  24394.985 ±(99.9%) 13442.473 ns/op [Average]
  (min, avg, max) = (19738.289, 24394.985, 28550.299), stdev = 3490.968
  CI (99.9%): [10952.512, 37837.458] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 10.00% complete, ETA 00:07:39
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2588.922 ns/op
# Warmup Iteration   2: 2190.977 ns/op
# Warmup Iteration   3: 2354.978 ns/op
# Warmup Iteration   4: 2356.176 ns/op
# Warmup Iteration   5: 2355.616 ns/op
Iteration   1: 2355.941 ns/op
Iteration   2: 2355.364 ns/op
Iteration   3: 2355.287 ns/op
Iteration   4: 2355.404 ns/op
Iteration   5: 2857.381 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foldLeft":
  2455.875 ±(99.9%) 864.271 ns/op [Average]
  (min, avg, max) = (2355.287, 2455.875, 2857.381), stdev = 224.449
  CI (99.9%): [1591.604, 3320.147] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:06:47
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2069.948 ns/op
# Warmup Iteration   2: 2420.817 ns/op
# Warmup Iteration   3: 1968.713 ns/op
# Warmup Iteration   4: 1968.827 ns/op
# Warmup Iteration   5: 1969.247 ns/op
Iteration   1: 1968.545 ns/op
Iteration   2: 1968.815 ns/op
Iteration   3: 1968.797 ns/op
Iteration   4: 1968.398 ns/op
Iteration   5: 1968.661 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.for_loop":
  1968.643 ±(99.9%) 0.675 ns/op [Average]
  (min, avg, max) = (1968.398, 1968.643, 1968.815), stdev = 0.175
  CI (99.9%): [1967.968, 1969.319] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 30.00% complete, ETA 00:05:56
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2173.036 ns/op
# Warmup Iteration   2: 2472.252 ns/op
# Warmup Iteration   3: 1968.692 ns/op
# Warmup Iteration   4: 1968.652 ns/op
# Warmup Iteration   5: 1968.739 ns/op
Iteration   1: 1968.268 ns/op
Iteration   2: 1968.311 ns/op
Iteration   3: 1968.717 ns/op
Iteration   4: 1968.595 ns/op
Iteration   5: 1968.563 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.foreach":
  1968.491 ±(99.9%) 0.743 ns/op [Average]
  (min, avg, max) = (1968.268, 1968.491, 1968.717), stdev = 0.193
  CI (99.9%): [1967.748, 1969.234] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:05:05
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1959.387 ns/op
# Warmup Iteration   2: 2110.536 ns/op
# Warmup Iteration   3: 1686.398 ns/op
# Warmup Iteration   4: 1686.800 ns/op
# Warmup Iteration   5: 1686.954 ns/op
Iteration   1: 1687.070 ns/op
Iteration   2: 1687.651 ns/op
Iteration   3: 1687.992 ns/op
Iteration   4: 1687.112 ns/op
Iteration   5: 1687.739 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.iterate":
  1687.513 ±(99.9%) 1.560 ns/op [Average]
  (min, avg, max) = (1687.070, 1687.513, 1687.992), stdev = 0.405
  CI (99.9%): [1685.953, 1689.072] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6517.434 ns/op
# Warmup Iteration   2: 5599.430 ns/op
# Warmup Iteration   3: 6458.218 ns/op
# Warmup Iteration   4: 6370.531 ns/op
# Warmup Iteration   5: 5225.826 ns/op
Iteration   1: 5213.012 ns/op
Iteration   2: 5228.547 ns/op
Iteration   3: 8039.333 ns/op
Iteration   4: 7376.636 ns/op
Iteration   5: 5515.280 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.map":
  6274.561 ±(99.9%) 5139.755 ns/op [Average]
  (min, avg, max) = (5213.012, 6274.561, 8039.333), stdev = 1334.778
  CI (99.9%): [1134.807, 11414.316] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4790.293 ns/op
# Warmup Iteration   2: 4385.940 ns/op
# Warmup Iteration   3: 5179.595 ns/op
# Warmup Iteration   4: 4251.143 ns/op
# Warmup Iteration   5: 4248.655 ns/op
Iteration   1: 4250.871 ns/op
Iteration   2: 4249.552 ns/op
Iteration   3: 4249.127 ns/op
Iteration   4: 4250.481 ns/op
Iteration   5: 4252.139 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.prepend":
  4250.434 ±(99.9%) 4.550 ns/op [Average]
  (min, avg, max) = (4249.127, 4250.434, 4252.139), stdev = 1.182
  CI (99.9%): [4245.884, 4254.984] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 70.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2457.231 ns/op
# Warmup Iteration   2: 2517.101 ns/op
# Warmup Iteration   3: 2518.686 ns/op
# Warmup Iteration   4: 2077.954 ns/op
# Warmup Iteration   5: 2078.569 ns/op
Iteration   1: 2078.447 ns/op
Iteration   2: 2080.424 ns/op
Iteration   3: 2078.357 ns/op
Iteration   4: 2079.014 ns/op
Iteration   5: 2078.644 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.read_size":
  2078.977 ±(99.9%) 3.263 ns/op [Average]
  (min, avg, max) = (2078.357, 2078.977, 2080.424), stdev = 0.847
  CI (99.9%): [2075.714, 2082.240] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3605.342 ns/op
# Warmup Iteration   2: 3340.892 ns/op
# Warmup Iteration   3: 4694.940 ns/op
# Warmup Iteration   4: 4511.033 ns/op
# Warmup Iteration   5: 3228.809 ns/op
Iteration   1: 5053.072 ns/op
Iteration   2: 4532.123 ns/op
Iteration   3: 3153.299 ns/op
Iteration   4: 3111.475 ns/op
Iteration   5: 3109.692 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.reverse":
  3791.932 ±(99.9%) 3588.896 ns/op [Average]
  (min, avg, max) = (3109.692, 3791.932, 5053.072), stdev = 932.025
  CI (99.9%): [203.036, 7380.828] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply
# Parameters: (size = 1000)

# Run progress: 90.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2913.335 ns/op
# Warmup Iteration   2: 3133.068 ns/op
# Warmup Iteration   3: 3140.501 ns/op
# Warmup Iteration   4: 2515.888 ns/op
# Warmup Iteration   5: 3138.258 ns/op
Iteration   1: 2515.727 ns/op
Iteration   2: 2516.090 ns/op
Iteration   3: 2515.410 ns/op
Iteration   4: 2515.615 ns/op
Iteration   5: 2515.820 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.ListBenchmark.unapply":
  2515.733 ±(99.9%) 0.969 ns/op [Average]
  (min, avg, max) = (2515.410, 2515.733, 2516.090), stdev = 0.252
  CI (99.9%): [2514.764, 2516.702] (assumes normal distribution)


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score       Error  Units
ListBenchmark.flatMap      1000  avgt    5  24394.985 ± 13442.473  ns/op
ListBenchmark.foldLeft     1000  avgt    5   2455.875 ±   864.271  ns/op
ListBenchmark.for_loop     1000  avgt    5   1968.643 ±     0.675  ns/op
ListBenchmark.foreach      1000  avgt    5   1968.491 ±     0.743  ns/op
ListBenchmark.iterate      1000  avgt    5   1687.513 ±     1.560  ns/op
ListBenchmark.map          1000  avgt    5   6274.561 ±  5139.755  ns/op
ListBenchmark.prepend      1000  avgt    5   4250.434 ±     4.550  ns/op
ListBenchmark.read_size    1000  avgt    5   2078.977 ±     3.263  ns/op
ListBenchmark.reverse      1000  avgt    5   3791.932 ±  3588.896  ns/op
ListBenchmark.unapply      1000  avgt    5   2515.733 ±     0.969  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ListBenchmark.scala.csv

Finished ListBenchmark benchmark (Thu Oct 16 03:59:32 PM UTC 2025)
Thu Oct 16 03:59:32 PM UTC 2025

Running SetBenchmark benchmark ...
Thu Oct 16 03:59:32 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:07:30
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 9981.352 ns/op
# Warmup Iteration   2: 9147.383 ns/op
# Warmup Iteration   3: 8958.567 ns/op
# Warmup Iteration   4: 8958.825 ns/op
# Warmup Iteration   5: 8958.827 ns/op
Iteration   1: 8957.460 ns/op
Iteration   2: 8958.109 ns/op
Iteration   3: 8960.129 ns/op
Iteration   4: 8958.629 ns/op
Iteration   5: 8956.357 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_few":
  8958.137 ±(99.9%) 5.390 ns/op [Average]
  (min, avg, max) = (8956.357, 8958.137, 8960.129), stdev = 1.400
  CI (99.9%): [8952.747, 8963.526] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many
# Parameters: (size = 1000)

# Run progress: 11.11% complete, ETA 00:06:47
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14145.171 ns/op
# Warmup Iteration   2: 12360.600 ns/op
# Warmup Iteration   3: 11920.626 ns/op
# Warmup Iteration   4: 11920.873 ns/op
# Warmup Iteration   5: 11920.613 ns/op
Iteration   1: 14385.351 ns/op
Iteration   2: 11920.867 ns/op
Iteration   3: 11920.514 ns/op
Iteration   4: 11920.255 ns/op
Iteration   5: 11920.824 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.contains_many":
  12413.562 ±(99.9%) 4244.424 ns/op [Average]
  (min, avg, max) = (11920.255, 12413.562, 14385.351), stdev = 1102.264
  CI (99.9%): [8169.138, 16657.987] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 22.22% complete, ETA 00:05:56
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 10341.486 ns/op
# Warmup Iteration   2: 9644.560 ns/op
# Warmup Iteration   3: 7629.516 ns/op
# Warmup Iteration   4: 7630.801 ns/op
# Warmup Iteration   5: 7627.943 ns/op
Iteration   1: 7629.228 ns/op
Iteration   2: 7620.105 ns/op
Iteration   3: 7617.837 ns/op
Iteration   4: 7622.808 ns/op
Iteration   5: 7621.566 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  7622.309 ±(99.9%) 16.510 ns/op [Average]
  (min, avg, max) = (7617.837, 7622.309, 7629.228), stdev = 4.287
  CI (99.9%): [7605.799, 7638.818] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:05:05
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 430.017 ns/op
# Warmup Iteration   2: 336.982 ns/op
# Warmup Iteration   3: 329.815 ns/op
# Warmup Iteration   4: 331.113 ns/op
# Warmup Iteration   5: 331.979 ns/op
Iteration   1: 332.763 ns/op
Iteration   2: 330.199 ns/op
Iteration   3: 392.441 ns/op
Iteration   4: 329.776 ns/op
Iteration   5: 330.152 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foldLeft":
  343.067 ±(99.9%) 106.381 ns/op [Average]
  (min, avg, max) = (329.776, 343.067, 392.441), stdev = 27.627
  CI (99.9%): [236.685, 449.448] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 44.44% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 415.066 ns/op
# Warmup Iteration   2: 294.164 ns/op
# Warmup Iteration   3: 287.764 ns/op
# Warmup Iteration   4: 285.962 ns/op
# Warmup Iteration   5: 285.961 ns/op
Iteration   1: 285.955 ns/op
Iteration   2: 285.956 ns/op
Iteration   3: 341.997 ns/op
Iteration   4: 286.031 ns/op
Iteration   5: 286.014 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.for_loop":
  297.191 ±(99.9%) 96.450 ns/op [Average]
  (min, avg, max) = (285.955, 297.191, 341.997), stdev = 25.048
  CI (99.9%): [200.741, 393.640] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 55.56% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 312.888 ns/op
# Warmup Iteration   2: 293.838 ns/op
# Warmup Iteration   3: 351.372 ns/op
# Warmup Iteration   4: 286.994 ns/op
# Warmup Iteration   5: 286.988 ns/op
Iteration   1: 286.988 ns/op
Iteration   2: 286.989 ns/op
Iteration   3: 287.374 ns/op
Iteration   4: 287.413 ns/op
Iteration   5: 287.419 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.foreach":
  287.237 ±(99.9%) 0.875 ns/op [Average]
  (min, avg, max) = (286.988, 287.237, 287.419), stdev = 0.227
  CI (99.9%): [286.362, 288.111] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 444.867 ns/op
# Warmup Iteration   2: 331.731 ns/op
# Warmup Iteration   3: 409.875 ns/op
# Warmup Iteration   4: 332.184 ns/op
# Warmup Iteration   5: 332.002 ns/op
Iteration   1: 332.191 ns/op
Iteration   2: 332.189 ns/op
Iteration   3: 332.041 ns/op
Iteration   4: 332.507 ns/op
Iteration   5: 332.488 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.iterate":
  332.283 ±(99.9%) 0.789 ns/op [Average]
  (min, avg, max) = (332.041, 332.283, 332.507), stdev = 0.205
  CI (99.9%): [331.494, 333.072] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map
# Parameters: (size = 1000)

# Run progress: 77.78% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5267.376 ns/op
# Warmup Iteration   2: 5296.140 ns/op
# Warmup Iteration   3: 4120.273 ns/op
# Warmup Iteration   4: 3950.974 ns/op
# Warmup Iteration   5: 4110.426 ns/op
Iteration   1: 3315.113 ns/op
Iteration   2: 3314.622 ns/op
Iteration   3: 3313.745 ns/op
Iteration   4: 3314.857 ns/op
Iteration   5: 3315.622 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.map":
  3314.792 ±(99.9%) 2.669 ns/op [Average]
  (min, avg, max) = (3313.745, 3314.792, 3315.622), stdev = 0.693
  CI (99.9%): [3312.123, 3317.460] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 88.89% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.960 ns/op
# Warmup Iteration   2: 1.432 ns/op
# Warmup Iteration   3: 1.430 ns/op
# Warmup Iteration   4: 1.147 ns/op
# Warmup Iteration   5: 1.147 ns/op
Iteration   1: 1.147 ns/op
Iteration   2: 1.147 ns/op
Iteration   3: 1.147 ns/op
Iteration   4: 1.147 ns/op
Iteration   5: 1.147 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.read_size":
  1.147 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.147, 1.147, 1.147), stdev = 0.001
  CI (99.9%): [1.147, 1.147] (assumes normal distribution)


# Run complete. Total time: 00:07:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt      Score      Error  Units
SetBenchmark.contains_few     1000  avgt    5   8958.137 ±    5.390  ns/op
SetBenchmark.contains_many    1000  avgt    5  12413.562 ± 4244.424  ns/op
SetBenchmark.flatMap          1000  avgt    5   7622.309 ±   16.510  ns/op
SetBenchmark.foldLeft         1000  avgt    5    343.067 ±  106.381  ns/op
SetBenchmark.for_loop         1000  avgt    5    297.191 ±   96.450  ns/op
SetBenchmark.foreach          1000  avgt    5    287.237 ±    0.875  ns/op
SetBenchmark.iterate          1000  avgt    5    332.283 ±    0.789  ns/op
SetBenchmark.map              1000  avgt    5   3314.792 ±    2.669  ns/op
SetBenchmark.read_size        1000  avgt    5      1.147 ±    0.001  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Thu Oct 16 04:07:12 PM UTC 2025)
Thu Oct 16 04:07:12 PM UTC 2025

Running SetAddBenchmark benchmark ...
Thu Oct 16 04:07:12 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetAddBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/SetAddBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6481.927 ns/op
# Warmup Iteration   2: 5339.909 ns/op
# Warmup Iteration   3: 5595.474 ns/op
# Warmup Iteration   4: 5594.346 ns/op
# Warmup Iteration   5: 5593.376 ns/op
Iteration   1: 5591.800 ns/op
Iteration   2: 5584.578 ns/op
Iteration   3: 5592.560 ns/op
Iteration   4: 5599.061 ns/op
Iteration   5: 5598.136 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_10":
  5593.227 ±(99.9%) 22.404 ns/op [Average]
  (min, avg, max) = (5584.578, 5593.227, 5599.061), stdev = 5.818
  CI (99.9%): [5570.822, 5615.631] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 23428.892 ns/op
# Warmup Iteration   2: 16370.932 ns/op
# Warmup Iteration   3: 16224.378 ns/op
# Warmup Iteration   4: 16230.829 ns/op
# Warmup Iteration   5: 16225.980 ns/op
Iteration   1: 16209.516 ns/op
Iteration   2: 16209.296 ns/op
Iteration   3: 16210.977 ns/op
Iteration   4: 16207.143 ns/op
Iteration   5: 16209.712 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetAddBenchmark.add_100":
  16209.329 ±(99.9%) 5.334 ns/op [Average]
  (min, avg, max) = (16207.143, 16209.329, 16210.977), stdev = 1.385
  CI (99.9%): [16203.994, 16214.663] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score    Error  Units
SetAddBenchmark.add_10     1000  avgt    5   5593.227 ± 22.404  ns/op
SetAddBenchmark.add_100    1000  avgt    5  16209.329 ±  5.334  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/SetAddBenchmark.scala.csv

Finished SetAddBenchmark benchmark (Thu Oct 16 04:08:54 PM UTC 2025)
Thu Oct 16 04:08:54 PM UTC 2025

Running VectorBenchmark benchmark ...
Thu Oct 16 04:08:55 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16414.915 ns/op
# Warmup Iteration   2: 14651.864 ns/op
# Warmup Iteration   3: 14362.857 ns/op
# Warmup Iteration   4: 14358.968 ns/op
# Warmup Iteration   5: 17783.075 ns/op
Iteration   1: 14528.007 ns/op
Iteration   2: 14487.777 ns/op
Iteration   3: 18513.644 ns/op
Iteration   4: 25769.980 ns/op
Iteration   5: 30192.670 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.append":
  20698.416 ±(99.9%) 27042.436 ns/op [Average]
  (min, avg, max) = (14487.777, 20698.416, 30192.670), stdev = 7022.835
  CI (99.9%): [≈ 0, 47740.852] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 9.09% complete, ETA 00:08:30
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 26560.257 ns/op
# Warmup Iteration   2: 21884.490 ns/op
# Warmup Iteration   3: 21828.810 ns/op
# Warmup Iteration   4: 21808.145 ns/op
# Warmup Iteration   5: 21815.298 ns/op
Iteration   1: 21810.363 ns/op
Iteration   2: 21826.032 ns/op
Iteration   3: 21811.224 ns/op
Iteration   4: 26722.520 ns/op
Iteration   5: 21808.762 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  22795.780 ±(99.9%) 8452.646 ns/op [Average]
  (min, avg, max) = (21808.762, 22795.780, 26722.520), stdev = 2195.125
  CI (99.9%): [14343.134, 31248.426] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft
# Parameters: (size = 1000)

# Run progress: 18.18% complete, ETA 00:07:39
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2093.756 ns/op
# Warmup Iteration   2: 1881.577 ns/op
# Warmup Iteration   3: 1740.186 ns/op
# Warmup Iteration   4: 1736.448 ns/op
# Warmup Iteration   5: 1738.175 ns/op
Iteration   1: 1738.032 ns/op
Iteration   2: 1736.430 ns/op
Iteration   3: 1739.487 ns/op
Iteration   4: 1737.757 ns/op
Iteration   5: 1738.500 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foldLeft":
  1738.041 ±(99.9%) 4.295 ns/op [Average]
  (min, avg, max) = (1736.430, 1738.041, 1739.487), stdev = 1.115
  CI (99.9%): [1733.746, 1742.336] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop
# Parameters: (size = 1000)

# Run progress: 27.27% complete, ETA 00:06:47
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1042.295 ns/op
# Warmup Iteration   2: 991.517 ns/op
# Warmup Iteration   3: 987.452 ns/op
# Warmup Iteration   4: 986.944 ns/op
# Warmup Iteration   5: 987.733 ns/op
Iteration   1: 987.689 ns/op
Iteration   2: 986.887 ns/op
Iteration   3: 987.673 ns/op
Iteration   4: 987.646 ns/op
Iteration   5: 986.724 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.for_loop":
  987.324 ±(99.9%) 1.837 ns/op [Average]
  (min, avg, max) = (986.724, 987.324, 987.689), stdev = 0.477
  CI (99.9%): [985.486, 989.161] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach
# Parameters: (size = 1000)

# Run progress: 36.36% complete, ETA 00:05:55
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1208.092 ns/op
# Warmup Iteration   2: 1179.969 ns/op
# Warmup Iteration   3: 1166.813 ns/op
# Warmup Iteration   4: 975.144 ns/op
# Warmup Iteration   5: 975.080 ns/op
Iteration   1: 975.276 ns/op
Iteration   2: 975.260 ns/op
Iteration   3: 976.171 ns/op
Iteration   4: 975.771 ns/op
Iteration   5: 975.404 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.foreach":
  975.576 ±(99.9%) 1.506 ns/op [Average]
  (min, avg, max) = (975.260, 975.576, 976.171), stdev = 0.391
  CI (99.9%): [974.070, 977.082] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate
# Parameters: (size = 1000)

# Run progress: 45.45% complete, ETA 00:05:05
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1137.829 ns/op
# Warmup Iteration   2: 1112.402 ns/op
# Warmup Iteration   3: 1101.894 ns/op
# Warmup Iteration   4: 1101.739 ns/op
# Warmup Iteration   5: 1101.789 ns/op
Iteration   1: 1101.728 ns/op
Iteration   2: 1101.902 ns/op
Iteration   3: 1101.822 ns/op
Iteration   4: 1101.778 ns/op
Iteration   5: 1101.805 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.iterate":
  1101.807 ±(99.9%) 0.247 ns/op [Average]
  (min, avg, max) = (1101.728, 1101.807, 1101.902), stdev = 0.064
  CI (99.9%): [1101.560, 1102.054] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map
# Parameters: (size = 1000)

# Run progress: 54.55% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3998.889 ns/op
# Warmup Iteration   2: 3466.590 ns/op
# Warmup Iteration   3: 4860.198 ns/op
# Warmup Iteration   4: 3453.361 ns/op
# Warmup Iteration   5: 3444.854 ns/op
Iteration   1: 3445.463 ns/op
Iteration   2: 4178.570 ns/op
Iteration   3: 4128.020 ns/op
Iteration   4: 3445.063 ns/op
Iteration   5: 3446.219 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.map":
  3728.667 ±(99.9%) 1494.214 ns/op [Average]
  (min, avg, max) = (3445.063, 3728.667, 4178.570), stdev = 388.043
  CI (99.9%): [2234.453, 5222.881] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access
# Parameters: (size = 1000)

# Run progress: 63.64% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5846.050 ns/op
# Warmup Iteration   2: 5819.640 ns/op
# Warmup Iteration   3: 5035.344 ns/op
# Warmup Iteration   4: 5035.738 ns/op
# Warmup Iteration   5: 5035.921 ns/op
Iteration   1: 5035.670 ns/op
Iteration   2: 5037.144 ns/op
Iteration   3: 5036.195 ns/op
Iteration   4: 5035.335 ns/op
Iteration   5: 5035.709 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.random_access":
  5036.011 ±(99.9%) 2.712 ns/op [Average]
  (min, avg, max) = (5035.335, 5036.011, 5037.144), stdev = 0.704
  CI (99.9%): [5033.299, 5038.722] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size
# Parameters: (size = 1000)

# Run progress: 72.73% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.960 ns/op
# Warmup Iteration   2: 0.900 ns/op
# Warmup Iteration   3: 0.898 ns/op
# Warmup Iteration   4: 0.901 ns/op
# Warmup Iteration   5: 0.898 ns/op
Iteration   1: 0.898 ns/op
Iteration   2: 0.898 ns/op
Iteration   3: 0.898 ns/op
Iteration   4: 0.898 ns/op
Iteration   5: 0.898 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.read_size":
  0.898 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.898, 0.898, 0.898), stdev = 0.001
  CI (99.9%): [0.898, 0.898] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse
# Parameters: (size = 1000)

# Run progress: 81.82% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5902.673 ns/op
# Warmup Iteration   2: 5788.694 ns/op
# Warmup Iteration   3: 4603.011 ns/op
# Warmup Iteration   4: 4604.002 ns/op
# Warmup Iteration   5: 4601.601 ns/op
Iteration   1: 4601.396 ns/op
Iteration   2: 4604.276 ns/op
Iteration   3: 4620.434 ns/op
Iteration   4: 4620.669 ns/op
Iteration   5: 4619.804 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.reverse":
  4613.316 ±(99.9%) 37.067 ns/op [Average]
  (min, avg, max) = (4601.396, 4613.316, 4620.669), stdev = 9.626
  CI (99.9%): [4576.249, 4650.382] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access
# Parameters: (size = 1000)

# Run progress: 90.91% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1888.850 ns/op
# Warmup Iteration   2: 1735.806 ns/op
# Warmup Iteration   3: 1903.741 ns/op
# Warmup Iteration   4: 1903.608 ns/op
# Warmup Iteration   5: 1904.287 ns/op
Iteration   1: 1903.995 ns/op
Iteration   2: 1904.134 ns/op
Iteration   3: 1904.063 ns/op
Iteration   4: 2379.398 ns/op
Iteration   5: 1903.450 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.sequential_access":
  1999.008 ±(99.9%) 818.819 ns/op [Average]
  (min, avg, max) = (1903.450, 1999.008, 2379.398), stdev = 212.645
  CI (99.9%): [1180.189, 2817.827] (assumes normal distribution)


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (size)  Mode  Cnt      Score       Error  Units
VectorBenchmark.append               1000  avgt    5  20698.416 ± 27042.436  ns/op
VectorBenchmark.flatMap              1000  avgt    5  22795.780 ±  8452.646  ns/op
VectorBenchmark.foldLeft             1000  avgt    5   1738.041 ±     4.295  ns/op
VectorBenchmark.for_loop             1000  avgt    5    987.324 ±     1.837  ns/op
VectorBenchmark.foreach              1000  avgt    5    975.576 ±     1.506  ns/op
VectorBenchmark.iterate              1000  avgt    5   1101.807 ±     0.247  ns/op
VectorBenchmark.map                  1000  avgt    5   3728.667 ±  1494.214  ns/op
VectorBenchmark.random_access        1000  avgt    5   5036.011 ±     2.712  ns/op
VectorBenchmark.read_size            1000  avgt    5      0.898 ±     0.001  ns/op
VectorBenchmark.reverse              1000  avgt    5   4613.316 ±    37.067  ns/op
VectorBenchmark.sequential_access    1000  avgt    5   1999.008 ±   818.819  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Thu Oct 16 04:18:15 PM UTC 2025)
Thu Oct 16 04:18:15 PM UTC 2025

Running FutureBenchmark benchmark ...
Thu Oct 16 04:18:15 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FutureBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/FutureBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 24.046 us/op
# Warmup Iteration   2: 20.963 us/op
# Warmup Iteration   3: 21.358 us/op
# Warmup Iteration   4: 16.237 us/op
# Warmup Iteration   5: 18.429 us/op
Iteration   1: 18.991 us/op
Iteration   2: 19.492 us/op
Iteration   3: 16.929 us/op
Iteration   4: 21.577 us/op
Iteration   5: 22.416 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  19.881 ±(99.9%) 8.383 us/op [Average]
  (min, avg, max) = (16.929, 19.881, 22.416), stdev = 2.177
  CI (99.9%): [11.498, 28.264] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future
# Parameters: (computationSize = 10000)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 47.067 us/op
# Warmup Iteration   2: 39.937 us/op
# Warmup Iteration   3: 32.654 us/op
# Warmup Iteration   4: 33.782 us/op
# Warmup Iteration   5: 37.421 us/op
Iteration   1: 46.753 us/op
Iteration   2: 37.378 us/op
Iteration   3: 39.815 us/op
Iteration   4: 40.474 us/op
Iteration   5: 35.788 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_future":
  40.042 ±(99.9%) 16.161 us/op [Average]
  (min, avg, max) = (35.788, 40.042, 46.753), stdev = 4.197
  CI (99.9%): [23.880, 56.203] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 1000)

# Run progress: 50.00% complete, ETA 00:01:42
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.542 us/op
# Warmup Iteration   2: 1.362 us/op
# Warmup Iteration   3: 1.364 us/op
# Warmup Iteration   4: 1.360 us/op
# Warmup Iteration   5: 1.364 us/op
Iteration   1: 1.364 us/op
Iteration   2: 1.365 us/op
Iteration   3: 1.365 us/op
Iteration   4: 1.365 us/op
Iteration   5: 1.360 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  1.364 ±(99.9%) 0.009 us/op [Average]
  (min, avg, max) = (1.360, 1.364, 1.365), stdev = 0.002
  CI (99.9%): [1.355, 1.372] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future
# Parameters: (computationSize = 10000)

# Run progress: 75.00% complete, ETA 00:00:51
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.199 us/op
# Warmup Iteration   2: 13.801 us/op
# Warmup Iteration   3: 13.937 us/op
# Warmup Iteration   4: 13.946 us/op
# Warmup Iteration   5: 13.945 us/op
Iteration   1: 13.971 us/op
Iteration   2: 13.945 us/op
Iteration   3: 13.942 us/op
Iteration   4: 13.952 us/op
Iteration   5: 13.936 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.concurrent.FutureBenchmark.run_no_future":
  13.949 ±(99.9%) 0.052 us/op [Average]
  (min, avg, max) = (13.936, 13.949, 13.971), stdev = 0.013
  CI (99.9%): [13.898, 14.001] (assumes normal distribution)


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                      (computationSize)  Mode  Cnt   Score    Error  Units
FutureBenchmark.run_future                  1000  avgt    5  19.881 ±  8.383  us/op
FutureBenchmark.run_future                 10000  avgt    5  40.042 ± 16.161  us/op
FutureBenchmark.run_no_future               1000  avgt    5   1.364 ±  0.009  us/op
FutureBenchmark.run_no_future              10000  avgt    5  13.949 ±  0.052  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/FutureBenchmark.scala.csv

Finished FutureBenchmark benchmark (Thu Oct 16 04:21:40 PM UTC 2025)
Thu Oct 16 04:21:40 PM UTC 2025

Running ScalaRandomBenchmark benchmark ...
Thu Oct 16 04:21:40 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ScalaRandomBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ScalaRandomBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.158 ns/op
# Warmup Iteration   2: 10.336 ns/op
# Warmup Iteration   3: 10.324 ns/op
# Warmup Iteration   4: 10.322 ns/op
# Warmup Iteration   5: 10.321 ns/op
Iteration   1: 10.321 ns/op
Iteration   2: 10.323 ns/op
Iteration   3: 10.321 ns/op
Iteration   4: 10.322 ns/op
Iteration   5: 10.324 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_boolean":
  10.322 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (10.321, 10.322, 10.324), stdev = 0.001
  CI (99.9%): [10.318, 10.326] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double

# Run progress: 16.67% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 23.191 ns/op
# Warmup Iteration   2: 20.645 ns/op
# Warmup Iteration   3: 20.633 ns/op
# Warmup Iteration   4: 20.632 ns/op
# Warmup Iteration   5: 20.632 ns/op
Iteration   1: 20.632 ns/op
Iteration   2: 20.637 ns/op
Iteration   3: 20.637 ns/op
Iteration   4: 20.637 ns/op
Iteration   5: 20.637 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_double":
  20.636 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (20.632, 20.636, 20.637), stdev = 0.002
  CI (99.9%): [20.628, 20.645] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float

# Run progress: 33.33% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.793 ns/op
# Warmup Iteration   2: 10.323 ns/op
# Warmup Iteration   3: 10.311 ns/op
# Warmup Iteration   4: 10.311 ns/op
# Warmup Iteration   5: 10.311 ns/op
Iteration   1: 10.311 ns/op
Iteration   2: 10.311 ns/op
Iteration   3: 10.311 ns/op
Iteration   4: 10.311 ns/op
Iteration   5: 10.311 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_float":
  10.311 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (10.311, 10.311, 10.311), stdev = 0.001
  CI (99.9%): [10.310, 10.312] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 81.646 ns/op
# Warmup Iteration   2: 65.705 ns/op
# Warmup Iteration   3: 65.312 ns/op
# Warmup Iteration   4: 65.313 ns/op
# Warmup Iteration   5: 65.310 ns/op
Iteration   1: 71.678 ns/op
Iteration   2: 80.927 ns/op
Iteration   3: 65.315 ns/op
Iteration   4: 80.902 ns/op
Iteration   5: 65.306 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_gaussian":
  72.825 ±(99.9%) 30.145 ns/op [Average]
  (min, avg, max) = (65.306, 72.825, 80.927), stdev = 7.829
  CI (99.9%): [42.681, 102.970] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.342 ns/op
# Warmup Iteration   2: 12.308 ns/op
# Warmup Iteration   3: 12.299 ns/op
# Warmup Iteration   4: 10.317 ns/op
# Warmup Iteration   5: 10.317 ns/op
Iteration   1: 10.317 ns/op
Iteration   2: 10.317 ns/op
Iteration   3: 10.317 ns/op
Iteration   4: 10.317 ns/op
Iteration   5: 12.284 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_int":
  10.711 ±(99.9%) 3.387 ns/op [Average]
  (min, avg, max) = (10.317, 10.711, 12.284), stdev = 0.880
  CI (99.9%): [7.323, 14.098] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 21.022 ns/op
# Warmup Iteration   2: 20.926 ns/op
# Warmup Iteration   3: 20.926 ns/op
# Warmup Iteration   4: 20.927 ns/op
# Warmup Iteration   5: 20.926 ns/op
Iteration   1: 20.926 ns/op
Iteration   2: 20.927 ns/op
Iteration   3: 20.926 ns/op
Iteration   4: 20.926 ns/op
Iteration   5: 25.604 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.random.ScalaRandomBenchmark.next_long":
  21.862 ±(99.9%) 8.055 ns/op [Average]
  (min, avg, max) = (20.926, 21.862, 25.604), stdev = 2.092
  CI (99.9%): [13.807, 29.916] (assumes normal distribution)


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt   Score    Error  Units
ScalaRandomBenchmark.next_boolean   avgt    5  10.322 ±  0.004  ns/op
ScalaRandomBenchmark.next_double    avgt    5  20.636 ±  0.009  ns/op
ScalaRandomBenchmark.next_float     avgt    5  10.311 ±  0.001  ns/op
ScalaRandomBenchmark.next_gaussian  avgt    5  72.825 ± 30.145  ns/op
ScalaRandomBenchmark.next_int       avgt    5  10.711 ±  3.387  ns/op
ScalaRandomBenchmark.next_long      avgt    5  21.862 ±  8.055  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ScalaRandomBenchmark.scala.csv

Finished ScalaRandomBenchmark benchmark (Thu Oct 16 04:26:45 PM UTC 2025)
Thu Oct 16 04:26:45 PM UTC 2025

Running StringConcatenationBenchmark benchmark ...
Thu Oct 16 04:26:46 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringConcatenationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/StringConcatenationBenchmark.scala.csv -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 293.882 ns/op
# Warmup Iteration   2: 260.877 ns/op
# Warmup Iteration   3: 235.548 ns/op
# Warmup Iteration   4: 289.545 ns/op
# Warmup Iteration   5: 290.069 ns/op
Iteration   1: 235.345 ns/op
                 gc.alloc.rate:      3306.479 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   2: 235.400 ns/op
                 gc.alloc.rate:      3305.704 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   3: 235.382 ns/op
                 gc.alloc.rate:      3305.940 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   4: 235.379 ns/op
                 gc.alloc.rate:      3306.014 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   5: 235.288 ns/op
                 gc.alloc.rate:      3307.259 MB/sec
                 gc.alloc.rate.norm: 816.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  235.359 ±(99.9%) 0.170 ns/op [Average]
  (min, avg, max) = (235.288, 235.359, 235.400), stdev = 0.044
  CI (99.9%): [235.189, 235.529] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  3306.279 ±(99.9%) 2.370 MB/sec [Average]
  (min, avg, max) = (3305.704, 3306.279, 3307.259), stdev = 0.615
  CI (99.9%): [3303.909, 3308.649] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  816.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
  CI (99.9%): [816.000, 816.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  46.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer
# Parameters: (coder = UTF16, length = 128)

# Run progress: 8.33% complete, ETA 00:09:18
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 461.686 ns/op
# Warmup Iteration   2: 358.996 ns/op
# Warmup Iteration   3: 271.213 ns/op
# Warmup Iteration   4: 271.224 ns/op
# Warmup Iteration   5: 278.609 ns/op
Iteration   1: 318.547 ns/op
                 gc.alloc.rate:      4191.093 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            12.000 ms

Iteration   2: 270.759 ns/op
                 gc.alloc.rate:      4930.893 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            15.000 ms

Iteration   3: 391.255 ns/op
                 gc.alloc.rate:      3412.200 MB/sec
                 gc.alloc.rate.norm: 1400.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            11.000 ms

Iteration   4: 305.297 ns/op
                 gc.alloc.rate:      4373.006 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            14.000 ms

Iteration   5: 286.480 ns/op
                 gc.alloc.rate:      4660.204 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer":
  314.468 ±(99.9%) 179.487 ns/op [Average]
  (min, avg, max) = (270.759, 314.468, 391.255), stdev = 46.612
  CI (99.9%): [134.980, 493.955] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate":
  4313.479 ±(99.9%) 2222.261 MB/sec [Average]
  (min, avg, max) = (3412.200, 4313.479, 4930.893), stdev = 577.114
  CI (99.9%): [2091.218, 6535.740] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm":
  1400.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1400.000, 1400.000, 1400.001), stdev = 0.001
  CI (99.9%): [1400.000, 1400.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.count":
  44.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.304
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_buffer:gc.time":
  66.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 13.200, 15.000), stdev = 1.643
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 16.67% complete, ETA 00:08:28
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 326.197 ns/op
# Warmup Iteration   2: 251.212 ns/op
# Warmup Iteration   3: 242.625 ns/op
# Warmup Iteration   4: 315.163 ns/op
# Warmup Iteration   5: 241.973 ns/op
Iteration   1: 240.982 ns/op
                 gc.alloc.rate:      3134.156 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   2: 293.342 ns/op
                 gc.alloc.rate:      2574.684 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           5.000 counts
                 gc.time:            8.000 ms

Iteration   3: 241.882 ns/op
                 gc.alloc.rate:      3122.466 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms

Iteration   4: 241.165 ns/op
                 gc.alloc.rate:      3131.785 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   5: 241.142 ns/op
                 gc.alloc.rate:      3132.036 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  251.703 ±(99.9%) 89.642 ns/op [Average]
  (min, avg, max) = (240.982, 251.703, 293.342), stdev = 23.280
  CI (99.9%): [162.061, 341.345] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  3019.025 ±(99.9%) 956.635 MB/sec [Average]
  (min, avg, max) = (2574.684, 3019.025, 3134.156), stdev = 248.435
  CI (99.9%): [2062.390, 3975.661] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  792.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
  CI (99.9%): [792.000, 792.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 25.00% complete, ETA 00:07:37
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 361.417 ns/op
# Warmup Iteration   2: 285.766 ns/op
# Warmup Iteration   3: 272.361 ns/op
# Warmup Iteration   4: 272.573 ns/op
# Warmup Iteration   5: 272.591 ns/op
Iteration   1: 272.623 ns/op
                 gc.alloc.rate:      4897.184 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   2: 274.737 ns/op
                 gc.alloc.rate:      4859.503 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            15.000 ms

Iteration   3: 419.036 ns/op
                 gc.alloc.rate:      3185.970 MB/sec
                 gc.alloc.rate.norm: 1400.001 B/op
                 gc.count:           6.000 counts
                 gc.time:            10.000 ms

Iteration   4: 274.522 ns/op
                 gc.alloc.rate:      4863.293 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   5: 279.013 ns/op
                 gc.alloc.rate:      4784.913 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder":
  303.986 ±(99.9%) 247.817 ns/op [Average]
  (min, avg, max) = (272.623, 303.986, 419.036), stdev = 64.357
  CI (99.9%): [56.169, 551.803] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate":
  4518.173 ±(99.9%) 2872.009 MB/sec [Average]
  (min, avg, max) = (3185.970, 4518.173, 4897.184), stdev = 745.852
  CI (99.9%): [1646.163, 7390.182] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm":
  1400.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1400.000, 1400.000, 1400.001), stdev = 0.001
  CI (99.9%): [1400.000, 1400.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 9.200, 10.000), stdev = 1.789
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.java_string_builder:gc.time":
  67.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 13.400, 15.000), stdev = 1.949
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 33.33% complete, ETA 00:06:46
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 296.466 ns/op
# Warmup Iteration   2: 375.385 ns/op
# Warmup Iteration   3: 244.623 ns/op
# Warmup Iteration   4: 243.990 ns/op
# Warmup Iteration   5: 244.078 ns/op
Iteration   1: 243.970 ns/op
                 gc.alloc.rate:      3033.232 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   2: 244.021 ns/op
                 gc.alloc.rate:      3032.598 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   3: 244.023 ns/op
                 gc.alloc.rate:      3032.551 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   4: 243.982 ns/op
                 gc.alloc.rate:      3033.083 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 287.641 ns/op
                 gc.alloc.rate:      2572.647 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  252.728 ±(99.9%) 75.155 ns/op [Average]
  (min, avg, max) = (243.970, 252.728, 287.641), stdev = 19.517
  CI (99.9%): [177.573, 327.882] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  2940.822 ±(99.9%) 792.526 MB/sec [Average]
  (min, avg, max) = (2572.647, 2940.822, 3033.232), stdev = 205.816
  CI (99.9%): [2148.297, 3733.348] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  776.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
  CI (99.9%): [776.000, 776.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  42.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator
# Parameters: (coder = UTF16, length = 128)

# Run progress: 41.67% complete, ETA 00:05:55
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 442.240 ns/op
# Warmup Iteration   2: 288.167 ns/op
# Warmup Iteration   3: 268.933 ns/op
# Warmup Iteration   4: 268.897 ns/op
# Warmup Iteration   5: 325.713 ns/op
Iteration   1: 271.187 ns/op
                 gc.alloc.rate:      4866.829 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   2: 329.158 ns/op
                 gc.alloc.rate:      4009.641 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            12.000 ms

Iteration   3: 268.912 ns/op
                 gc.alloc.rate:      4908.003 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   4: 268.967 ns/op
                 gc.alloc.rate:      4907.027 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   5: 268.922 ns/op
                 gc.alloc.rate:      4907.802 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator":
  281.429 ±(99.9%) 102.809 ns/op [Average]
  (min, avg, max) = (268.912, 281.429, 329.158), stdev = 26.699
  CI (99.9%): [178.620, 384.238] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate":
  4719.860 ±(99.9%) 1530.312 MB/sec [Average]
  (min, avg, max) = (4009.641, 4719.860, 4908.003), stdev = 397.417
  CI (99.9%): [3189.548, 6250.173] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm":
  1384.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1384.000, 1384.000, 1384.000), stdev = 0.001
  CI (99.9%): [1384.000, 1384.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.count":
  48.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 9.600, 10.000), stdev = 0.894
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.plus_operator:gc.time":
  68.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.600, 14.000), stdev = 0.894
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 50.00% complete, ETA 00:05:04
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 342.206 ns/op
# Warmup Iteration   2: 382.141 ns/op
# Warmup Iteration   3: 245.361 ns/op
# Warmup Iteration   4: 239.327 ns/op
# Warmup Iteration   5: 240.322 ns/op
Iteration   1: 239.434 ns/op
                 gc.alloc.rate:      3154.415 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   2: 239.517 ns/op
                 gc.alloc.rate:      3153.316 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            10.000 ms

Iteration   3: 240.243 ns/op
                 gc.alloc.rate:      3143.770 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            10.000 ms

Iteration   4: 239.423 ns/op
                 gc.alloc.rate:      3154.571 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 239.520 ns/op
                 gc.alloc.rate:      3153.266 MB/sec
                 gc.alloc.rate.norm: 792.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            9.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  239.627 ±(99.9%) 1.336 ns/op [Average]
  (min, avg, max) = (239.423, 239.627, 240.243), stdev = 0.347
  CI (99.9%): [238.291, 240.964] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  3151.868 ±(99.9%) 17.585 MB/sec [Average]
  (min, avg, max) = (3143.770, 3151.868, 3154.571), stdev = 4.567
  CI (99.9%): [3134.283, 3169.452] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  792.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
  CI (99.9%): [792.000, 792.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.000, 10.000), stdev = 1.000
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder
# Parameters: (coder = UTF16, length = 128)

# Run progress: 58.33% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 359.906 ns/op
# Warmup Iteration   2: 283.427 ns/op
# Warmup Iteration   3: 269.011 ns/op
# Warmup Iteration   4: 310.021 ns/op
# Warmup Iteration   5: 268.573 ns/op
Iteration   1: 320.626 ns/op
                 gc.alloc.rate:      4163.917 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           9.000 counts
                 gc.time:            13.000 ms

Iteration   2: 268.678 ns/op
                 gc.alloc.rate:      4969.081 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   3: 268.667 ns/op
                 gc.alloc.rate:      4969.279 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   4: 268.713 ns/op
                 gc.alloc.rate:      4968.457 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   5: 268.657 ns/op
                 gc.alloc.rate:      4969.427 MB/sec
                 gc.alloc.rate.norm: 1400.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            13.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder":
  279.068 ±(99.9%) 89.457 ns/op [Average]
  (min, avg, max) = (268.657, 279.068, 320.626), stdev = 23.232
  CI (99.9%): [189.611, 368.525] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate":
  4808.032 ±(99.9%) 1386.507 MB/sec [Average]
  (min, avg, max) = (4163.917, 4808.032, 4969.427), stdev = 360.071
  CI (99.9%): [3421.526, 6194.539] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm":
  1400.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1400.000, 1400.000, 1400.000), stdev = 0.001
  CI (99.9%): [1400.000, 1400.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.count":
  49.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
  CI (99.9%): [49.000, 49.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_builder:gc.time":
  68.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (13.000, 13.600, 14.000), stdev = 0.548
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 66.67% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 363.366 ns/op
# Warmup Iteration   2: 367.345 ns/op
# Warmup Iteration   3: 306.910 ns/op
# Warmup Iteration   4: 284.334 ns/op
# Warmup Iteration   5: 286.905 ns/op
Iteration   1: 284.286 ns/op
                 gc.alloc.rate:      6118.553 MB/sec
                 gc.alloc.rate.norm: 1824.000 B/op
                 gc.count:           12.000 counts
                 gc.time:            16.000 ms

Iteration   2: 286.645 ns/op
                 gc.alloc.rate:      6068.198 MB/sec
                 gc.alloc.rate.norm: 1824.000 B/op
                 gc.count:           13.000 counts
                 gc.time:            19.000 ms

Iteration   3: 284.276 ns/op
                 gc.alloc.rate:      6118.734 MB/sec
                 gc.alloc.rate.norm: 1824.000 B/op
                 gc.count:           12.000 counts
                 gc.time:            16.000 ms

Iteration   4: 284.426 ns/op
                 gc.alloc.rate:      6115.561 MB/sec
                 gc.alloc.rate.norm: 1824.000 B/op
                 gc.count:           13.000 counts
                 gc.time:            18.000 ms

Iteration   5: 328.275 ns/op
                 gc.alloc.rate:      5298.585 MB/sec
                 gc.alloc.rate.norm: 1824.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  293.582 ±(99.9%) 74.781 ns/op [Average]
  (min, avg, max) = (284.276, 293.582, 328.275), stdev = 19.420
  CI (99.9%): [218.801, 368.362] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  5943.926 ±(99.9%) 1391.595 MB/sec [Average]
  (min, avg, max) = (5298.585, 5943.926, 6118.734), stdev = 361.393
  CI (99.9%): [4552.331, 7335.522] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  1824.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1824.000, 1824.000, 1824.000), stdev = 0.001
  CI (99.9%): [1824.000, 1824.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  60.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 12.000, 13.000), stdev = 1.225
  CI (99.9%): [60.000, 60.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  83.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 16.600, 19.000), stdev = 1.949
  CI (99.9%): [83.000, 83.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat
# Parameters: (coder = UTF16, length = 128)

# Run progress: 75.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 578.995 ns/op
# Warmup Iteration   2: 402.489 ns/op
# Warmup Iteration   3: 369.983 ns/op
# Warmup Iteration   4: 370.052 ns/op
# Warmup Iteration   5: 463.271 ns/op
Iteration   1: 370.609 ns/op
                 gc.alloc.rate:      8110.565 MB/sec
                 gc.alloc.rate.norm: 3152.001 B/op
                 gc.count:           17.000 counts
                 gc.time:            23.000 ms

Iteration   2: 462.063 ns/op
                 gc.alloc.rate:      6505.269 MB/sec
                 gc.alloc.rate.norm: 3152.001 B/op
                 gc.count:           13.000 counts
                 gc.time:            19.000 ms

Iteration   3: 370.437 ns/op
                 gc.alloc.rate:      8114.264 MB/sec
                 gc.alloc.rate.norm: 3152.001 B/op
                 gc.count:           17.000 counts
                 gc.time:            25.000 ms

Iteration   4: 370.214 ns/op
                 gc.alloc.rate:      8119.239 MB/sec
                 gc.alloc.rate.norm: 3152.001 B/op
                 gc.count:           16.000 counts
                 gc.time:            21.000 ms

Iteration   5: 374.060 ns/op
                 gc.alloc.rate:      8035.575 MB/sec
                 gc.alloc.rate.norm: 3152.001 B/op
                 gc.count:           17.000 counts
                 gc.time:            24.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat":
  389.477 ±(99.9%) 156.366 ns/op [Average]
  (min, avg, max) = (370.214, 389.477, 462.063), stdev = 40.608
  CI (99.9%): [233.110, 545.843] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate":
  7776.983 ±(99.9%) 2740.661 MB/sec [Average]
  (min, avg, max) = (6505.269, 7776.983, 8119.239), stdev = 711.741
  CI (99.9%): [5036.322, 10517.643] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm":
  3152.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
  CI (99.9%): [3152.000, 3152.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.count":
  80.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 16.000, 17.000), stdev = 1.732
  CI (99.9%): [80.000, 80.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.string_concat:gc.time":
  112.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 22.400, 25.000), stdev = 2.408
  CI (99.9%): [112.000, 112.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = LATIN1, length = 128)

# Run progress: 83.33% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 288.591 ns/op
# Warmup Iteration   2: 248.706 ns/op
# Warmup Iteration   3: 243.639 ns/op
# Warmup Iteration   4: 243.463 ns/op
# Warmup Iteration   5: 243.441 ns/op
Iteration   1: 243.459 ns/op
                 gc.alloc.rate:      3039.606 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   2: 243.464 ns/op
                 gc.alloc.rate:      3039.544 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            9.000 ms

Iteration   3: 243.567 ns/op
                 gc.alloc.rate:      3038.233 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           7.000 counts
                 gc.time:            11.000 ms

Iteration   4: 243.445 ns/op
                 gc.alloc.rate:      3039.787 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms

Iteration   5: 243.451 ns/op
                 gc.alloc.rate:      3039.684 MB/sec
                 gc.alloc.rate.norm: 776.000 B/op
                 gc.count:           6.000 counts
                 gc.time:            8.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  243.477 ±(99.9%) 0.196 ns/op [Average]
  (min, avg, max) = (243.445, 243.477, 243.567), stdev = 0.051
  CI (99.9%): [243.281, 243.673] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  3039.371 ±(99.9%) 2.474 MB/sec [Average]
  (min, avg, max) = (3038.233, 3039.371, 3039.787), stdev = 0.642
  CI (99.9%): [3036.897, 3041.844] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  776.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
  CI (99.9%): [776.000, 776.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.000, 11.000), stdev = 1.225
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template
# Parameters: (coder = UTF16, length = 128)

# Run progress: 91.67% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 354.382 ns/op
# Warmup Iteration   2: 390.503 ns/op
# Warmup Iteration   3: 329.113 ns/op
# Warmup Iteration   4: 274.344 ns/op
# Warmup Iteration   5: 383.957 ns/op
Iteration   1: 506.637 ns/op
                 gc.alloc.rate:      2605.026 MB/sec
                 gc.alloc.rate.norm: 1384.001 B/op
                 gc.count:           6.000 counts
                 gc.time:            12.000 ms

Iteration   2: 336.691 ns/op
                 gc.alloc.rate:      3919.930 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           8.000 counts
                 gc.time:            12.000 ms

Iteration   3: 271.372 ns/op
                 gc.alloc.rate:      4863.508 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            14.000 ms

Iteration   4: 271.352 ns/op
                 gc.alloc.rate:      4863.902 MB/sec
                 gc.alloc.rate.norm: 1384.000 B/op
                 gc.count:           10.000 counts
                 gc.time:            13.000 ms

Iteration   5: 388.520 ns/op
                 gc.alloc.rate:      3396.946 MB/sec
                 gc.alloc.rate.norm: 1384.001 B/op
                 gc.count:           7.000 counts
                 gc.time:            11.000 ms



Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template":
  354.914 ±(99.9%) 377.497 ns/op [Average]
  (min, avg, max) = (271.352, 354.914, 506.637), stdev = 98.035
  CI (99.9%): [≈ 0, 732.411] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate":
  3929.862 ±(99.9%) 3744.944 MB/sec [Average]
  (min, avg, max) = (2605.026, 3929.862, 4863.902), stdev = 972.550
  CI (99.9%): [184.919, 7674.806] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.alloc.rate.norm":
  1384.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (1384.000, 1384.000, 1384.001), stdev = 0.001
  CI (99.9%): [1384.000, 1384.001] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.count":
  41.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 8.200, 10.000), stdev = 1.789
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)

Secondary result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringConcatenationBenchmark.template:gc.time":
  62.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.400, 14.000), stdev = 1.140
  CI (99.9%): [62.000, 62.000] (assumes normal distribution)


# Run complete. Total time: 00:10:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                            (coder)  (length)  Mode  Cnt     Score      Error   Units
StringConcatenationBenchmark.java_string_buffer                       LATIN1       128  avgt    5   235.359 ±    0.170   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate         LATIN1       128  avgt    5  3306.279 ±    2.370  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm    LATIN1       128  avgt    5   816.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count              LATIN1       128  avgt    5    33.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time               LATIN1       128  avgt    5    46.000                 ms
StringConcatenationBenchmark.java_string_buffer                        UTF16       128  avgt    5   314.468 ±  179.487   ns/op
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate          UTF16       128  avgt    5  4313.479 ± 2222.261  MB/sec
StringConcatenationBenchmark.java_string_buffer:gc.alloc.rate.norm     UTF16       128  avgt    5  1400.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_buffer:gc.count               UTF16       128  avgt    5    44.000             counts
StringConcatenationBenchmark.java_string_buffer:gc.time                UTF16       128  avgt    5    66.000                 ms
StringConcatenationBenchmark.java_string_builder                      LATIN1       128  avgt    5   251.703 ±   89.642   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate        LATIN1       128  avgt    5  3019.025 ±  956.635  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm   LATIN1       128  avgt    5   792.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count             LATIN1       128  avgt    5    31.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time              LATIN1       128  avgt    5    44.000                 ms
StringConcatenationBenchmark.java_string_builder                       UTF16       128  avgt    5   303.986 ±  247.817   ns/op
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate         UTF16       128  avgt    5  4518.173 ± 2872.009  MB/sec
StringConcatenationBenchmark.java_string_builder:gc.alloc.rate.norm    UTF16       128  avgt    5  1400.000 ±    0.001    B/op
StringConcatenationBenchmark.java_string_builder:gc.count              UTF16       128  avgt    5    46.000             counts
StringConcatenationBenchmark.java_string_builder:gc.time               UTF16       128  avgt    5    67.000                 ms
StringConcatenationBenchmark.plus_operator                            LATIN1       128  avgt    5   252.728 ±   75.155   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate              LATIN1       128  avgt    5  2940.822 ±  792.526  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm         LATIN1       128  avgt    5   776.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                   LATIN1       128  avgt    5    30.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                    LATIN1       128  avgt    5    42.000                 ms
StringConcatenationBenchmark.plus_operator                             UTF16       128  avgt    5   281.429 ±  102.809   ns/op
StringConcatenationBenchmark.plus_operator:gc.alloc.rate               UTF16       128  avgt    5  4719.860 ± 1530.312  MB/sec
StringConcatenationBenchmark.plus_operator:gc.alloc.rate.norm          UTF16       128  avgt    5  1384.000 ±    0.001    B/op
StringConcatenationBenchmark.plus_operator:gc.count                    UTF16       128  avgt    5    48.000             counts
StringConcatenationBenchmark.plus_operator:gc.time                     UTF16       128  avgt    5    68.000                 ms
StringConcatenationBenchmark.string_builder                           LATIN1       128  avgt    5   239.627 ±    1.336   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate             LATIN1       128  avgt    5  3151.868 ±   17.585  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm        LATIN1       128  avgt    5   792.000 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                  LATIN1       128  avgt    5    32.000             counts
StringConcatenationBenchmark.string_builder:gc.time                   LATIN1       128  avgt    5    45.000                 ms
StringConcatenationBenchmark.string_builder                            UTF16       128  avgt    5   279.068 ±   89.457   ns/op
StringConcatenationBenchmark.string_builder:gc.alloc.rate              UTF16       128  avgt    5  4808.032 ± 1386.507  MB/sec
StringConcatenationBenchmark.string_builder:gc.alloc.rate.norm         UTF16       128  avgt    5  1400.000 ±    0.001    B/op
StringConcatenationBenchmark.string_builder:gc.count                   UTF16       128  avgt    5    49.000             counts
StringConcatenationBenchmark.string_builder:gc.time                    UTF16       128  avgt    5    68.000                 ms
StringConcatenationBenchmark.string_concat                            LATIN1       128  avgt    5   293.582 ±   74.781   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate              LATIN1       128  avgt    5  5943.926 ± 1391.595  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm         LATIN1       128  avgt    5  1824.000 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                   LATIN1       128  avgt    5    60.000             counts
StringConcatenationBenchmark.string_concat:gc.time                    LATIN1       128  avgt    5    83.000                 ms
StringConcatenationBenchmark.string_concat                             UTF16       128  avgt    5   389.477 ±  156.366   ns/op
StringConcatenationBenchmark.string_concat:gc.alloc.rate               UTF16       128  avgt    5  7776.983 ± 2740.661  MB/sec
StringConcatenationBenchmark.string_concat:gc.alloc.rate.norm          UTF16       128  avgt    5  3152.001 ±    0.001    B/op
StringConcatenationBenchmark.string_concat:gc.count                    UTF16       128  avgt    5    80.000             counts
StringConcatenationBenchmark.string_concat:gc.time                     UTF16       128  avgt    5   112.000                 ms
StringConcatenationBenchmark.template                                 LATIN1       128  avgt    5   243.477 ±    0.196   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                   LATIN1       128  avgt    5  3039.371 ±    2.474  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm              LATIN1       128  avgt    5   776.000 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                        LATIN1       128  avgt    5    31.000             counts
StringConcatenationBenchmark.template:gc.time                         LATIN1       128  avgt    5    45.000                 ms
StringConcatenationBenchmark.template                                  UTF16       128  avgt    5   354.914 ±  377.497   ns/op
StringConcatenationBenchmark.template:gc.alloc.rate                    UTF16       128  avgt    5  3929.862 ± 3744.944  MB/sec
StringConcatenationBenchmark.template:gc.alloc.rate.norm               UTF16       128  avgt    5  1384.000 ±    0.001    B/op
StringConcatenationBenchmark.template:gc.count                         UTF16       128  avgt    5    41.000             counts
StringConcatenationBenchmark.template:gc.time                          UTF16       128  avgt    5    62.000                 ms

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/StringConcatenationBenchmark.scala.csv

Finished StringConcatenationBenchmark benchmark (Thu Oct 16 04:36:57 PM UTC 2025)
Thu Oct 16 04:36:57 PM UTC 2025

Running StringRegexMatcherBenchmark benchmark ...
Thu Oct 16 04:36:57 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.StringRegexMatcherBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/StringRegexMatcherBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 217.813 us/op
# Warmup Iteration   2: 186.438 us/op
# Warmup Iteration   3: 186.195 us/op
# Warmup Iteration   4: 185.492 us/op
# Warmup Iteration   5: 222.219 us/op
Iteration   1: 214.024 us/op
Iteration   2: 214.846 us/op
Iteration   3: 213.828 us/op
Iteration   4: 178.144 us/op
Iteration   5: 178.212 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_capture":
  199.811 ±(99.9%) 76.057 us/op [Average]
  (min, avg, max) = (178.144, 199.811, 214.846), stdev = 19.752
  CI (99.9%): [123.754, 275.868] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 161.667 us/op
# Warmup Iteration   2: 157.504 us/op
# Warmup Iteration   3: 131.756 us/op
# Warmup Iteration   4: 133.609 us/op
# Warmup Iteration   5: 144.704 us/op
Iteration   1: 144.375 us/op
Iteration   2: 122.389 us/op
Iteration   3: 122.255 us/op
Iteration   4: 122.304 us/op
Iteration   5: 177.123 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.java_regex_match":
  137.689 ±(99.9%) 92.511 us/op [Average]
  (min, avg, max) = (122.255, 137.689, 177.123), stdev = 24.025
  CI (99.9%): [45.178, 230.200] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 50.00% complete, ETA 00:01:42
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 362.560 us/op
# Warmup Iteration   2: 227.231 us/op
# Warmup Iteration   3: 224.476 us/op
# Warmup Iteration   4: 223.286 us/op
# Warmup Iteration   5: 224.280 us/op
Iteration   1: 217.160 us/op
Iteration   2: 259.513 us/op
Iteration   3: 251.671 us/op
Iteration   4: 276.039 us/op
Iteration   5: 287.320 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_capture":
  258.340 ±(99.9%) 103.587 us/op [Average]
  (min, avg, max) = (217.160, 258.340, 287.320), stdev = 26.901
  CI (99.9%): [154.753, 361.927] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match
# Parameters: (regexString = ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$)

# Run progress: 75.00% complete, ETA 00:00:51
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 169.957 us/op
# Warmup Iteration   2: 136.288 us/op
# Warmup Iteration   3: 166.114 us/op
# Warmup Iteration   4: 161.702 us/op
# Warmup Iteration   5: 128.009 us/op
Iteration   1: 128.002 us/op
Iteration   2: 152.092 us/op
Iteration   3: 127.897 us/op
Iteration   4: 127.895 us/op
Iteration   5: 127.942 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.string.StringRegexMatcherBenchmark.regex_match":
  132.766 ±(99.9%) 41.602 us/op [Average]
  (min, avg, max) = (127.895, 132.766, 152.092), stdev = 10.804
  CI (99.9%): [91.164, 174.368] (assumes normal distribution)


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                (regexString)  Mode  Cnt    Score     Error  Units
StringRegexMatcherBenchmark.java_regex_capture  ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  199.811 ±  76.057  us/op
StringRegexMatcherBenchmark.java_regex_match    ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  137.689 ±  92.511  us/op
StringRegexMatcherBenchmark.regex_capture       ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  258.340 ± 103.587  us/op
StringRegexMatcherBenchmark.regex_match         ^[^aeuio]*[aeuio](.*)[aeuio][^aeuio]*$  avgt    5  132.766 ±  41.602  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/StringRegexMatcherBenchmark.scala.csv

Finished StringRegexMatcherBenchmark benchmark (Thu Oct 16 04:40:22 PM UTC 2025)
Thu Oct 16 04:40:22 PM UTC 2025

Running EnumLookupBenchmark benchmark ...
Thu Oct 16 04:40:22 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.EnumLookupBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/EnumLookupBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 41.087 ns/op
# Warmup Iteration   2: 35.766 ns/op
# Warmup Iteration   3: 36.332 ns/op
# Warmup Iteration   4: 43.884 ns/op
# Warmup Iteration   5: 34.657 ns/op
Iteration   1: 37.569 ns/op
Iteration   2: 35.116 ns/op
Iteration   3: 34.658 ns/op
Iteration   4: 34.656 ns/op
Iteration   5: 34.657 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.cached_enum_values":
  35.331 ±(99.9%) 4.878 ns/op [Average]
  (min, avg, max) = (34.656, 35.331, 37.569), stdev = 1.267
  CI (99.9%): [30.454, 40.209] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 396.663 ns/op
# Warmup Iteration   2: 360.391 ns/op
# Warmup Iteration   3: 370.799 ns/op
# Warmup Iteration   4: 370.389 ns/op
# Warmup Iteration   5: 370.462 ns/op
Iteration   1: 370.486 ns/op
Iteration   2: 370.517 ns/op
Iteration   3: 370.482 ns/op
Iteration   4: 539.100 ns/op
Iteration   5: 392.740 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.EnumLookupBenchmark.enum_values":
  408.665 ±(99.9%) 283.211 ns/op [Average]
  (min, avg, max) = (370.482, 408.665, 539.100), stdev = 73.549
  CI (99.9%): [125.454, 691.876] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt    Score     Error  Units
EnumLookupBenchmark.cached_enum_values  avgt    5   35.331 ±   4.878  ns/op
EnumLookupBenchmark.enum_values         avgt    5  408.665 ± 283.211  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/EnumLookupBenchmark.scala.csv

Finished EnumLookupBenchmark benchmark (Thu Oct 16 04:42:04 PM UTC 2025)
Thu Oct 16 04:42:04 PM UTC 2025

Running LoopOptimizationBenchmark benchmark ...
Thu Oct 16 04:42:05 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.LoopOptimizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/LoopOptimizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 63.010 ns/op
# Warmup Iteration   2: 55.008 ns/op
# Warmup Iteration   3: 63.072 ns/op
# Warmup Iteration   4: 63.101 ns/op
# Warmup Iteration   5: 63.110 ns/op
Iteration   1: 63.097 ns/op
Iteration   2: 63.088 ns/op
Iteration   3: 63.109 ns/op
Iteration   4: 61.939 ns/op
Iteration   5: 63.068 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_array":
  62.860 ±(99.9%) 1.984 ns/op [Average]
  (min, avg, max) = (61.939, 62.860, 63.109), stdev = 0.515
  CI (99.9%): [60.876, 64.844] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range
# Parameters: (size = 1000)

# Run progress: 16.67% complete, ETA 00:04:14
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 82.388 ns/op
# Warmup Iteration   2: 89.621 ns/op
# Warmup Iteration   3: 70.083 ns/op
# Warmup Iteration   4: 70.109 ns/op
# Warmup Iteration   5: 70.104 ns/op
Iteration   1: 70.061 ns/op
Iteration   2: 70.080 ns/op
Iteration   3: 70.087 ns/op
Iteration   4: 70.091 ns/op
Iteration   5: 70.073 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.for_range":
  70.078 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (70.061, 70.078, 70.091), stdev = 0.012
  CI (99.9%): [70.032, 70.125] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array
# Parameters: (size = 1000)

# Run progress: 33.33% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 66.998 ns/op
# Warmup Iteration   2: 53.447 ns/op
# Warmup Iteration   3: 61.496 ns/op
# Warmup Iteration   4: 61.427 ns/op
# Warmup Iteration   5: 61.639 ns/op
Iteration   1: 61.430 ns/op
Iteration   2: 61.601 ns/op
Iteration   3: 61.472 ns/op
Iteration   4: 61.567 ns/op
Iteration   5: 61.587 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastForeach_array":
  61.531 ±(99.9%) 0.292 ns/op [Average]
  (min, avg, max) = (61.430, 61.531, 61.601), stdev = 0.076
  CI (99.9%): [61.240, 61.823] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop
# Parameters: (size = 1000)

# Run progress: 50.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 71.473 ns/op
# Warmup Iteration   2: 82.110 ns/op
# Warmup Iteration   3: 81.562 ns/op
# Warmup Iteration   4: 66.327 ns/op
# Warmup Iteration   5: 65.998 ns/op
Iteration   1: 66.000 ns/op
Iteration   2: 66.000 ns/op
Iteration   3: 66.313 ns/op
Iteration   4: 66.000 ns/op
Iteration   5: 65.998 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.macro_fastLoop":
  66.062 ±(99.9%) 0.540 ns/op [Average]
  (min, avg, max) = (65.998, 66.062, 66.313), stdev = 0.140
  CI (99.9%): [65.522, 66.603] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array
# Parameters: (size = 1000)

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 66.085 ns/op
# Warmup Iteration   2: 72.217 ns/op
# Warmup Iteration   3: 58.061 ns/op
# Warmup Iteration   4: 58.041 ns/op
# Warmup Iteration   5: 58.050 ns/op
Iteration   1: 58.028 ns/op
Iteration   2: 58.019 ns/op
Iteration   3: 58.000 ns/op
Iteration   4: 57.977 ns/op
Iteration   5: 58.007 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_array":
  58.006 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (57.977, 58.006, 58.028), stdev = 0.020
  CI (99.9%): [57.931, 58.082] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range
# Parameters: (size = 1000)

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 81.566 ns/op
# Warmup Iteration   2: 66.739 ns/op
# Warmup Iteration   3: 65.483 ns/op
# Warmup Iteration   4: 64.893 ns/op
# Warmup Iteration   5: 64.889 ns/op
Iteration   1: 65.481 ns/op
Iteration   2: 65.481 ns/op
Iteration   3: 64.893 ns/op
Iteration   4: 64.898 ns/op
Iteration   5: 64.903 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.LoopOptimizationBenchmark.while_range":
  65.131 ±(99.9%) 1.230 ns/op [Average]
  (min, avg, max) = (64.893, 65.131, 65.481), stdev = 0.319
  CI (99.9%): [63.901, 66.361] (assumes normal distribution)


# Run complete. Total time: 00:05:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          (size)  Mode  Cnt   Score   Error  Units
LoopOptimizationBenchmark.for_array                  1000  avgt    5  62.860 ± 1.984  ns/op
LoopOptimizationBenchmark.for_range                  1000  avgt    5  70.078 ± 0.047  ns/op
LoopOptimizationBenchmark.macro_fastForeach_array    1000  avgt    5  61.531 ± 0.292  ns/op
LoopOptimizationBenchmark.macro_fastLoop             1000  avgt    5  66.062 ± 0.540  ns/op
LoopOptimizationBenchmark.while_array                1000  avgt    5  58.006 ± 0.076  ns/op
LoopOptimizationBenchmark.while_range                1000  avgt    5  65.131 ± 1.230  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/LoopOptimizationBenchmark.scala.csv

Finished LoopOptimizationBenchmark benchmark (Thu Oct 16 04:47:11 PM UTC 2025)
Thu Oct 16 04:47:11 PM UTC 2025

Running ArithmeticCanonicalizationBenchmark benchmark ...
Thu Oct 16 04:47:11 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ArithmeticCanonicalizationBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ArithmeticCanonicalizationBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.819 ns/op
# Warmup Iteration   2: 2.838 ns/op
# Warmup Iteration   3: 2.340 ns/op
# Warmup Iteration   4: 2.340 ns/op
# Warmup Iteration   5: 2.340 ns/op
Iteration   1: 2.513 ns/op
Iteration   2: 2.340 ns/op
Iteration   3: 2.340 ns/op
Iteration   4: 2.340 ns/op
Iteration   5: 2.340 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.add":
  2.375 ±(99.9%) 0.299 ns/op [Average]
  (min, avg, max) = (2.340, 2.375, 2.513), stdev = 0.078
  CI (99.9%): [2.076, 2.673] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift
# Parameters: (isHeavy = true, value = 179426549)

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.876 ns/op
# Warmup Iteration   2: 2.349 ns/op
# Warmup Iteration   3: 2.339 ns/op
# Warmup Iteration   4: 2.339 ns/op
# Warmup Iteration   5: 2.339 ns/op
Iteration   1: 2.512 ns/op
Iteration   2: 2.339 ns/op
Iteration   3: 2.339 ns/op
Iteration   4: 2.339 ns/op
Iteration   5: 2.339 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.ArithmeticCanonicalizationBenchmark.shift":
  2.374 ±(99.9%) 0.299 ns/op [Average]
  (min, avg, max) = (2.339, 2.374, 2.512), stdev = 0.078
  CI (99.9%): [2.074, 2.673] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (isHeavy)    (value)  Mode  Cnt  Score   Error  Units
ArithmeticCanonicalizationBenchmark.add         true  179426549  avgt    5  2.375 ± 0.299  ns/op
ArithmeticCanonicalizationBenchmark.shift       true  179426549  avgt    5  2.374 ± 0.299  ns/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ArithmeticCanonicalizationBenchmark.scala.csv

Finished ArithmeticCanonicalizationBenchmark benchmark (Thu Oct 16 04:48:54 PM UTC 2025)
Thu Oct 16 04:48:54 PM UTC 2025

Running IfConditionalBranchBenchmark benchmark ...
Thu Oct 16 04:48:54 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.IfConditionalBranchBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/IfConditionalBranchBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch
# Parameters: (size = 16384)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.316 us/op
# Warmup Iteration   2: 1.142 us/op
# Warmup Iteration   3: 1.141 us/op
# Warmup Iteration   4: 1.139 us/op
# Warmup Iteration   5: 1.140 us/op
Iteration   1: 1.139 us/op
Iteration   2: 1.138 us/op
Iteration   3: 1.370 us/op
Iteration   4: 1.372 us/op
Iteration   5: 1.139 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.no_if_branch":
  1.232 ±(99.9%) 0.490 us/op [Average]
  (min, avg, max) = (1.138, 1.232, 1.372), stdev = 0.127
  CI (99.9%): [0.742, 1.722] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch
# Parameters: (size = 16384)

# Run progress: 33.33% complete, ETA 00:01:42
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.835 us/op
# Warmup Iteration   2: 2.381 us/op
# Warmup Iteration   3: 2.381 us/op
# Warmup Iteration   4: 2.380 us/op
# Warmup Iteration   5: 2.381 us/op
Iteration   1: 2.380 us/op
Iteration   2: 2.380 us/op
Iteration   3: 2.380 us/op
Iteration   4: 2.380 us/op
Iteration   5: 2.381 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.predictable_if_branch":
  2.380 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (2.380, 2.380, 2.381), stdev = 0.001
  CI (99.9%): [2.380, 2.381] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch
# Parameters: (size = 16384)

# Run progress: 66.67% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2.736 us/op
# Warmup Iteration   2: 2.980 us/op
# Warmup Iteration   3: 2.396 us/op
# Warmup Iteration   4: 2.397 us/op
# Warmup Iteration   5: 2.397 us/op
Iteration   1: 2.396 us/op
Iteration   2: 2.396 us/op
Iteration   3: 2.396 us/op
Iteration   4: 2.396 us/op
Iteration   5: 2.396 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.compiler.IfConditionalBranchBenchmark.unpredictable_if_branch":
  2.396 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (2.396, 2.396, 2.396), stdev = 0.001
  CI (99.9%): [2.395, 2.397] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             (size)  Mode  Cnt  Score   Error  Units
IfConditionalBranchBenchmark.no_if_branch              16384  avgt    5  1.232 ± 0.490  us/op
IfConditionalBranchBenchmark.predictable_if_branch     16384  avgt    5  2.380 ± 0.001  us/op
IfConditionalBranchBenchmark.unpredictable_if_branch   16384  avgt    5  2.396 ± 0.001  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/IfConditionalBranchBenchmark.scala.csv

Finished IfConditionalBranchBenchmark benchmark (Thu Oct 16 04:51:28 PM UTC 2025)
Thu Oct 16 04:51:28 PM UTC 2025

Running CatsTypeclassesBenchmark benchmark ...
Thu Oct 16 04:51:28 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypeclassesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/CatsTypeclassesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.878 us/op
# Warmup Iteration   2: 3.728 us/op
# Warmup Iteration   3: 3.004 us/op
# Warmup Iteration   4: 3.001 us/op
# Warmup Iteration   5: 2.991 us/op
Iteration   1: 2.987 us/op
Iteration   2: 2.989 us/op
Iteration   3: 2.996 us/op
Iteration   4: 3.002 us/op
Iteration   5: 2.992 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.foldable":
  2.993 ±(99.9%) 0.024 us/op [Average]
  (min, avg, max) = (2.987, 2.993, 3.002), stdev = 0.006
  CI (99.9%): [2.969, 3.017] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension
# Parameters: (size = 1000)

# Run progress: 20.00% complete, ETA 00:03:23
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 15.151 us/op
# Warmup Iteration   2: 13.215 us/op
# Warmup Iteration   3: 14.493 us/op
# Warmup Iteration   4: 13.949 us/op
# Warmup Iteration   5: 13.951 us/op
Iteration   1: 13.956 us/op
Iteration   2: 13.950 us/op
Iteration   3: 13.894 us/op
Iteration   4: 13.953 us/op
Iteration   5: 13.997 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.forComprehension":
  13.950 ±(99.9%) 0.141 us/op [Average]
  (min, avg, max) = (13.894, 13.950, 13.997), stdev = 0.037
  CI (99.9%): [13.808, 14.091] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor
# Parameters: (size = 1000)

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 11.118 us/op
# Warmup Iteration   2: 6.859 us/op
# Warmup Iteration   3: 6.866 us/op
# Warmup Iteration   4: 8.066 us/op
# Warmup Iteration   5: 7.070 us/op
Iteration   1: 9.568 us/op
Iteration   2: 9.233 us/op
Iteration   3: 9.841 us/op
Iteration   4: 9.236 us/op
Iteration   5: 9.598 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.functor":
  9.495 ±(99.9%) 1.003 us/op [Average]
  (min, avg, max) = (9.233, 9.495, 9.841), stdev = 0.261
  CI (99.9%): [8.492, 10.498] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad
# Parameters: (size = 1000)

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 14.037 us/op
# Warmup Iteration   2: 12.412 us/op
# Warmup Iteration   3: 12.533 us/op
# Warmup Iteration   4: 12.514 us/op
# Warmup Iteration   5: 12.535 us/op
Iteration   1: 12.514 us/op
Iteration   2: 12.527 us/op
Iteration   3: 12.529 us/op
Iteration   4: 12.502 us/op
Iteration   5: 15.130 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monad":
  13.040 ±(99.9%) 4.497 us/op [Average]
  (min, avg, max) = (12.502, 13.040, 15.130), stdev = 1.168
  CI (99.9%): [8.543, 17.538] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid
# Parameters: (size = 1000)

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.271 us/op
# Warmup Iteration   2: 10.414 us/op
# Warmup Iteration   3: 10.396 us/op
# Warmup Iteration   4: 10.379 us/op
# Warmup Iteration   5: 10.367 us/op
Iteration   1: 10.361 us/op
Iteration   2: 10.356 us/op
Iteration   3: 10.357 us/op
Iteration   4: 10.358 us/op
Iteration   5: 10.355 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypeclassesBenchmark.monoid":
  10.357 ±(99.9%) 0.009 us/op [Average]
  (min, avg, max) = (10.355, 10.357, 10.361), stdev = 0.002
  CI (99.9%): [10.348, 10.367] (assumes normal distribution)


# Run complete. Total time: 00:04:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (size)  Mode  Cnt   Score   Error  Units
CatsTypeclassesBenchmark.foldable            1000  avgt    5   2.993 ± 0.024  us/op
CatsTypeclassesBenchmark.forComprehension    1000  avgt    5  13.950 ± 0.141  us/op
CatsTypeclassesBenchmark.functor             1000  avgt    5   9.495 ± 1.003  us/op
CatsTypeclassesBenchmark.monad               1000  avgt    5  13.040 ± 4.497  us/op
CatsTypeclassesBenchmark.monoid              1000  avgt    5  10.357 ± 0.009  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/CatsTypeclassesBenchmark.scala.csv

Finished CatsTypeclassesBenchmark benchmark (Thu Oct 16 04:55:43 PM UTC 2025)
Thu Oct 16 04:55:43 PM UTC 2025

Running CatsTypesBenchmark benchmark ...
Thu Oct 16 04:55:43 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsTypesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/CatsTypesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 8.666 us/op
# Warmup Iteration   2: 7.638 us/op
# Warmup Iteration   3: 7.593 us/op
# Warmup Iteration   4: 7.605 us/op
# Warmup Iteration   5: 7.994 us/op
Iteration   1: 7.992 us/op
Iteration   2: 7.996 us/op
Iteration   3: 7.989 us/op
Iteration   4: 7.987 us/op
Iteration   5: 7.988 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.cats.CatsTypesBenchmark.eitherT":
  7.991 ±(99.9%) 0.013 us/op [Average]
  (min, avg, max) = (7.987, 7.991, 7.996), stdev = 0.003
  CI (99.9%): [7.977, 8.004] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   (size)  Mode  Cnt  Score   Error  Units
CatsTypesBenchmark.eitherT    1000  avgt    5  7.991 ± 0.013  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/CatsTypesBenchmark.scala.csv

Finished CatsTypesBenchmark benchmark (Thu Oct 16 04:56:35 PM UTC 2025)
Thu Oct 16 04:56:35 PM UTC 2025

Running CatsEffectBasicBenchmark benchmark ...
Thu Oct 16 04:56:36 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 208.522 us/op
# Warmup Iteration   2: 131.407 us/op
# Warmup Iteration   3: 138.188 us/op
# Warmup Iteration   4: 136.947 us/op
# Warmup Iteration   5: 138.517 us/op
Iteration   1: 138.537 us/op
Iteration   2: 139.319 us/op
Iteration   3: 136.984 us/op
Iteration   4: 143.419 us/op
Iteration   5: 144.106 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectBasicBenchmark.factorial":
  140.473 ±(99.9%) 12.044 us/op [Average]
  (min, avg, max) = (136.984, 140.473, 144.106), stdev = 3.128
  CI (99.9%): [128.429, 152.517] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt    Score    Error  Units
CatsEffectBasicBenchmark.factorial  avgt    5  140.473 ± 12.044  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectBasicBenchmark.scala.csv

Finished CatsEffectBasicBenchmark benchmark (Thu Oct 16 04:57:27 PM UTC 2025)
Thu Oct 16 04:57:27 PM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Thu Oct 16 04:57:28 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 6839.274 ms/op
# Warmup Iteration   2: 5867.625 ms/op
# Warmup Iteration   3: 4673.064 ms/op
# Warmup Iteration   4: 5789.592 ms/op
# Warmup Iteration   5: 5765.970 ms/op
Iteration   1: 5258.745 ms/op
Iteration   2: 5839.309 ms/op
Iteration   3: 5131.760 ms/op
Iteration   4: 5919.002 ms/op
Iteration   5: 5745.262 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  5578.815 ±(99.9%) 1379.789 ms/op [Average]
  (min, avg, max) = (5131.760, 5578.815, 5919.002), stdev = 358.327
  CI (99.9%): [4199.027, 6958.604] (assumes normal distribution)


# Run complete. Total time: 00:01:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt     Score      Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt    5  5578.815 ± 1379.789  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Thu Oct 16 04:58:47 PM UTC 2025)
Thu Oct 16 04:58:47 PM UTC 2025

Running CatsEffectWordFrequencyBenchmark benchmark ...
Thu Oct 16 04:58:47 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 72.479 ms/op
# Warmup Iteration   2: 17.642 ms/op
# Warmup Iteration   3: 15.322 ms/op
# Warmup Iteration   4: 14.425 ms/op
# Warmup Iteration   5: 14.455 ms/op
Iteration   1: 14.465 ms/op
Iteration   2: 14.455 ms/op
Iteration   3: 14.434 ms/op
Iteration   4: 14.462 ms/op
Iteration   5: 14.366 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequency":
  14.436 ±(99.9%) 0.158 ms/op [Average]
  (min, avg, max) = (14.366, 14.436, 14.465), stdev = 0.041
  CI (99.9%): [14.278, 14.594] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 337.162 ms/op
# Warmup Iteration   2: 132.407 ms/op
# Warmup Iteration   3: 131.396 ms/op
# Warmup Iteration   4: 130.586 ms/op
# Warmup Iteration   5: 129.922 ms/op
Iteration   1: 129.996 ms/op
Iteration   2: 130.500 ms/op
Iteration   3: 129.987 ms/op
Iteration   4: 129.883 ms/op
Iteration   5: 129.344 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2":
  129.942 ±(99.9%) 1.585 ms/op [Average]
  (min, avg, max) = (129.344, 129.942, 130.500), stdev = 0.412
  CI (99.9%): [128.357, 131.527] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                Mode  Cnt    Score   Error  Units
CatsEffectWordFrequencyBenchmark.wordFrequency           avgt    5   14.436 ± 0.158  ms/op
CatsEffectWordFrequencyBenchmark.wordFrequencyStreamFs2  avgt    5  129.942 ± 1.585  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/CatsEffectWordFrequencyBenchmark.scala.csv

Finished CatsEffectWordFrequencyBenchmark benchmark (Thu Oct 16 05:00:29 PM UTC 2025)
Thu Oct 16 05:00:29 PM UTC 2025

Running ZioBasicBenchmark benchmark ...
Thu Oct 16 05:00:30 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioBasicBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ZioBasicBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 204.807 us/op
# Warmup Iteration   2: 91.201 us/op
# Warmup Iteration   3: 134.594 us/op
# Warmup Iteration   4: 135.455 us/op
# Warmup Iteration   5: 139.165 us/op
Iteration   1: 138.700 us/op
Iteration   2: 139.615 us/op
Iteration   3: 139.550 us/op
Iteration   4: 138.108 us/op
Iteration   5: 139.305 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioBasicBenchmark.factorial":
  139.055 ±(99.9%) 2.469 us/op [Average]
  (min, avg, max) = (138.108, 139.055, 139.615), stdev = 0.641
  CI (99.9%): [136.586, 141.524] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    Mode  Cnt    Score   Error  Units
ZioBasicBenchmark.factorial  avgt    5  139.055 ± 2.469  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ZioBasicBenchmark.scala.csv

Finished ZioBasicBenchmark benchmark (Thu Oct 16 05:01:21 PM UTC 2025)
Thu Oct 16 05:01:21 PM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Thu Oct 16 05:01:22 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5292.391 ms/op
# Warmup Iteration   2: 5729.567 ms/op
# Warmup Iteration   3: 5411.700 ms/op
# Warmup Iteration   4: 5381.877 ms/op
# Warmup Iteration   5: 6804.155 ms/op
Iteration   1: 5465.978 ms/op
Iteration   2: 5436.253 ms/op
Iteration   3: 5560.133 ms/op
Iteration   4: 5508.614 ms/op
Iteration   5: 6708.445 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  5735.884 ±(99.9%) 2101.199 ms/op [Average]
  (min, avg, max) = (5436.253, 5735.884, 6708.445), stdev = 545.675
  CI (99.9%): [3634.685, 7837.084] (assumes normal distribution)


# Run complete. Total time: 00:01:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt     Score      Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt    5  5735.884 ± 2101.199  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Thu Oct 16 05:02:39 PM UTC 2025)
Thu Oct 16 05:02:39 PM UTC 2025

Running ZioWordFrequencyBenchmark benchmark ...
Thu Oct 16 05:02:39 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioWordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/ZioWordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 39.070 ms/op
# Warmup Iteration   2: 17.570 ms/op
# Warmup Iteration   3: 15.862 ms/op
# Warmup Iteration   4: 14.870 ms/op
# Warmup Iteration   5: 14.794 ms/op
Iteration   1: 14.807 ms/op
Iteration   2: 14.807 ms/op
Iteration   3: 14.801 ms/op
Iteration   4: 15.120 ms/op
Iteration   5: 14.856 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequency":
  14.878 ±(99.9%) 0.528 ms/op [Average]
  (min, avg, max) = (14.801, 14.878, 15.120), stdev = 0.137
  CI (99.9%): [14.351, 15.406] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream

# Run progress: 50.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 2741.722 ms/op
# Warmup Iteration   2: 647.487 ms/op
# Warmup Iteration   3: 324.034 ms/op
# Warmup Iteration   4: 273.261 ms/op
# Warmup Iteration   5: 261.228 ms/op
Iteration   1: 255.758 ms/op
Iteration   2: 263.440 ms/op
Iteration   3: 252.536 ms/op
Iteration   4: 261.620 ms/op
Iteration   5: 254.407 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioWordFrequencyBenchmark.wordFrequencyStream":
  257.552 ±(99.9%) 18.213 ms/op [Average]
  (min, avg, max) = (252.536, 257.552, 263.440), stdev = 4.730
  CI (99.9%): [239.339, 275.765] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt    Score    Error  Units
ZioWordFrequencyBenchmark.wordFrequency        avgt    5   14.878 ±  0.528  ms/op
ZioWordFrequencyBenchmark.wordFrequencyStream  avgt    5  257.552 ± 18.213  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/ZioWordFrequencyBenchmark.scala.csv

Finished ZioWordFrequencyBenchmark benchmark (Thu Oct 16 05:04:22 PM UTC 2025)
Thu Oct 16 05:04:22 PM UTC 2025

Running DijkstraBenchmark benchmark ...
Thu Oct 16 05:04:22 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12752.144 ms/op
# Warmup Iteration   2: 12833.352 ms/op
# Warmup Iteration   3: 12020.187 ms/op
# Warmup Iteration   4: 12022.073 ms/op
# Warmup Iteration   5: 12968.332 ms/op
Iteration   1: 12101.922 ms/op
Iteration   2: 12097.463 ms/op
Iteration   3: 12998.124 ms/op
Iteration   4: 13038.221 ms/op
Iteration   5: 12100.143 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  12467.175 ±(99.9%) 1937.614 ms/op [Average]
  (min, avg, max) = (12097.463, 12467.175, 13038.221), stdev = 503.192
  CI (99.9%): [10529.561, 14404.789] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:02:13
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 101.629 ms/op
# Warmup Iteration   2: 99.044 ms/op
# Warmup Iteration   3: 98.833 ms/op
# Warmup Iteration   4: 98.827 ms/op
# Warmup Iteration   5: 98.821 ms/op
Iteration   1: 98.890 ms/op
Iteration   2: 98.844 ms/op
Iteration   3: 98.846 ms/op
Iteration   4: 98.843 ms/op
Iteration   5: 98.912 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  98.867 ±(99.9%) 0.124 ms/op [Average]
  (min, avg, max) = (98.843, 98.867, 98.912), stdev = 0.032
  CI (99.9%): [98.743, 98.991] (assumes normal distribution)


# Run complete. Total time: 00:03:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score      Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt    5  12467.175 ± 1937.614  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt    5     98.867 ±    0.124  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Thu Oct 16 05:07:35 PM UTC 2025)
Thu Oct 16 05:07:35 PM UTC 2025

Running FactorialBenchmark benchmark ...
Thu Oct 16 05:07:35 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.FactorialBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/FactorialBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 51.709 us/op
# Warmup Iteration   2: 45.268 us/op
# Warmup Iteration   3: 39.575 us/op
# Warmup Iteration   4: 44.653 us/op
# Warmup Iteration   5: 46.521 us/op
Iteration   1: 55.949 us/op
Iteration   2: 40.485 us/op
Iteration   3: 40.978 us/op
Iteration   4: 44.720 us/op
Iteration   5: 38.069 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  44.040 ±(99.9%) 27.225 us/op [Average]
  (min, avg, max) = (38.069, 44.040, 55.949), stdev = 7.070
  CI (99.9%): [16.815, 71.265] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 25.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 625.383 us/op
# Warmup Iteration   2: 545.879 us/op
# Warmup Iteration   3: 542.717 us/op
# Warmup Iteration   4: 542.337 us/op
# Warmup Iteration   5: 844.232 us/op
Iteration   1: 545.093 us/op
Iteration   2: 542.282 us/op
Iteration   3: 541.559 us/op
Iteration   4: 541.751 us/op
Iteration   5: 541.587 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.dac_big_int_multiply":
  542.454 ±(99.9%) 5.788 us/op [Average]
  (min, avg, max) = (541.559, 542.454, 545.093), stdev = 1.503
  CI (99.9%): [536.666, 548.243] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 1000)

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 202.050 us/op
# Warmup Iteration   2: 197.615 us/op
# Warmup Iteration   3: 163.085 us/op
# Warmup Iteration   4: 163.044 us/op
# Warmup Iteration   5: 162.973 us/op
Iteration   1: 162.987 us/op
Iteration   2: 163.060 us/op
Iteration   3: 162.873 us/op
Iteration   4: 162.847 us/op
Iteration   5: 163.032 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  162.960 ±(99.9%) 0.366 us/op [Average]
  (min, avg, max) = (162.847, 162.960, 163.060), stdev = 0.095
  CI (99.9%): [162.594, 163.326] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply
# Parameters: (n = 5000)

# Run progress: 75.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 7405.016 us/op
# Warmup Iteration   2: 5097.152 us/op
# Warmup Iteration   3: 7108.236 us/op
# Warmup Iteration   4: 7615.256 us/op
# Warmup Iteration   5: 8251.160 us/op
Iteration   1: 7422.458 us/op
Iteration   2: 6528.867 us/op
Iteration   3: 5991.806 us/op
Iteration   4: 7639.823 us/op
Iteration   5: 7311.047 us/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.factorial.FactorialBenchmark.iterative_big_int_multiply":
  6978.800 ±(99.9%) 2668.339 us/op [Average]
  (min, avg, max) = (5991.806, 6978.800, 7639.823), stdev = 692.959
  CI (99.9%): [4310.461, 9647.139] (assumes normal distribution)


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       (n)  Mode  Cnt     Score      Error  Units
FactorialBenchmark.dac_big_int_multiply        1000  avgt    5    44.040 ±   27.225  us/op
FactorialBenchmark.dac_big_int_multiply        5000  avgt    5   542.454 ±    5.788  us/op
FactorialBenchmark.iterative_big_int_multiply  1000  avgt    5   162.960 ±    0.366  us/op
FactorialBenchmark.iterative_big_int_multiply  5000  avgt    5  6978.800 ± 2668.339  us/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/FactorialBenchmark.scala.csv

Finished FactorialBenchmark benchmark (Thu Oct 16 05:10:59 PM UTC 2025)
Thu Oct 16 05:10:59 PM UTC 2025

Running GameOfLifeBenchmark benchmark ...
Thu Oct 16 05:10:59 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.GameOfLifeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/GameOfLifeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.084 ms/op
# Warmup Iteration   2: 20.925 ms/op
# Warmup Iteration   3: 17.342 ms/op
# Warmup Iteration   4: 16.178 ms/op
# Warmup Iteration   5: 15.198 ms/op
Iteration   1: 15.195 ms/op
Iteration   2: 15.203 ms/op
Iteration   3: 15.196 ms/op
Iteration   4: 15.196 ms/op
Iteration   5: 15.196 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.array_copy":
  15.197 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (15.195, 15.197, 15.203), stdev = 0.003
  CI (99.9%): [15.184, 15.211] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place

# Run progress: 50.00% complete, ETA 00:00:51
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 19.715 ms/op
# Warmup Iteration   2: 12.251 ms/op
# Warmup Iteration   3: 12.235 ms/op
# Warmup Iteration   4: 12.222 ms/op
# Warmup Iteration   5: 12.229 ms/op
Iteration   1: 12.223 ms/op
Iteration   2: 12.232 ms/op
Iteration   3: 12.232 ms/op
Iteration   4: 12.234 ms/op
Iteration   5: 12.235 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.gameoflife.GameOfLifeBenchmark.in_place":
  12.231 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (12.223, 12.231, 12.235), stdev = 0.005
  CI (99.9%): [12.212, 12.250] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt   Score   Error  Units
GameOfLifeBenchmark.array_copy  avgt    5  15.197 ± 0.013  ms/op
GameOfLifeBenchmark.in_place    avgt    5  12.231 ± 0.019  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/GameOfLifeBenchmark.scala.csv

Finished GameOfLifeBenchmark benchmark (Thu Oct 16 05:12:42 PM UTC 2025)
Thu Oct 16 05:12:42 PM UTC 2025

Running KnapsackBenchmark benchmark ...
Thu Oct 16 05:12:43 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 13612.032 ms/op
# Warmup Iteration   2: 12905.320 ms/op
# Warmup Iteration   3: 12882.656 ms/op
# Warmup Iteration   4: 488.464 ms/op
# Warmup Iteration   5: 461.929 ms/op
Iteration   1: 423.986 ms/op
Iteration   2: 423.784 ms/op
Iteration   3: 423.553 ms/op
Iteration   4: 423.373 ms/op
Iteration   5: 423.253 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  423.590 ±(99.9%) 1.150 ms/op [Average]
  (min, avg, max) = (423.253, 423.590, 423.986), stdev = 0.299
  CI (99.9%): [422.440, 424.739] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 16.984 ms/op
# Warmup Iteration   2: 10.130 ms/op
# Warmup Iteration   3: 12.366 ms/op
# Warmup Iteration   4: 10.010 ms/op
# Warmup Iteration   5: 10.009 ms/op
Iteration   1: 10.011 ms/op
Iteration   2: 10.014 ms/op
Iteration   3: 10.006 ms/op
Iteration   4: 9.998 ms/op
Iteration   5: 10.000 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  10.006 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (9.998, 10.006, 10.014), stdev = 0.007
  CI (99.9%): [9.980, 10.032] (assumes normal distribution)


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt    Score   Error  Units
KnapsackBenchmark.dynamic         50000  avgt    5  423.590 ± 1.150  ms/op
KnapsackBenchmark.greedy          50000  avgt    5   10.006 ± 0.026  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Thu Oct 16 05:14:51 PM UTC 2025)
Thu Oct 16 05:14:51 PM UTC 2025

Running NQueensBenchmark benchmark ...
Thu Oct 16 05:14:51 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.NQueensBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/NQueensBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking
# Parameters: (n = 24)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 305.042 ms/op
# Warmup Iteration   2: 266.211 ms/op
# Warmup Iteration   3: 265.886 ms/op
# Warmup Iteration   4: 266.950 ms/op
# Warmup Iteration   5: 266.190 ms/op
Iteration   1: 265.875 ms/op
Iteration   2: 266.376 ms/op
Iteration   3: 322.285 ms/op
Iteration   4: 266.640 ms/op
Iteration   5: 266.493 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.backtracking":
  277.534 ±(99.9%) 96.337 ms/op [Average]
  (min, avg, max) = (265.875, 277.534, 322.285), stdev = 25.019
  CI (99.9%): [181.196, 373.871] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing
# Parameters: (n = 24)

# Run progress: 50.00% complete, ETA 00:00:51
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 3.612 ms/op
# Warmup Iteration   2: 2.999 ms/op
# Warmup Iteration   3: 2.997 ms/op
# Warmup Iteration   4: 2.994 ms/op
# Warmup Iteration   5: 2.995 ms/op
Iteration   1: 2.987 ms/op
Iteration   2: 2.981 ms/op
Iteration   3: 2.968 ms/op
Iteration   4: 2.966 ms/op
Iteration   5: 2.966 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.nqueens.NQueensBenchmark.simulated_annealing":
  2.974 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (2.966, 2.974, 2.987), stdev = 0.010
  CI (99.9%): [2.936, 3.012] (assumes normal distribution)


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             (n)  Mode  Cnt    Score    Error  Units
NQueensBenchmark.backtracking          24  avgt    5  277.534 ± 96.337  ms/op
NQueensBenchmark.simulated_annealing   24  avgt    5    2.974 ±  0.038  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/NQueensBenchmark.scala.csv

Finished NQueensBenchmark benchmark (Thu Oct 16 05:16:34 PM UTC 2025)
Thu Oct 16 05:16:34 PM UTC 2025

Running PalindromeBenchmark benchmark ...
Thu Oct 16 05:16:35 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PalindromeBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/PalindromeBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 1.861 ms/op
# Warmup Iteration   2: 1.152 ms/op
# Warmup Iteration   3: 1.172 ms/op
# Warmup Iteration   4: 1.174 ms/op
# Warmup Iteration   5: 1.174 ms/op
Iteration   1: 1.174 ms/op
Iteration   2: 1.173 ms/op
Iteration   3: 1.174 ms/op
Iteration   4: 1.173 ms/op
Iteration   5: 1.173 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.functional":
  1.173 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (1.173, 1.173, 1.174), stdev = 0.001
  CI (99.9%): [1.171, 1.175] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative

# Run progress: 33.33% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.815 ms/op
# Warmup Iteration   2: 0.927 ms/op
# Warmup Iteration   3: 0.736 ms/op
# Warmup Iteration   4: 0.608 ms/op
# Warmup Iteration   5: 0.798 ms/op
Iteration   1: 0.679 ms/op
Iteration   2: 0.611 ms/op
Iteration   3: 0.609 ms/op
Iteration   4: 0.611 ms/op
Iteration   5: 0.614 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.iterative":
  0.625 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (0.609, 0.625, 0.679), stdev = 0.030
  CI (99.9%): [0.508, 0.742] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive

# Run progress: 66.67% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 0.762 ms/op
# Warmup Iteration   2: 0.615 ms/op
# Warmup Iteration   3: 0.608 ms/op
# Warmup Iteration   4: 0.608 ms/op
# Warmup Iteration   5: 0.608 ms/op
Iteration   1: 0.608 ms/op
Iteration   2: 0.610 ms/op
Iteration   3: 0.614 ms/op
Iteration   4: 0.623 ms/op
Iteration   5: 0.623 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.palindrome.PalindromeBenchmark.recursive":
  0.616 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.608, 0.616, 0.623), stdev = 0.007
  CI (99.9%): [0.588, 0.643] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt  Score   Error  Units
PalindromeBenchmark.functional  avgt    5  1.173 ± 0.002  ms/op
PalindromeBenchmark.iterative   avgt    5  0.625 ± 0.117  ms/op
PalindromeBenchmark.recursive   avgt    5  0.616 ± 0.027  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/PalindromeBenchmark.scala.csv

Finished PalindromeBenchmark benchmark (Thu Oct 16 05:19:08 PM UTC 2025)
Thu Oct 16 05:19:08 PM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Thu Oct 16 05:19:08 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:01:40
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 577.084 ms/op
# Warmup Iteration   2: 627.149 ms/op
# Warmup Iteration   3: 522.393 ms/op
# Warmup Iteration   4: 494.799 ms/op
# Warmup Iteration   5: 494.928 ms/op
Iteration   1: 494.818 ms/op
Iteration   2: 573.381 ms/op
Iteration   3: 527.149 ms/op
Iteration   4: 496.549 ms/op
Iteration   5: 496.567 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  517.693 ±(99.9%) 130.684 ms/op [Average]
  (min, avg, max) = (494.818, 517.693, 573.381), stdev = 33.938
  CI (99.9%): [387.009, 648.376] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:00:57
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 279.253 ms/op
# Warmup Iteration   2: 274.191 ms/op
# Warmup Iteration   3: 272.904 ms/op
# Warmup Iteration   4: 272.875 ms/op
# Warmup Iteration   5: 272.915 ms/op
Iteration   1: 272.918 ms/op
Iteration   2: 272.926 ms/op
Iteration   3: 272.900 ms/op
Iteration   4: 272.868 ms/op
Iteration   5: 272.910 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  272.904 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (272.868, 272.904, 272.926), stdev = 0.022
  CI (99.9%): [272.818, 272.991] (assumes normal distribution)


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt    Score     Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt    5  517.693 ± 130.684  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt    5  272.904 ±   0.086  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Thu Oct 16 05:21:02 PM UTC 2025)
Thu Oct 16 05:21:02 PM UTC 2025

Running PrimesBenchmark benchmark ...
Thu Oct 16 05:21:03 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 31.587 ms/op
# Warmup Iteration   2: 32.778 ms/op
# Warmup Iteration   3: 25.337 ms/op
# Warmup Iteration   4: 32.209 ms/op
# Warmup Iteration   5: 25.313 ms/op
Iteration   1: 25.315 ms/op
Iteration   2: 25.319 ms/op
Iteration   3: 25.316 ms/op
Iteration   4: 25.317 ms/op
Iteration   5: 31.898 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  26.633 ±(99.9%) 11.334 ms/op [Average]
  (min, avg, max) = (25.315, 26.633, 31.898), stdev = 2.943
  CI (99.9%): [15.299, 37.967] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:02:33
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4142.040 ms/op
# Warmup Iteration   2: 4187.913 ms/op
# Warmup Iteration   3: 3770.794 ms/op
# Warmup Iteration   4: 3770.530 ms/op
# Warmup Iteration   5: 3770.608 ms/op
Iteration   1: 3770.654 ms/op
Iteration   2: 3770.561 ms/op
Iteration   3: 3770.602 ms/op
Iteration   4: 3770.549 ms/op
Iteration   5: 4245.787 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  3865.631 ±(99.9%) 818.315 ms/op [Average]
  (min, avg, max) = (3770.549, 3865.631, 4245.787), stdev = 212.514
  CI (99.9%): [3047.316, 4683.945] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:02:10
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 5518.082 ms/op
# Warmup Iteration   2: 5410.520 ms/op
# Warmup Iteration   3: 5064.973 ms/op
# Warmup Iteration   4: 5064.191 ms/op
# Warmup Iteration   5: 5063.501 ms/op
Iteration   1: 5064.163 ms/op
Iteration   2: 5063.845 ms/op
Iteration   3: 5064.766 ms/op
Iteration   4: 5065.418 ms/op
Iteration   5: 5064.253 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  5064.489 ±(99.9%) 2.372 ms/op [Average]
  (min, avg, max) = (5063.845, 5064.489, 5065.418), stdev = 0.616
  CI (99.9%): [5062.117, 5066.861] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:01:00
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 4502.102 ms/op
# Warmup Iteration   2: 5450.670 ms/op
# Warmup Iteration   3: 5450.325 ms/op
# Warmup Iteration   4: 5450.389 ms/op
# Warmup Iteration   5: 5450.390 ms/op
Iteration   1: 5450.408 ms/op
Iteration   2: 5450.372 ms/op
Iteration   3: 5450.396 ms/op
Iteration   4: 5450.525 ms/op
Iteration   5: 5450.358 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  5450.412 ±(99.9%) 0.254 ms/op [Average]
  (min, avg, max) = (5450.358, 5450.412, 5450.525), stdev = 0.066
  CI (99.9%): [5450.158, 5450.666] (assumes normal distribution)


# Run complete. Total time: 00:04:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score     Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt    5    26.633 ±  11.334  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt    5  3865.631 ± 818.315  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt    5  5064.489 ±   2.372  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt    5  5450.412 ±   0.254  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Thu Oct 16 05:25:05 PM UTC 2025)
Thu Oct 16 05:25:05 PM UTC 2025

Running WordFrequencyBenchmark benchmark ...
Thu Oct 16 05:25:05 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.WordFrequencyBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 5 -f 1 -rf csv -rff results/jdk-25/x86_64/jmh/graalvm-ee/WordFrequencyBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 117.284 ms/op
# Warmup Iteration   2: 74.923 ms/op
# Warmup Iteration   3: 59.563 ms/op
# Warmup Iteration   4: 62.921 ms/op
# Warmup Iteration   5: 52.897 ms/op
Iteration   1: 53.270 ms/op
Iteration   2: 57.123 ms/op
Iteration   3: 56.549 ms/op
Iteration   4: 63.050 ms/op
Iteration   5: 64.414 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.dac":
  58.881 ±(99.9%) 18.062 ms/op [Average]
  (min, avg, max) = (53.270, 58.881, 64.414), stdev = 4.691
  CI (99.9%): [40.820, 76.943] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional

# Run progress: 20.00% complete, ETA 00:03:24
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 25.435 ms/op
# Warmup Iteration   2: 16.904 ms/op
# Warmup Iteration   3: 16.484 ms/op
# Warmup Iteration   4: 16.757 ms/op
# Warmup Iteration   5: 16.668 ms/op
Iteration   1: 16.814 ms/op
Iteration   2: 16.813 ms/op
Iteration   3: 16.484 ms/op
Iteration   4: 16.638 ms/op
Iteration   5: 16.515 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.functional":
  16.653 ±(99.9%) 0.607 ms/op [Average]
  (min, avg, max) = (16.484, 16.653, 16.814), stdev = 0.158
  CI (99.9%): [16.046, 17.260] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 17.631 ms/op
# Warmup Iteration   2: 12.531 ms/op
# Warmup Iteration   3: 15.360 ms/op
# Warmup Iteration   4: 15.154 ms/op
# Warmup Iteration   5: 12.470 ms/op
Iteration   1: 12.457 ms/op
Iteration   2: 12.465 ms/op
Iteration   3: 12.458 ms/op
Iteration   4: 12.474 ms/op
Iteration   5: 12.461 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.iterative":
  12.463 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (12.457, 12.463, 12.474), stdev = 0.007
  CI (99.9%): [12.437, 12.489] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 7.967 ms/op
# Warmup Iteration   2: 4.735 ms/op
# Warmup Iteration   3: 4.572 ms/op
# Warmup Iteration   4: 4.499 ms/op
# Warmup Iteration   5: 4.517 ms/op
Iteration   1: 4.620 ms/op
Iteration   2: 4.498 ms/op
Iteration   3: 4.593 ms/op
Iteration   4: 4.502 ms/op
Iteration   5: 4.507 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.parallel_stream":
  4.544 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (4.498, 4.544, 4.620), stdev = 0.058
  CI (99.9%): [4.321, 4.767] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 25, Java HotSpot(TM) 64-Bit Server VM, 25+37-LTS-jvmci-b01
# VM invoker: /home/grenoux/.sdkman/candidates/java/25-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:+EnableJVMCI -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 1 of 1
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by org.openjdk.jmh.util.Utils (file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar)
WARNING: Please consider reporting this to the maintainers of class org.openjdk.jmh.util.Utils
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
# Warmup Iteration   1: 12.424 ms/op
# Warmup Iteration   2: 14.412 ms/op
# Warmup Iteration   3: 11.808 ms/op
# Warmup Iteration   4: 13.862 ms/op
# Warmup Iteration   5: 14.337 ms/op
Iteration   1: 11.768 ms/op
Iteration   2: 11.819 ms/op
Iteration   3: 11.765 ms/op
Iteration   4: 11.772 ms/op
Iteration   5: 11.771 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.wordfrequency.WordFrequencyBenchmark.pattern_stream":
  11.779 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (11.765, 11.779, 11.819), stdev = 0.022
  CI (99.9%): [11.693, 11.865] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt   Score    Error  Units
WordFrequencyBenchmark.dac              avgt    5  58.881 ± 18.062  ms/op
WordFrequencyBenchmark.functional       avgt    5  16.653 ±  0.607  ms/op
WordFrequencyBenchmark.iterative        avgt    5  12.463 ±  0.026  ms/op
WordFrequencyBenchmark.parallel_stream  avgt    5   4.544 ±  0.223  ms/op
WordFrequencyBenchmark.pattern_stream   avgt    5  11.779 ±  0.086  ms/op

Benchmark result is saved to results/jdk-25/x86_64/jmh/graalvm-ee/WordFrequencyBenchmark.scala.csv

Finished WordFrequencyBenchmark benchmark (Thu Oct 16 05:29:20 PM UTC 2025)
Thu Oct 16 05:29:20 PM UTC 2025

Finished GraalVM Oracle test suite!

Elapsed: 98 minutes and 18 seconds.
