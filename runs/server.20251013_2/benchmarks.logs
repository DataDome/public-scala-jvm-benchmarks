
#################################################################
#######       JVM Performance Benchmarks Test Suite       #######
#################################################################

+=======================+
| [1/7] Load Properties |
+=======================+
Configuration properties have been successfully loaded from the './settings/config.properties' file.
Constant properties have been successfully loaded from the './settings/constants.properties' file.

+================================+
| [2/7] Load Architecture and OS |
+================================+
Hardware Architecture: x86_64
Operating system: linux

+========================+
| [3/7] JQ Configuration |
+========================+
JSON processor: scripts/jq/jq-linux-x86_64

+===============================+
| [4/7] Compile benchmark suite |
+===============================+
Compiling benchmark suite...
sbt clean Jmh/assembly

[info] welcome to sbt 1.11.6 (Eclipse Adoptium Java 21.0.8)
[info] loading settings for project public-scala-jvm-benchmarks-build from plugins.sbt...
[info] loading project definition from /home/grenoux/Repositories/public-scala-jvm-benchmarks/project
[info] loading settings for project public-scala-jvm-benchmarks from build.sbt...
[info] set current project to scala-jvm-benchmarks (in build file:/home/grenoux/Repositories/public-scala-jvm-benchmarks/)
[success] Total time: 0 s, completed Oct 13, 2025, 8:36:31 AM
[info] compiling 74 Scala sources and 77 Java sources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes ...
[warn] -- [E198] Unused Symbol Warning: /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/scala/co/datadome/pub/scalabenchmarks/jvms/AABaseBenchmark.scala:6:25 
[warn] 6 |import scala.compiletime.uninitialized
[warn]   |                         ^^^^^^^^^^^^^
[warn]   |                         unused import
[warn] -- [E198] Unused Symbol Warning: /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/scala/co/datadome/pub/scalabenchmarks/jvms/api/collections/MutableSetBenchmark.scala:24:14 
[warn] 24 |  private val AlmostMaxValue = 90
[warn]    |              ^^^^^^^^^^^^^^
[warn]    |              unused private member
[warn] -- [E198] Unused Symbol Warning: /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/scala/co/datadome/pub/scalabenchmarks/jvms/api/collections/SetBenchmark.scala:23:14 
[warn] 23 |  private val AlmostMaxValue = 90
[warn]    |              ^^^^^^^^^^^^^^
[warn]    |              unused private member
[warn] three warnings found
[info] /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/java/com/ionutbalosin/jvm/performance/benchmarks/miscellaneous/memoryaccess/SequentialCollectionReadAccessBenchmark.java: SequentialCollectionReadAccessBenchmark.java uses unchecked or unsafe operations.
[info] /home/grenoux/Repositories/public-scala-jvm-benchmarks/src/main/java/com/ionutbalosin/jvm/performance/benchmarks/miscellaneous/memoryaccess/SequentialCollectionReadAccessBenchmark.java: Recompile with -Xlint:unchecked for details.
[info] done compiling
[info] running (fork) org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/src_managed/jmh /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/resource_managed/jmh default
[info] Processing 570 classes from /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes with "reflection" generator
[info] Writing out Java source to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/src_managed/jmh and resources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/resource_managed/jmh
[info] compiling 754 Java sources to /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/classes ...
[info] done compiling
[info] 40 file(s) merged using strategy 'Rename' (Run the task at debug level to see the details)
[info] Built: /home/grenoux/Repositories/public-scala-jvm-benchmarks/target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar
[info] Jar hash: 4c008bdbdf3f04239edb0c97338125b3f2605394
[success] Total time: 41 s, completed Oct 13, 2025, 8:37:12 AM
Compilation completed successfully.

+=============================================
| Running steps 5 to 7 with openjdk-hotspot-vm
+=============================================
| Mon Oct 13 08:37:12 AM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/21.0.8-tem
JDK version: 21
JVM name: OpenJDK HotSpot VM
JVM identifier: openjdk-hotspot-vm

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk21.json
JMH output folder: results/jdk-21/x86_64/jmh/openjdk-hotspot-vm

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running OpenJDK HotSpot VM test suite ...
Creating folder: 'results/jdk-21/x86_64/jmh/openjdk-hotspot-vm' ...

Running InfrastructureBaselineBenchmark benchmark ...
Mon Oct 13 08:37:13 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.InfrastructureBaselineBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/InfrastructureBaselineBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline

# Run progress: 0.00% complete, ETA 00:17:30
# Fork: 1 of 2
# Warmup Iteration   1: 0.519 ns/op
# Warmup Iteration   2: 0.440 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.431 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 7.14% complete, ETA 00:16:25
# Fork: 2 of 2
# Warmup Iteration   1: 0.541 ns/op
# Warmup Iteration   2: 0.541 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline":
  0.430 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.430, 0.430, 0.431), stdev = 0.001
  CI (99.9%): [0.429, 0.430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank

# Run progress: 14.29% complete, ETA 00:15:09
# Fork: 1 of 2
# Warmup Iteration   1: 0.606 ns/op
# Warmup Iteration   2: 0.481 ns/op
# Warmup Iteration   3: 0.477 ns/op
# Warmup Iteration   4: 0.477 ns/op
# Warmup Iteration   5: 0.477 ns/op
Iteration   1: 0.432 ns/op
Iteration   2: 0.477 ns/op
Iteration   3: 0.477 ns/op
Iteration   4: 0.477 ns/op
Iteration   5: 0.477 ns/op

# Run progress: 21.43% complete, ETA 00:13:53
# Fork: 2 of 2
# Warmup Iteration   1: 0.557 ns/op
# Warmup Iteration   2: 0.437 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank":
  0.449 ±(99.9%) 0.037 ns/op [Average]
  (min, avg, max) = (0.430, 0.449, 0.477), stdev = 0.024
  CI (99.9%): [0.412, 0.486] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline

# Run progress: 28.57% complete, ETA 00:12:37
# Fork: 1 of 2
# Warmup Iteration   1: 2.672 ns/op
# Warmup Iteration   2: 2.795 ns/op
# Warmup Iteration   3: 2.330 ns/op
# Warmup Iteration   4: 1.898 ns/op
# Warmup Iteration   5: 2.327 ns/op
Iteration   1: 1.895 ns/op
Iteration   2: 2.088 ns/op
Iteration   3: 2.088 ns/op
Iteration   4: 1.898 ns/op
Iteration   5: 1.898 ns/op

# Run progress: 35.71% complete, ETA 00:11:21
# Fork: 2 of 2
# Warmup Iteration   1: 2.789 ns/op
# Warmup Iteration   2: 2.299 ns/op
# Warmup Iteration   3: 1.896 ns/op
# Warmup Iteration   4: 1.892 ns/op
# Warmup Iteration   5: 1.893 ns/op
Iteration   1: 1.893 ns/op
Iteration   2: 1.892 ns/op
Iteration   3: 1.894 ns/op
Iteration   4: 1.894 ns/op
Iteration   5: 1.895 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline":
  1.934 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (1.892, 1.934, 2.088), stdev = 0.081
  CI (99.9%): [1.810, 2.057] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline

# Run progress: 42.86% complete, ETA 00:10:05
# Fork: 1 of 2
# Warmup Iteration   1: 0.547 ns/op
# Warmup Iteration   2: 0.618 ns/op
# Warmup Iteration   3: 0.523 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 50.00% complete, ETA 00:08:49
# Fork: 2 of 2
# Warmup Iteration   1: 0.522 ns/op
# Warmup Iteration   2: 0.637 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline":
  0.430 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.430, 0.430, 0.430), stdev = 0.001
  CI (99.9%): [0.429, 0.430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume

# Run progress: 57.14% complete, ETA 00:07:33
# Fork: 1 of 2
# Warmup Iteration   1: 0.677 ns/op
# Warmup Iteration   2: 0.574 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.634 ns/op
# Warmup Iteration   5: 0.681 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.573 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op

# Run progress: 64.29% complete, ETA 00:06:18
# Fork: 2 of 2
# Warmup Iteration   1: 0.834 ns/op
# Warmup Iteration   2: 0.576 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.632 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume":
  0.579 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (0.573, 0.579, 0.632), stdev = 0.019
  CI (99.9%): [0.551, 0.607] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return

# Run progress: 71.43% complete, ETA 00:05:02
# Fork: 1 of 2
# Warmup Iteration   1: 0.523 ns/op
# Warmup Iteration   2: 0.564 ns/op
# Warmup Iteration   3: 0.477 ns/op
# Warmup Iteration   4: 0.477 ns/op
# Warmup Iteration   5: 0.477 ns/op
Iteration   1: 0.432 ns/op
Iteration   2: 0.519 ns/op
Iteration   3: 0.516 ns/op
Iteration   4: 0.477 ns/op
Iteration   5: 0.477 ns/op

# Run progress: 78.57% complete, ETA 00:03:47
# Fork: 2 of 2
# Warmup Iteration   1: 0.540 ns/op
# Warmup Iteration   2: 0.435 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.467 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return":
  0.461 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (0.430, 0.461, 0.519), stdev = 0.036
  CI (99.9%): [0.406, 0.515] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink

# Run progress: 85.71% complete, ETA 00:02:31
# Fork: 1 of 2
# Warmup Iteration   1: 2.633 ns/op
# Warmup Iteration   2: 2.183 ns/op
# Warmup Iteration   3: 2.070 ns/op
# Warmup Iteration   4: 2.070 ns/op
# Warmup Iteration   5: 2.070 ns/op
Iteration   1: 2.007 ns/op
Iteration   2: 2.070 ns/op
Iteration   3: 2.070 ns/op
Iteration   4: 2.070 ns/op
Iteration   5: 2.070 ns/op

# Run progress: 92.86% complete, ETA 00:01:15
# Fork: 2 of 2
# Warmup Iteration   1: 2.921 ns/op
# Warmup Iteration   2: 2.169 ns/op
# Warmup Iteration   3: 2.064 ns/op
# Warmup Iteration   4: 2.065 ns/op
# Warmup Iteration   5: 2.064 ns/op
Iteration   1: 2.080 ns/op
Iteration   2: 2.064 ns/op
Iteration   3: 2.064 ns/op
Iteration   4: 2.249 ns/op
Iteration   5: 2.063 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink":
  2.081 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (2.007, 2.081, 2.249), stdev = 0.063
  CI (99.9%): [1.986, 2.175] (assumes normal distribution)


# Run complete. Total time: 00:17:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt  Score   Error  Units
InfrastructureBaselineBenchmark.method_baseline        avgt   10  0.430 ± 0.001  ns/op
InfrastructureBaselineBenchmark.method_blank           avgt   10  0.449 ± 0.037  ns/op
InfrastructureBaselineBenchmark.method_dont_inline     avgt   10  1.934 ± 0.123  ns/op
InfrastructureBaselineBenchmark.method_inline          avgt   10  0.430 ± 0.001  ns/op
InfrastructureBaselineBenchmark.obj_blackhole_consume  avgt   10  0.579 ± 0.028  ns/op
InfrastructureBaselineBenchmark.obj_return             avgt   10  0.461 ± 0.054  ns/op
InfrastructureBaselineBenchmark.obj_sink               avgt   10  2.081 ± 0.095  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/InfrastructureBaselineBenchmark.scala.csv

Finished InfrastructureBaselineBenchmark benchmark (Mon Oct 13 08:54:53 AM UTC 2025)
Mon Oct 13 08:54:53 AM UTC 2025

Running MutableSetBenchmark benchmark ...
Mon Oct 13 08:54:54 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.MutableSetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/MutableSetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 12480.438 ns/op
# Warmup Iteration   2: 10412.022 ns/op
# Warmup Iteration   3: 10382.481 ns/op
# Warmup Iteration   4: 10378.674 ns/op
# Warmup Iteration   5: 10364.012 ns/op
Iteration   1: 10353.659 ns/op
Iteration   2: 10360.126 ns/op
Iteration   3: 10370.901 ns/op
Iteration   4: 10364.308 ns/op
Iteration   5: 10355.007 ns/op

# Run progress: 50.00% complete, ETA 00:01:15
# Fork: 2 of 2
# Warmup Iteration   1: 13832.030 ns/op
# Warmup Iteration   2: 10380.133 ns/op
# Warmup Iteration   3: 10514.512 ns/op
# Warmup Iteration   4: 10506.687 ns/op
# Warmup Iteration   5: 10499.656 ns/op
Iteration   1: 10483.743 ns/op
Iteration   2: 10493.632 ns/op
Iteration   3: 10490.037 ns/op
Iteration   4: 10482.973 ns/op
Iteration   5: 10482.532 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap":
  10423.692 ±(99.9%) 100.604 ns/op [Average]
  (min, avg, max) = (10353.659, 10423.692, 10493.632), stdev = 66.543
  CI (99.9%): [10323.088, 10524.296] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    (size)  Mode  Cnt      Score     Error  Units
MutableSetBenchmark.flatMap    1000  avgt   10  10423.692 ± 100.604  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/MutableSetBenchmark.scala.csv

Finished MutableSetBenchmark benchmark (Mon Oct 13 08:57:26 AM UTC 2025)
Mon Oct 13 08:57:26 AM UTC 2025

Running SetBenchmark benchmark ...
Mon Oct 13 08:57:26 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 23137.093 ns/op
# Warmup Iteration   2: 23075.219 ns/op
# Warmup Iteration   3: 29212.002 ns/op
# Warmup Iteration   4: 28646.450 ns/op
# Warmup Iteration   5: 23405.406 ns/op
Iteration   1: 21795.488 ns/op
Iteration   2: 23678.670 ns/op
Iteration   3: 23591.287 ns/op
Iteration   4: 23747.543 ns/op
Iteration   5: 23706.951 ns/op

# Run progress: 50.00% complete, ETA 00:01:15
# Fork: 2 of 2
# Warmup Iteration   1: 23476.898 ns/op
# Warmup Iteration   2: 23080.370 ns/op
# Warmup Iteration   3: 23712.824 ns/op
# Warmup Iteration   4: 19723.208 ns/op
# Warmup Iteration   5: 19711.280 ns/op
Iteration   1: 19741.923 ns/op
Iteration   2: 19709.937 ns/op
Iteration   3: 19695.585 ns/op
Iteration   4: 19697.169 ns/op
Iteration   5: 23588.121 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  21895.267 ±(99.9%) 2969.843 ns/op [Average]
  (min, avg, max) = (19695.585, 21895.267, 23747.543), stdev = 1964.367
  CI (99.9%): [18925.425, 24865.110] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark             (size)  Mode  Cnt      Score      Error  Units
SetBenchmark.flatMap    1000  avgt   10  21895.267 ± 2969.843  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Mon Oct 13 08:59:59 AM UTC 2025)
Mon Oct 13 08:59:59 AM UTC 2025

Running VectorBenchmark benchmark ...
Mon Oct 13 08:59:59 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 53867.079 ns/op
# Warmup Iteration   2: 44915.557 ns/op
# Warmup Iteration   3: 44874.829 ns/op
# Warmup Iteration   4: 44822.415 ns/op
# Warmup Iteration   5: 44815.119 ns/op
Iteration   1: 44823.398 ns/op
Iteration   2: 44792.201 ns/op
Iteration   3: 44819.995 ns/op
Iteration   4: 48304.167 ns/op
Iteration   5: 44619.192 ns/op

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 2 of 2
# Warmup Iteration   1: 70661.328 ns/op
# Warmup Iteration   2: 52261.848 ns/op
# Warmup Iteration   3: 43134.661 ns/op
# Warmup Iteration   4: 43092.278 ns/op
# Warmup Iteration   5: 43094.651 ns/op
Iteration   1: 43093.196 ns/op
Iteration   2: 43090.541 ns/op
Iteration   3: 43089.513 ns/op
Iteration   4: 43080.460 ns/op
Iteration   5: 43089.961 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  44280.262 ±(99.9%) 2481.875 ns/op [Average]
  (min, avg, max) = (43080.460, 44280.262, 48304.167), stdev = 1641.607
  CI (99.9%): [41798.387, 46762.138] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score      Error  Units
VectorBenchmark.flatMap    1000  avgt   10  44280.262 ± 2481.875  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Mon Oct 13 09:02:32 AM UTC 2025)
Mon Oct 13 09:02:32 AM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Mon Oct 13 09:02:32 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 12140.015 ms/op
# Warmup Iteration   2: 11921.447 ms/op
# Warmup Iteration   3: 11991.533 ms/op
# Warmup Iteration   4: 11846.296 ms/op
# Warmup Iteration   5: 11163.445 ms/op
Iteration   1: 11742.779 ms/op
Iteration   2: 12511.651 ms/op
Iteration   3: 11693.656 ms/op
Iteration   4: 12500.108 ms/op
Iteration   5: 13498.279 ms/op

# Run progress: 50.00% complete, ETA 00:02:09
# Fork: 2 of 2
# Warmup Iteration   1: 11929.842 ms/op
# Warmup Iteration   2: 11700.363 ms/op
# Warmup Iteration   3: 10731.598 ms/op
# Warmup Iteration   4: 11751.703 ms/op
# Warmup Iteration   5: 12292.174 ms/op
Iteration   1: 12623.879 ms/op
Iteration   2: 10776.911 ms/op
Iteration   3: 11687.359 ms/op
Iteration   4: 10731.082 ms/op
Iteration   5: 11704.920 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  11947.062 ±(99.9%) 1291.620 ms/op [Average]
  (min, avg, max) = (10731.082, 11947.062, 13498.279), stdev = 854.326
  CI (99.9%): [10655.443, 13238.682] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt      Score      Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt   10  11947.062 ± 1291.620  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Mon Oct 13 09:06:45 AM UTC 2025)
Mon Oct 13 09:06:45 AM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Mon Oct 13 09:06:46 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 11702.784 ms/op
# Warmup Iteration   2: 10728.936 ms/op
# Warmup Iteration   3: 11768.909 ms/op
# Warmup Iteration   4: 10819.210 ms/op
# Warmup Iteration   5: 11623.731 ms/op
Iteration   1: 10540.457 ms/op
Iteration   2: 12232.915 ms/op
Iteration   3: 10875.858 ms/op
Iteration   4: 11672.997 ms/op
Iteration   5: 11674.281 ms/op

# Run progress: 50.00% complete, ETA 00:02:00
# Fork: 2 of 2
# Warmup Iteration   1: 12348.507 ms/op
# Warmup Iteration   2: 11418.444 ms/op
# Warmup Iteration   3: 12314.617 ms/op
# Warmup Iteration   4: 12317.791 ms/op
# Warmup Iteration   5: 10637.973 ms/op
Iteration   1: 11728.539 ms/op
Iteration   2: 11709.302 ms/op
Iteration   3: 11690.050 ms/op
Iteration   4: 10584.284 ms/op
Iteration   5: 11665.390 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  11437.407 ±(99.9%) 853.245 ms/op [Average]
  (min, avg, max) = (10540.457, 11437.407, 12232.915), stdev = 564.369
  CI (99.9%): [10584.162, 12290.653] (assumes normal distribution)


# Run complete. Total time: 00:04:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt      Score     Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt   10  11437.407 ± 853.245  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Mon Oct 13 09:10:49 AM UTC 2025)
Mon Oct 13 09:10:49 AM UTC 2025

Running DijkstraBenchmark benchmark ...
Mon Oct 13 09:10:49 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 21971.774 ms/op
# Warmup Iteration   2: 24921.697 ms/op
# Warmup Iteration   3: 16492.141 ms/op
# Warmup Iteration   4: 16501.564 ms/op
# Warmup Iteration   5: 16497.506 ms/op
Iteration   1: 16501.555 ms/op
Iteration   2: 16505.458 ms/op
Iteration   3: 16499.462 ms/op
Iteration   4: 16494.425 ms/op
Iteration   5: 16501.195 ms/op

# Run progress: 25.00% complete, ETA 00:09:26
# Fork: 2 of 2
# Warmup Iteration   1: 21086.304 ms/op
# Warmup Iteration   2: 24552.531 ms/op
# Warmup Iteration   3: 24403.292 ms/op
# Warmup Iteration   4: 16260.097 ms/op
# Warmup Iteration   5: 16264.162 ms/op
Iteration   1: 16263.270 ms/op
Iteration   2: 16276.734 ms/op
Iteration   3: 16273.272 ms/op
Iteration   4: 16272.349 ms/op
Iteration   5: 16264.436 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  16385.216 ±(99.9%) 183.732 ms/op [Average]
  (min, avg, max) = (16263.270, 16385.216, 16505.458), stdev = 121.527
  CI (99.9%): [16201.484, 16568.948] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:06:22
# Fork: 1 of 2
# Warmup Iteration   1: 103.259 ms/op
# Warmup Iteration   2: 98.800 ms/op
# Warmup Iteration   3: 98.651 ms/op
# Warmup Iteration   4: 98.685 ms/op
# Warmup Iteration   5: 98.732 ms/op
Iteration   1: 98.682 ms/op
Iteration   2: 98.647 ms/op
Iteration   3: 98.712 ms/op
Iteration   4: 98.656 ms/op
Iteration   5: 98.669 ms/op

# Run progress: 75.00% complete, ETA 00:02:36
# Fork: 2 of 2
# Warmup Iteration   1: 99.170 ms/op
# Warmup Iteration   2: 94.844 ms/op
# Warmup Iteration   3: 94.719 ms/op
# Warmup Iteration   4: 94.682 ms/op
# Warmup Iteration   5: 94.699 ms/op
Iteration   1: 94.664 ms/op
Iteration   2: 94.686 ms/op
Iteration   3: 94.689 ms/op
Iteration   4: 94.693 ms/op
Iteration   5: 94.687 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  96.679 ±(99.9%) 3.179 ms/op [Average]
  (min, avg, max) = (94.664, 96.679, 98.712), stdev = 2.103
  CI (99.9%): [93.500, 99.858] (assumes normal distribution)


# Run complete. Total time: 00:09:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score     Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt   10  16385.216 ± 183.732  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt   10     96.679 ±   3.179  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Mon Oct 13 09:20:06 AM UTC 2025)
Mon Oct 13 09:20:06 AM UTC 2025

Running KnapsackBenchmark benchmark ...
Mon Oct 13 09:20:06 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 15172.988 ms/op
# Warmup Iteration   2: 13767.311 ms/op
# Warmup Iteration   3: 7351.590 ms/op
# Warmup Iteration   4: 680.101 ms/op
# Warmup Iteration   5: 664.176 ms/op
Iteration   1: 663.066 ms/op
Iteration   2: 663.177 ms/op
Iteration   3: 662.334 ms/op
Iteration   4: 714.469 ms/op
Iteration   5: 737.859 ms/op

# Run progress: 25.00% complete, ETA 00:05:24
# Fork: 2 of 2
# Warmup Iteration   1: 14041.423 ms/op
# Warmup Iteration   2: 14373.041 ms/op
# Warmup Iteration   3: 7619.617 ms/op
# Warmup Iteration   4: 680.976 ms/op
# Warmup Iteration   5: 664.738 ms/op
Iteration   1: 663.703 ms/op
Iteration   2: 663.050 ms/op
Iteration   3: 663.066 ms/op
Iteration   4: 666.792 ms/op
Iteration   5: 668.560 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  676.608 ±(99.9%) 40.466 ms/op [Average]
  (min, avg, max) = (662.334, 676.608, 737.859), stdev = 26.766
  CI (99.9%): [636.142, 717.073] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:03:35
# Fork: 1 of 2
# Warmup Iteration   1: 14.753 ms/op
# Warmup Iteration   2: 13.351 ms/op
# Warmup Iteration   3: 11.049 ms/op
# Warmup Iteration   4: 11.061 ms/op
# Warmup Iteration   5: 11.062 ms/op
Iteration   1: 11.063 ms/op
Iteration   2: 11.066 ms/op
Iteration   3: 11.062 ms/op
Iteration   4: 11.083 ms/op
Iteration   5: 11.049 ms/op

# Run progress: 75.00% complete, ETA 00:01:37
# Fork: 2 of 2
# Warmup Iteration   1: 14.900 ms/op
# Warmup Iteration   2: 14.034 ms/op
# Warmup Iteration   3: 11.103 ms/op
# Warmup Iteration   4: 11.122 ms/op
# Warmup Iteration   5: 11.123 ms/op
Iteration   1: 11.122 ms/op
Iteration   2: 11.123 ms/op
Iteration   3: 11.123 ms/op
Iteration   4: 11.142 ms/op
Iteration   5: 11.111 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  11.094 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (11.049, 11.094, 11.142), stdev = 0.033
  CI (99.9%): [11.044, 11.145] (assumes normal distribution)


# Run complete. Total time: 00:06:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt    Score    Error  Units
KnapsackBenchmark.dynamic         50000  avgt   10  676.608 ± 40.466  ms/op
KnapsackBenchmark.greedy          50000  avgt   10   11.094 ±  0.050  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Mon Oct 13 09:26:14 AM UTC 2025)
Mon Oct 13 09:26:14 AM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Mon Oct 13 09:26:15 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 1322.870 ms/op
# Warmup Iteration   2: 1284.027 ms/op
# Warmup Iteration   3: 1438.219 ms/op
# Warmup Iteration   4: 1883.664 ms/op
# Warmup Iteration   5: 1500.769 ms/op
Iteration   1: 1113.868 ms/op
Iteration   2: 1167.498 ms/op
Iteration   3: 1042.843 ms/op
Iteration   4: 1043.149 ms/op
Iteration   5: 1042.849 ms/op

# Run progress: 25.00% complete, ETA 00:04:12
# Fork: 2 of 2
# Warmup Iteration   1: 1065.316 ms/op
# Warmup Iteration   2: 1051.638 ms/op
# Warmup Iteration   3: 1252.384 ms/op
# Warmup Iteration   4: 1070.844 ms/op
# Warmup Iteration   5: 1037.412 ms/op
Iteration   1: 1040.541 ms/op
Iteration   2: 1134.874 ms/op
Iteration   3: 1160.148 ms/op
Iteration   4: 1236.719 ms/op
Iteration   5: 1144.215 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  1112.670 ±(99.9%) 103.187 ms/op [Average]
  (min, avg, max) = (1040.541, 1112.670, 1236.719), stdev = 68.252
  CI (99.9%): [1009.484, 1215.857] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:02:47
# Fork: 1 of 2
# Warmup Iteration   1: 545.313 ms/op
# Warmup Iteration   2: 541.315 ms/op
# Warmup Iteration   3: 533.732 ms/op
# Warmup Iteration   4: 625.488 ms/op
# Warmup Iteration   5: 744.483 ms/op
Iteration   1: 637.033 ms/op
Iteration   2: 583.001 ms/op
Iteration   3: 580.243 ms/op
Iteration   4: 577.234 ms/op
Iteration   5: 536.110 ms/op

# Run progress: 75.00% complete, ETA 00:01:23
# Fork: 2 of 2
# Warmup Iteration   1: 558.999 ms/op
# Warmup Iteration   2: 637.302 ms/op
# Warmup Iteration   3: 715.652 ms/op
# Warmup Iteration   4: 565.145 ms/op
# Warmup Iteration   5: 536.269 ms/op
Iteration   1: 534.097 ms/op
Iteration   2: 533.609 ms/op
Iteration   3: 620.586 ms/op
Iteration   4: 701.169 ms/op
Iteration   5: 592.719 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  589.580 ±(99.9%) 79.727 ms/op [Average]
  (min, avg, max) = (533.609, 589.580, 701.169), stdev = 52.734
  CI (99.9%): [509.854, 669.307] (assumes normal distribution)


# Run complete. Total time: 00:05:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt     Score     Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt   10  1112.670 ± 103.187  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt   10   589.580 ±  79.727  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Mon Oct 13 09:31:47 AM UTC 2025)
Mon Oct 13 09:31:47 AM UTC 2025

Running PrimesBenchmark benchmark ...
Mon Oct 13 09:31:47 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 2
# Warmup Iteration   1: 38.216 ms/op
# Warmup Iteration   2: 31.174 ms/op
# Warmup Iteration   3: 38.583 ms/op
# Warmup Iteration   4: 38.562 ms/op
# Warmup Iteration   5: 37.839 ms/op
Iteration   1: 30.758 ms/op
Iteration   2: 30.761 ms/op
Iteration   3: 33.940 ms/op
Iteration   4: 34.735 ms/op
Iteration   5: 30.712 ms/op

# Run progress: 12.50% complete, ETA 00:08:53
# Fork: 2 of 2
# Warmup Iteration   1: 46.314 ms/op
# Warmup Iteration   2: 38.558 ms/op
# Warmup Iteration   3: 34.823 ms/op
# Warmup Iteration   4: 33.057 ms/op
# Warmup Iteration   5: 30.741 ms/op
Iteration   1: 30.740 ms/op
Iteration   2: 34.088 ms/op
Iteration   3: 30.714 ms/op
Iteration   4: 33.587 ms/op
Iteration   5: 30.671 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  32.071 ±(99.9%) 2.658 ms/op [Average]
  (min, avg, max) = (30.671, 32.071, 34.735), stdev = 1.758
  CI (99.9%): [29.413, 34.729] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:07:36
# Fork: 1 of 2
# Warmup Iteration   1: 5474.430 ms/op
# Warmup Iteration   2: 4528.551 ms/op
# Warmup Iteration   3: 4525.962 ms/op
# Warmup Iteration   4: 4091.450 ms/op
# Warmup Iteration   5: 4092.021 ms/op
Iteration   1: 4091.856 ms/op
Iteration   2: 4395.786 ms/op
Iteration   3: 4340.495 ms/op
Iteration   4: 4093.871 ms/op
Iteration   5: 4090.404 ms/op

# Run progress: 37.50% complete, ETA 00:07:06
# Fork: 2 of 2
# Warmup Iteration   1: 4547.896 ms/op
# Warmup Iteration   2: 4137.466 ms/op
# Warmup Iteration   3: 4137.790 ms/op
# Warmup Iteration   4: 4138.328 ms/op
# Warmup Iteration   5: 4136.530 ms/op
Iteration   1: 4137.080 ms/op
Iteration   2: 4136.722 ms/op
Iteration   3: 4137.023 ms/op
Iteration   4: 4135.791 ms/op
Iteration   5: 4136.939 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  4169.597 ±(99.9%) 162.384 ms/op [Average]
  (min, avg, max) = (4090.404, 4169.597, 4395.786), stdev = 107.407
  CI (99.9%): [4007.213, 4331.980] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:06:01
# Fork: 1 of 2
# Warmup Iteration   1: 6661.890 ms/op
# Warmup Iteration   2: 6845.526 ms/op
# Warmup Iteration   3: 5105.472 ms/op
# Warmup Iteration   4: 5104.592 ms/op
# Warmup Iteration   5: 5109.493 ms/op
Iteration   1: 5106.527 ms/op
Iteration   2: 5109.323 ms/op
Iteration   3: 5107.684 ms/op
Iteration   4: 5104.566 ms/op
Iteration   5: 5109.808 ms/op

# Run progress: 62.50% complete, ETA 00:04:25
# Fork: 2 of 2
# Warmup Iteration   1: 6617.568 ms/op
# Warmup Iteration   2: 5154.758 ms/op
# Warmup Iteration   3: 5128.364 ms/op
# Warmup Iteration   4: 5129.154 ms/op
# Warmup Iteration   5: 5129.637 ms/op
Iteration   1: 5128.956 ms/op
Iteration   2: 5129.052 ms/op
Iteration   3: 5128.877 ms/op
Iteration   4: 5129.634 ms/op
Iteration   5: 5128.710 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  5118.314 ±(99.9%) 17.242 ms/op [Average]
  (min, avg, max) = (5104.566, 5118.314, 5129.634), stdev = 11.404
  CI (99.9%): [5101.072, 5135.555] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, OpenJDK 64-Bit Server VM, 21.0.8+9-LTS
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-tem/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:02:53
# Fork: 1 of 2
# Warmup Iteration   1: 5960.109 ms/op
# Warmup Iteration   2: 6343.746 ms/op
# Warmup Iteration   3: 6257.825 ms/op
# Warmup Iteration   4: 6257.954 ms/op
# Warmup Iteration   5: 6257.739 ms/op
Iteration   1: 6257.900 ms/op
Iteration   2: 6257.944 ms/op
Iteration   3: 6257.913 ms/op
Iteration   4: 6257.829 ms/op
Iteration   5: 6257.971 ms/op

# Run progress: 87.50% complete, ETA 00:01:27
# Fork: 2 of 2
# Warmup Iteration   1: 5983.338 ms/op
# Warmup Iteration   2: 5344.720 ms/op
# Warmup Iteration   3: 6262.081 ms/op
# Warmup Iteration   4: 6262.826 ms/op
# Warmup Iteration   5: 6262.696 ms/op
Iteration   1: 6262.104 ms/op
Iteration   2: 6752.639 ms/op
Iteration   3: 6258.344 ms/op
Iteration   4: 6259.289 ms/op
Iteration   5: 6258.356 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  6308.029 ±(99.9%) 236.191 ms/op [Average]
  (min, avg, max) = (6257.829, 6308.029, 6752.639), stdev = 156.226
  CI (99.9%): [6071.838, 6544.220] (assumes normal distribution)


# Run complete. Total time: 00:11:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score     Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt   10    32.071 ±   2.658  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt   10  4169.597 ± 162.384  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt   10  5118.314 ±  17.242  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt   10  6308.029 ± 236.191  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/openjdk-hotspot-vm/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Mon Oct 13 09:43:38 AM UTC 2025)
Mon Oct 13 09:43:39 AM UTC 2025

Finished OpenJDK HotSpot VM test suite!

Elapsed: 66 minutes and 26 seconds.

+=============================================
| Running steps 5 to 7 with graalvm-ce
+=============================================
| Mon Oct 13 09:43:39 AM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce
JDK version: 21
JVM name: GraalVM CE
JVM identifier: graalvm-ce

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk21.json
JMH output folder: results/jdk-21/x86_64/jmh/graalvm-ce

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running GraalVM CE test suite ...
Creating folder: 'results/jdk-21/x86_64/jmh/graalvm-ce' ...

Running InfrastructureBaselineBenchmark benchmark ...
Mon Oct 13 09:43:39 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.InfrastructureBaselineBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/InfrastructureBaselineBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline

# Run progress: 0.00% complete, ETA 00:17:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.513 ns/op
# Warmup Iteration   2: 0.512 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 7.14% complete, ETA 00:16:26
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.560 ns/op
# Warmup Iteration   2: 0.431 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline":
  0.430 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.430, 0.430, 0.430), stdev = 0.001
  CI (99.9%): [0.430, 0.430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank

# Run progress: 14.29% complete, ETA 00:15:09
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.430 ns/op
# Warmup Iteration   2: 0.538 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.474 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 21.43% complete, ETA 00:13:52
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.568 ns/op
# Warmup Iteration   2: 0.431 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank":
  0.434 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (0.430, 0.434, 0.474), stdev = 0.014
  CI (99.9%): [0.413, 0.456] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline

# Run progress: 28.57% complete, ETA 00:12:37
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.314 ns/op
# Warmup Iteration   2: 2.822 ns/op
# Warmup Iteration   3: 2.373 ns/op
# Warmup Iteration   4: 1.912 ns/op
# Warmup Iteration   5: 1.912 ns/op
Iteration   1: 1.912 ns/op
Iteration   2: 1.912 ns/op
Iteration   3: 1.912 ns/op
Iteration   4: 1.938 ns/op
Iteration   5: 1.912 ns/op

# Run progress: 35.71% complete, ETA 00:11:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.382 ns/op
# Warmup Iteration   2: 2.308 ns/op
# Warmup Iteration   3: 2.304 ns/op
# Warmup Iteration   4: 1.931 ns/op
# Warmup Iteration   5: 1.931 ns/op
Iteration   1: 1.931 ns/op
Iteration   2: 1.931 ns/op
Iteration   3: 1.931 ns/op
Iteration   4: 1.931 ns/op
Iteration   5: 1.931 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline":
  1.924 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (1.912, 1.924, 1.938), stdev = 0.010
  CI (99.9%): [1.908, 1.940] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline

# Run progress: 42.86% complete, ETA 00:10:05
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.622 ns/op
# Warmup Iteration   2: 0.556 ns/op
# Warmup Iteration   3: 0.465 ns/op
# Warmup Iteration   4: 0.465 ns/op
# Warmup Iteration   5: 0.465 ns/op
Iteration   1: 0.465 ns/op
Iteration   2: 0.465 ns/op
Iteration   3: 0.465 ns/op
Iteration   4: 0.465 ns/op
Iteration   5: 0.465 ns/op

# Run progress: 50.00% complete, ETA 00:08:49
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.517 ns/op
# Warmup Iteration   2: 0.432 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.531 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline":
  0.448 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (0.430, 0.448, 0.465), stdev = 0.019
  CI (99.9%): [0.420, 0.476] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume

# Run progress: 57.14% complete, ETA 00:07:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.693 ns/op
# Warmup Iteration   2: 0.792 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.573 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op

# Run progress: 64.29% complete, ETA 00:06:18
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.844 ns/op
# Warmup Iteration   2: 0.714 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.573 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume":
  0.573 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.573, 0.573, 0.573), stdev = 0.001
  CI (99.9%): [0.573, 0.573] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return

# Run progress: 71.43% complete, ETA 00:05:02
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.572 ns/op
# Warmup Iteration   2: 0.432 ns/op
# Warmup Iteration   3: 0.516 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 78.57% complete, ETA 00:03:46
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.550 ns/op
# Warmup Iteration   2: 0.669 ns/op
# Warmup Iteration   3: 0.558 ns/op
# Warmup Iteration   4: 0.465 ns/op
# Warmup Iteration   5: 0.465 ns/op
Iteration   1: 0.465 ns/op
Iteration   2: 0.507 ns/op
Iteration   3: 0.465 ns/op
Iteration   4: 0.465 ns/op
Iteration   5: 0.465 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return":
  0.452 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (0.430, 0.452, 0.507), stdev = 0.026
  CI (99.9%): [0.412, 0.491] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink

# Run progress: 85.71% complete, ETA 00:02:31
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.705 ns/op
# Warmup Iteration   2: 2.040 ns/op
# Warmup Iteration   3: 2.434 ns/op
# Warmup Iteration   4: 2.048 ns/op
# Warmup Iteration   5: 2.048 ns/op
Iteration   1: 2.048 ns/op
Iteration   2: 2.048 ns/op
Iteration   3: 2.048 ns/op
Iteration   4: 2.048 ns/op
Iteration   5: 2.048 ns/op

# Run progress: 92.86% complete, ETA 00:01:15
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.333 ns/op
# Warmup Iteration   2: 2.515 ns/op
# Warmup Iteration   3: 2.048 ns/op
# Warmup Iteration   4: 2.048 ns/op
# Warmup Iteration   5: 2.048 ns/op
Iteration   1: 2.048 ns/op
Iteration   2: 2.048 ns/op
Iteration   3: 2.048 ns/op
Iteration   4: 2.264 ns/op
Iteration   5: 2.069 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink":
  2.072 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (2.048, 2.072, 2.264), stdev = 0.068
  CI (99.9%): [1.969, 2.174] (assumes normal distribution)


# Run complete. Total time: 00:17:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt  Score    Error  Units
InfrastructureBaselineBenchmark.method_baseline        avgt   10  0.430 ±  0.001  ns/op
InfrastructureBaselineBenchmark.method_blank           avgt   10  0.434 ±  0.021  ns/op
InfrastructureBaselineBenchmark.method_dont_inline     avgt   10  1.924 ±  0.016  ns/op
InfrastructureBaselineBenchmark.method_inline          avgt   10  0.448 ±  0.028  ns/op
InfrastructureBaselineBenchmark.obj_blackhole_consume  avgt   10  0.573 ±  0.001  ns/op
InfrastructureBaselineBenchmark.obj_return             avgt   10  0.452 ±  0.040  ns/op
InfrastructureBaselineBenchmark.obj_sink               avgt   10  2.072 ±  0.103  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/InfrastructureBaselineBenchmark.scala.csv

Finished InfrastructureBaselineBenchmark benchmark (Mon Oct 13 10:01:19 AM UTC 2025)
Mon Oct 13 10:01:19 AM UTC 2025

Running MutableSetBenchmark benchmark ...
Mon Oct 13 10:01:20 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.MutableSetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/MutableSetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 11304.407 ns/op
# Warmup Iteration   2: 8816.924 ns/op
# Warmup Iteration   3: 8787.509 ns/op
# Warmup Iteration   4: 8790.661 ns/op
# Warmup Iteration   5: 12391.914 ns/op
Iteration   1: 8779.835 ns/op
Iteration   2: 8774.892 ns/op
Iteration   3: 8779.932 ns/op
Iteration   4: 8774.850 ns/op
Iteration   5: 8772.567 ns/op

# Run progress: 50.00% complete, ETA 00:01:15
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 11617.658 ns/op
# Warmup Iteration   2: 8747.479 ns/op
# Warmup Iteration   3: 8719.303 ns/op
# Warmup Iteration   4: 8721.792 ns/op
# Warmup Iteration   5: 8702.909 ns/op
Iteration   1: 8713.364 ns/op
Iteration   2: 8735.494 ns/op
Iteration   3: 8733.616 ns/op
Iteration   4: 8729.086 ns/op
Iteration   5: 8740.621 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap":
  8753.426 ±(99.9%) 38.252 ns/op [Average]
  (min, avg, max) = (8713.364, 8753.426, 8779.932), stdev = 25.302
  CI (99.9%): [8715.173, 8791.678] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    (size)  Mode  Cnt     Score    Error  Units
MutableSetBenchmark.flatMap    1000  avgt   10  8753.426 ± 38.252  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/MutableSetBenchmark.scala.csv

Finished MutableSetBenchmark benchmark (Mon Oct 13 10:03:52 AM UTC 2025)
Mon Oct 13 10:03:52 AM UTC 2025

Running SetBenchmark benchmark ...
Mon Oct 13 10:03:53 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 16408.546 ns/op
# Warmup Iteration   2: 14423.125 ns/op
# Warmup Iteration   3: 14398.502 ns/op
# Warmup Iteration   4: 14402.310 ns/op
# Warmup Iteration   5: 14399.644 ns/op
Iteration   1: 14378.376 ns/op
Iteration   2: 14380.811 ns/op
Iteration   3: 14388.337 ns/op
Iteration   4: 14375.595 ns/op
Iteration   5: 14373.333 ns/op

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 17813.301 ns/op
# Warmup Iteration   2: 21504.439 ns/op
# Warmup Iteration   3: 20433.330 ns/op
# Warmup Iteration   4: 21303.209 ns/op
# Warmup Iteration   5: 21689.392 ns/op
Iteration   1: 17173.928 ns/op
Iteration   2: 17235.312 ns/op
Iteration   3: 16812.417 ns/op
Iteration   4: 17115.926 ns/op
Iteration   5: 17164.534 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  15739.857 ±(99.9%) 2174.743 ns/op [Average]
  (min, avg, max) = (14373.333, 15739.857, 17235.312), stdev = 1438.458
  CI (99.9%): [13565.114, 17914.599] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark             (size)  Mode  Cnt      Score      Error  Units
SetBenchmark.flatMap    1000  avgt   10  15739.857 ± 2174.743  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Mon Oct 13 10:06:25 AM UTC 2025)
Mon Oct 13 10:06:25 AM UTC 2025

Running VectorBenchmark benchmark ...
Mon Oct 13 10:06:26 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 59134.463 ns/op
# Warmup Iteration   2: 35397.867 ns/op
# Warmup Iteration   3: 35274.344 ns/op
# Warmup Iteration   4: 35230.390 ns/op
# Warmup Iteration   5: 35224.244 ns/op
Iteration   1: 35233.799 ns/op
Iteration   2: 35229.976 ns/op
Iteration   3: 35231.596 ns/op
Iteration   4: 35225.980 ns/op
Iteration   5: 35233.192 ns/op

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 42728.245 ns/op
# Warmup Iteration   2: 44379.150 ns/op
# Warmup Iteration   3: 35499.952 ns/op
# Warmup Iteration   4: 35459.934 ns/op
# Warmup Iteration   5: 35456.029 ns/op
Iteration   1: 43195.554 ns/op
Iteration   2: 36138.317 ns/op
Iteration   3: 37957.176 ns/op
Iteration   4: 35458.578 ns/op
Iteration   5: 35448.526 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  36435.270 ±(99.9%) 3814.287 ns/op [Average]
  (min, avg, max) = (35225.980, 36435.270, 43195.554), stdev = 2522.914
  CI (99.9%): [32620.983, 40249.556] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score      Error  Units
VectorBenchmark.flatMap    1000  avgt   10  36435.270 ± 3814.287  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Mon Oct 13 10:08:59 AM UTC 2025)
Mon Oct 13 10:08:59 AM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Mon Oct 13 10:08:59 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6748.766 ms/op
# Warmup Iteration   2: 6973.639 ms/op
# Warmup Iteration   3: 5935.977 ms/op
# Warmup Iteration   4: 5871.130 ms/op
# Warmup Iteration   5: 5481.287 ms/op
Iteration   1: 6016.612 ms/op
Iteration   2: 5998.859 ms/op
Iteration   3: 5990.313 ms/op
Iteration   4: 5352.750 ms/op
Iteration   5: 5440.523 ms/op

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6649.900 ms/op
# Warmup Iteration   2: 5601.619 ms/op
# Warmup Iteration   3: 5623.098 ms/op
# Warmup Iteration   4: 5003.017 ms/op
# Warmup Iteration   5: 5572.233 ms/op
Iteration   1: 5535.619 ms/op
Iteration   2: 5790.822 ms/op
Iteration   3: 5104.477 ms/op
Iteration   4: 5595.256 ms/op
Iteration   5: 5164.450 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  5598.968 ±(99.9%) 515.753 ms/op [Average]
  (min, avg, max) = (5104.477, 5598.968, 6016.612), stdev = 341.139
  CI (99.9%): [5083.215, 6114.721] (assumes normal distribution)


# Run complete. Total time: 00:03:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt     Score     Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt   10  5598.968 ± 515.753  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Mon Oct 13 10:12:17 AM UTC 2025)
Mon Oct 13 10:12:17 AM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Mon Oct 13 10:12:17 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5988.751 ms/op
# Warmup Iteration   2: 5716.509 ms/op
# Warmup Iteration   3: 5685.340 ms/op
# Warmup Iteration   4: 5959.143 ms/op
# Warmup Iteration   5: 5911.987 ms/op
Iteration   1: 5665.611 ms/op
Iteration   2: 5568.356 ms/op
Iteration   3: 5504.237 ms/op
Iteration   4: 5575.220 ms/op
Iteration   5: 5573.220 ms/op

# Run progress: 50.00% complete, ETA 00:01:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5856.252 ms/op
# Warmup Iteration   2: 5893.023 ms/op
# Warmup Iteration   3: 5884.864 ms/op
# Warmup Iteration   4: 5672.305 ms/op
# Warmup Iteration   5: 5632.981 ms/op
Iteration   1: 5610.486 ms/op
Iteration   2: 5577.448 ms/op
Iteration   3: 5003.449 ms/op
Iteration   4: 5593.717 ms/op
Iteration   5: 6172.400 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  5584.414 ±(99.9%) 420.899 ms/op [Average]
  (min, avg, max) = (5003.449, 5584.414, 6172.400), stdev = 278.399
  CI (99.9%): [5163.516, 6005.313] (assumes normal distribution)


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt     Score     Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt   10  5584.414 ± 420.899  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Mon Oct 13 10:15:21 AM UTC 2025)
Mon Oct 13 10:15:21 AM UTC 2025

Running DijkstraBenchmark benchmark ...
Mon Oct 13 10:15:21 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 19664.704 ms/op
# Warmup Iteration   2: 17131.491 ms/op
# Warmup Iteration   3: 16746.685 ms/op
# Warmup Iteration   4: 16748.501 ms/op
# Warmup Iteration   5: 16760.653 ms/op
Iteration   1: 16760.418 ms/op
Iteration   2: 16764.854 ms/op
Iteration   3: 16745.021 ms/op
Iteration   4: 17789.609 ms/op
Iteration   5: 16762.744 ms/op

# Run progress: 25.00% complete, ETA 00:09:00
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 20066.950 ms/op
# Warmup Iteration   2: 17831.215 ms/op
# Warmup Iteration   3: 16707.127 ms/op
# Warmup Iteration   4: 16702.168 ms/op
# Warmup Iteration   5: 17538.619 ms/op
Iteration   1: 16708.480 ms/op
Iteration   2: 16696.530 ms/op
Iteration   3: 16711.233 ms/op
Iteration   4: 16697.901 ms/op
Iteration   5: 16703.514 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  16834.030 ±(99.9%) 509.380 ms/op [Average]
  (min, avg, max) = (16696.530, 16834.030, 17789.609), stdev = 336.923
  CI (99.9%): [16324.651, 17343.410] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:06:03
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 191.732 ms/op
# Warmup Iteration   2: 188.011 ms/op
# Warmup Iteration   3: 187.682 ms/op
# Warmup Iteration   4: 229.423 ms/op
# Warmup Iteration   5: 187.895 ms/op
Iteration   1: 188.064 ms/op
Iteration   2: 187.982 ms/op
Iteration   3: 187.979 ms/op
Iteration   4: 187.993 ms/op
Iteration   5: 187.922 ms/op

# Run progress: 75.00% complete, ETA 00:02:29
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 181.131 ms/op
# Warmup Iteration   2: 212.145 ms/op
# Warmup Iteration   3: 218.432 ms/op
# Warmup Iteration   4: 175.997 ms/op
# Warmup Iteration   5: 175.872 ms/op
Iteration   1: 175.907 ms/op
Iteration   2: 175.852 ms/op
Iteration   3: 176.022 ms/op
Iteration   4: 175.900 ms/op
Iteration   5: 175.835 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  181.945 ±(99.9%) 9.630 ms/op [Average]
  (min, avg, max) = (175.835, 181.945, 188.064), stdev = 6.369
  CI (99.9%): [172.316, 191.575] (assumes normal distribution)


# Run complete. Total time: 00:08:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score     Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt   10  16834.030 ± 509.380  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt   10    181.945 ±   9.630  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Mon Oct 13 10:24:16 AM UTC 2025)
Mon Oct 13 10:24:16 AM UTC 2025

Running KnapsackBenchmark benchmark ...
Mon Oct 13 10:24:16 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 14147.184 ms/op
# Warmup Iteration   2: 14234.901 ms/op
# Warmup Iteration   3: 936.707 ms/op
# Warmup Iteration   4: 706.134 ms/op
# Warmup Iteration   5: 707.407 ms/op
Iteration   1: 707.192 ms/op
Iteration   2: 834.136 ms/op
Iteration   3: 783.083 ms/op
Iteration   4: 842.551 ms/op
Iteration   5: 717.252 ms/op

# Run progress: 25.00% complete, ETA 00:04:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 14828.446 ms/op
# Warmup Iteration   2: 13713.386 ms/op
# Warmup Iteration   3: 752.441 ms/op
# Warmup Iteration   4: 706.892 ms/op
# Warmup Iteration   5: 724.078 ms/op
Iteration   1: 772.940 ms/op
Iteration   2: 848.967 ms/op
Iteration   3: 714.301 ms/op
Iteration   4: 772.838 ms/op
Iteration   5: 843.944 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  783.720 ±(99.9%) 86.138 ms/op [Average]
  (min, avg, max) = (707.192, 783.720, 848.967), stdev = 56.975
  CI (99.9%): [697.582, 869.859] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:03:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 15.547 ms/op
# Warmup Iteration   2: 13.299 ms/op
# Warmup Iteration   3: 10.822 ms/op
# Warmup Iteration   4: 10.824 ms/op
# Warmup Iteration   5: 10.816 ms/op
Iteration   1: 12.046 ms/op
Iteration   2: 10.820 ms/op
Iteration   3: 10.820 ms/op
Iteration   4: 10.840 ms/op
Iteration   5: 11.607 ms/op

# Run progress: 75.00% complete, ETA 00:01:29
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 14.073 ms/op
# Warmup Iteration   2: 15.881 ms/op
# Warmup Iteration   3: 13.711 ms/op
# Warmup Iteration   4: 13.677 ms/op
# Warmup Iteration   5: 10.988 ms/op
Iteration   1: 12.169 ms/op
Iteration   2: 10.978 ms/op
Iteration   3: 10.977 ms/op
Iteration   4: 10.979 ms/op
Iteration   5: 11.048 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  11.228 ±(99.9%) 0.781 ms/op [Average]
  (min, avg, max) = (10.820, 11.228, 12.169), stdev = 0.517
  CI (99.9%): [10.448, 12.009] (assumes normal distribution)


# Run complete. Total time: 00:05:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt    Score    Error  Units
KnapsackBenchmark.dynamic         50000  avgt   10  783.720 ± 86.138  ms/op
KnapsackBenchmark.greedy          50000  avgt   10   11.228 ±  0.781  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Mon Oct 13 10:30:02 AM UTC 2025)
Mon Oct 13 10:30:02 AM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Mon Oct 13 10:30:03 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 640.001 ms/op
# Warmup Iteration   2: 628.889 ms/op
# Warmup Iteration   3: 531.542 ms/op
# Warmup Iteration   4: 546.516 ms/op
# Warmup Iteration   5: 759.838 ms/op
Iteration   1: 627.460 ms/op
Iteration   2: 617.763 ms/op
Iteration   3: 785.281 ms/op
Iteration   4: 735.914 ms/op
Iteration   5: 520.967 ms/op

# Run progress: 25.00% complete, ETA 00:04:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 529.007 ms/op
# Warmup Iteration   2: 634.161 ms/op
# Warmup Iteration   3: 604.937 ms/op
# Warmup Iteration   4: 756.399 ms/op
# Warmup Iteration   5: 606.168 ms/op
Iteration   1: 549.909 ms/op
Iteration   2: 524.392 ms/op
Iteration   3: 575.807 ms/op
Iteration   4: 550.695 ms/op
Iteration   5: 616.558 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  610.475 ±(99.9%) 133.843 ms/op [Average]
  (min, avg, max) = (520.967, 610.475, 785.281), stdev = 88.529
  CI (99.9%): [476.631, 744.318] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:02:45
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 329.184 ms/op
# Warmup Iteration   2: 267.913 ms/op
# Warmup Iteration   3: 267.123 ms/op
# Warmup Iteration   4: 267.022 ms/op
# Warmup Iteration   5: 316.503 ms/op
Iteration   1: 267.123 ms/op
Iteration   2: 267.126 ms/op
Iteration   3: 267.127 ms/op
Iteration   4: 267.142 ms/op
Iteration   5: 267.089 ms/op

# Run progress: 75.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 274.219 ms/op
# Warmup Iteration   2: 319.394 ms/op
# Warmup Iteration   3: 377.653 ms/op
# Warmup Iteration   4: 269.980 ms/op
# Warmup Iteration   5: 267.143 ms/op
Iteration   1: 289.151 ms/op
Iteration   2: 267.473 ms/op
Iteration   3: 292.961 ms/op
Iteration   4: 267.114 ms/op
Iteration   5: 267.130 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  271.943 ±(99.9%) 15.290 ms/op [Average]
  (min, avg, max) = (267.089, 271.943, 292.961), stdev = 10.114
  CI (99.9%): [256.653, 287.234] (assumes normal distribution)


# Run complete. Total time: 00:05:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt    Score     Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt   10  610.475 ± 133.843  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt   10  271.943 ±  15.290  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Mon Oct 13 10:35:31 AM UTC 2025)
Mon Oct 13 10:35:31 AM UTC 2025

Running PrimesBenchmark benchmark ...
Mon Oct 13 10:35:32 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ce/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 48.201 ms/op
# Warmup Iteration   2: 36.517 ms/op
# Warmup Iteration   3: 36.052 ms/op
# Warmup Iteration   4: 36.019 ms/op
# Warmup Iteration   5: 55.243 ms/op
Iteration   1: 36.158 ms/op
Iteration   2: 36.059 ms/op
Iteration   3: 36.042 ms/op
Iteration   4: 43.771 ms/op
Iteration   5: 40.491 ms/op

# Run progress: 12.50% complete, ETA 00:08:52
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 48.388 ms/op
# Warmup Iteration   2: 53.867 ms/op
# Warmup Iteration   3: 40.114 ms/op
# Warmup Iteration   4: 36.649 ms/op
# Warmup Iteration   5: 36.650 ms/op
Iteration   1: 36.637 ms/op
Iteration   2: 36.652 ms/op
Iteration   3: 36.638 ms/op
Iteration   4: 38.942 ms/op
Iteration   5: 45.327 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  38.672 ±(99.9%) 5.191 ms/op [Average]
  (min, avg, max) = (36.042, 38.672, 45.327), stdev = 3.433
  CI (99.9%): [33.481, 43.862] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:07:36
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 4204.554 ms/op
# Warmup Iteration   2: 3869.205 ms/op
# Warmup Iteration   3: 3868.006 ms/op
# Warmup Iteration   4: 3867.561 ms/op
# Warmup Iteration   5: 4307.986 ms/op
Iteration   1: 3866.416 ms/op
Iteration   2: 3866.321 ms/op
Iteration   3: 3866.155 ms/op
Iteration   4: 3865.997 ms/op
Iteration   5: 3866.362 ms/op

# Run progress: 37.50% complete, ETA 00:06:59
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 4364.364 ms/op
# Warmup Iteration   2: 4260.392 ms/op
# Warmup Iteration   3: 4282.660 ms/op
# Warmup Iteration   4: 3866.899 ms/op
# Warmup Iteration   5: 3866.889 ms/op
Iteration   1: 3867.358 ms/op
Iteration   2: 3866.947 ms/op
Iteration   3: 4167.521 ms/op
Iteration   4: 3866.858 ms/op
Iteration   5: 3867.302 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  3896.724 ±(99.9%) 143.853 ms/op [Average]
  (min, avg, max) = (3865.997, 3896.724, 4167.521), stdev = 95.150
  CI (99.9%): [3752.871, 4040.577] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:05:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5047.094 ms/op
# Warmup Iteration   2: 5443.060 ms/op
# Warmup Iteration   3: 4491.266 ms/op
# Warmup Iteration   4: 4491.285 ms/op
# Warmup Iteration   5: 4493.327 ms/op
Iteration   1: 4491.313 ms/op
Iteration   2: 4492.495 ms/op
Iteration   3: 4491.223 ms/op
Iteration   4: 4492.292 ms/op
Iteration   5: 4492.404 ms/op

# Run progress: 62.50% complete, ETA 00:04:34
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5389.675 ms/op
# Warmup Iteration   2: 4374.919 ms/op
# Warmup Iteration   3: 4347.615 ms/op
# Warmup Iteration   4: 4346.497 ms/op
# Warmup Iteration   5: 4346.810 ms/op
Iteration   1: 4346.770 ms/op
Iteration   2: 4346.662 ms/op
Iteration   3: 4346.921 ms/op
Iteration   4: 4346.576 ms/op
Iteration   5: 4346.581 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  4419.324 ±(99.9%) 115.734 ms/op [Average]
  (min, avg, max) = (4346.576, 4419.324, 4492.495), stdev = 76.551
  CI (99.9%): [4303.589, 4535.058] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-jvmci-23.1-b30
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.2-graalce/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:03:08
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5009.921 ms/op
# Warmup Iteration   2: 5264.037 ms/op
# Warmup Iteration   3: 5147.658 ms/op
# Warmup Iteration   4: 4316.790 ms/op
# Warmup Iteration   5: 4318.176 ms/op
Iteration   1: 4316.787 ms/op
Iteration   2: 4316.882 ms/op
Iteration   3: 4316.693 ms/op
Iteration   4: 4316.837 ms/op
Iteration   5: 4317.347 ms/op

# Run progress: 87.50% complete, ETA 00:01:34
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5734.623 ms/op
# Warmup Iteration   2: 4315.883 ms/op
# Warmup Iteration   3: 4314.674 ms/op
# Warmup Iteration   4: 4315.095 ms/op
# Warmup Iteration   5: 4314.595 ms/op
Iteration   1: 4314.645 ms/op
Iteration   2: 4314.634 ms/op
Iteration   3: 4314.634 ms/op
Iteration   4: 4314.676 ms/op
Iteration   5: 4314.546 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  4315.768 ±(99.9%) 1.837 ms/op [Average]
  (min, avg, max) = (4314.546, 4315.768, 4317.347), stdev = 1.215
  CI (99.9%): [4313.931, 4317.605] (assumes normal distribution)


# Run complete. Total time: 00:12:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score     Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt   10    38.672 ±   5.191  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt   10  3896.724 ± 143.853  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt   10  4419.324 ± 115.734  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt   10  4315.768 ±   1.837  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ce/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Mon Oct 13 10:48:21 AM UTC 2025)
Mon Oct 13 10:48:21 AM UTC 2025

Finished GraalVM CE test suite!

Elapsed: 64 minutes and 42 seconds.

+=============================================
| Running steps 5 to 7 with graalvm-ee
+=============================================
| Mon Oct 13 10:48:21 AM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /home/grenoux/.sdkman/candidates/java/21.0.8-graal
JDK version: 21
JVM name: GraalVM Oracle
JVM identifier: graalvm-ee

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk21.json
JMH output folder: results/jdk-21/x86_64/jmh/graalvm-ee

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running GraalVM Oracle test suite ...
Creating folder: 'results/jdk-21/x86_64/jmh/graalvm-ee' ...

Running InfrastructureBaselineBenchmark benchmark ...
Mon Oct 13 10:48:22 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.InfrastructureBaselineBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/InfrastructureBaselineBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline

# Run progress: 0.00% complete, ETA 00:17:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.478 ns/op
# Warmup Iteration   2: 0.529 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.469 ns/op
Iteration   5: 0.469 ns/op

# Run progress: 7.14% complete, ETA 00:16:25
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.497 ns/op
# Warmup Iteration   2: 0.535 ns/op
# Warmup Iteration   3: 0.530 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline":
  0.438 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (0.430, 0.438, 0.469), stdev = 0.016
  CI (99.9%): [0.413, 0.462] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank

# Run progress: 14.29% complete, ETA 00:15:09
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.474 ns/op
# Warmup Iteration   2: 0.436 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.511 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.467 ns/op
Iteration   4: 0.467 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 21.43% complete, ETA 00:13:53
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.497 ns/op
# Warmup Iteration   2: 0.534 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.533 ns/op
# Warmup Iteration   5: 0.530 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.438 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank":
  0.438 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (0.430, 0.438, 0.467), stdev = 0.015
  CI (99.9%): [0.415, 0.461] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline

# Run progress: 28.57% complete, ETA 00:12:37
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.285 ns/op
# Warmup Iteration   2: 2.565 ns/op
# Warmup Iteration   3: 1.912 ns/op
# Warmup Iteration   4: 2.273 ns/op
# Warmup Iteration   5: 1.912 ns/op
Iteration   1: 1.938 ns/op
Iteration   2: 1.956 ns/op
Iteration   3: 1.912 ns/op
Iteration   4: 1.912 ns/op
Iteration   5: 1.912 ns/op

# Run progress: 35.71% complete, ETA 00:11:21
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.070 ns/op
# Warmup Iteration   2: 1.917 ns/op
# Warmup Iteration   3: 1.938 ns/op
# Warmup Iteration   4: 1.912 ns/op
# Warmup Iteration   5: 1.912 ns/op
Iteration   1: 1.912 ns/op
Iteration   2: 1.912 ns/op
Iteration   3: 1.912 ns/op
Iteration   4: 1.912 ns/op
Iteration   5: 1.912 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline":
  1.919 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (1.912, 1.919, 1.956), stdev = 0.015
  CI (99.9%): [1.896, 1.942] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline

# Run progress: 42.86% complete, ETA 00:10:05
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.407 ns/op
# Warmup Iteration   2: 0.435 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 50.00% complete, ETA 00:08:50
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.423 ns/op
# Warmup Iteration   2: 0.437 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.438 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline":
  0.431 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.430, 0.431, 0.438), stdev = 0.003
  CI (99.9%): [0.427, 0.435] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume

# Run progress: 57.14% complete, ETA 00:07:34
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.623 ns/op
# Warmup Iteration   2: 0.711 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.573 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.633 ns/op

# Run progress: 64.29% complete, ETA 00:06:18
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.598 ns/op
# Warmup Iteration   2: 0.672 ns/op
# Warmup Iteration   3: 0.673 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.573 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume":
  0.579 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (0.573, 0.579, 0.633), stdev = 0.019
  CI (99.9%): [0.550, 0.607] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return

# Run progress: 71.43% complete, ETA 00:05:02
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.586 ns/op
# Warmup Iteration   2: 0.435 ns/op
# Warmup Iteration   3: 0.430 ns/op
# Warmup Iteration   4: 0.430 ns/op
# Warmup Iteration   5: 0.430 ns/op
Iteration   1: 0.430 ns/op
Iteration   2: 0.430 ns/op
Iteration   3: 0.430 ns/op
Iteration   4: 0.430 ns/op
Iteration   5: 0.430 ns/op

# Run progress: 78.57% complete, ETA 00:03:47
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 0.483 ns/op
# Warmup Iteration   2: 0.561 ns/op
# Warmup Iteration   3: 0.557 ns/op
# Warmup Iteration   4: 0.465 ns/op
# Warmup Iteration   5: 0.465 ns/op
Iteration   1: 0.465 ns/op
Iteration   2: 0.507 ns/op
Iteration   3: 0.465 ns/op
Iteration   4: 0.465 ns/op
Iteration   5: 0.465 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return":
  0.452 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (0.430, 0.452, 0.507), stdev = 0.026
  CI (99.9%): [0.412, 0.491] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink

# Run progress: 85.71% complete, ETA 00:02:31
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.831 ns/op
# Warmup Iteration   2: 2.860 ns/op
# Warmup Iteration   3: 2.014 ns/op
# Warmup Iteration   4: 2.015 ns/op
# Warmup Iteration   5: 2.014 ns/op
Iteration   1: 2.014 ns/op
Iteration   2: 2.015 ns/op
Iteration   3: 2.237 ns/op
Iteration   4: 2.014 ns/op
Iteration   5: 2.078 ns/op

# Run progress: 92.86% complete, ETA 00:01:15
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 2.772 ns/op
# Warmup Iteration   2: 2.295 ns/op
# Warmup Iteration   3: 2.497 ns/op
# Warmup Iteration   4: 2.017 ns/op
# Warmup Iteration   5: 2.018 ns/op
Iteration   1: 2.018 ns/op
Iteration   2: 2.017 ns/op
Iteration   3: 2.017 ns/op
Iteration   4: 2.017 ns/op
Iteration   5: 2.017 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink":
  2.044 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (2.014, 2.044, 2.237), stdev = 0.070
  CI (99.9%): [1.938, 2.151] (assumes normal distribution)


# Run complete. Total time: 00:17:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt  Score   Error  Units
InfrastructureBaselineBenchmark.method_baseline        avgt   10  0.438 ± 0.025  ns/op
InfrastructureBaselineBenchmark.method_blank           avgt   10  0.438 ± 0.023  ns/op
InfrastructureBaselineBenchmark.method_dont_inline     avgt   10  1.919 ± 0.023  ns/op
InfrastructureBaselineBenchmark.method_inline          avgt   10  0.431 ± 0.004  ns/op
InfrastructureBaselineBenchmark.obj_blackhole_consume  avgt   10  0.579 ± 0.029  ns/op
InfrastructureBaselineBenchmark.obj_return             avgt   10  0.452 ± 0.040  ns/op
InfrastructureBaselineBenchmark.obj_sink               avgt   10  2.044 ± 0.106  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/InfrastructureBaselineBenchmark.scala.csv

Finished InfrastructureBaselineBenchmark benchmark (Mon Oct 13 11:06:03 AM UTC 2025)
Mon Oct 13 11:06:03 AM UTC 2025

Running MutableSetBenchmark benchmark ...
Mon Oct 13 11:06:03 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.MutableSetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/MutableSetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 8020.636 ns/op
# Warmup Iteration   2: 7966.455 ns/op
# Warmup Iteration   3: 5076.119 ns/op
# Warmup Iteration   4: 7210.690 ns/op
# Warmup Iteration   5: 6515.383 ns/op
Iteration   1: 5095.774 ns/op
Iteration   2: 5091.776 ns/op
Iteration   3: 5770.111 ns/op
Iteration   4: 5606.021 ns/op
Iteration   5: 7900.074 ns/op

# Run progress: 50.00% complete, ETA 00:01:15
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6242.112 ns/op
# Warmup Iteration   2: 7623.016 ns/op
# Warmup Iteration   3: 5939.195 ns/op
# Warmup Iteration   4: 4998.716 ns/op
# Warmup Iteration   5: 6240.981 ns/op
Iteration   1: 5916.458 ns/op
Iteration   2: 4984.229 ns/op
Iteration   3: 4992.172 ns/op
Iteration   4: 4982.342 ns/op
Iteration   5: 4983.708 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap":
  5532.266 ±(99.9%) 1370.534 ns/op [Average]
  (min, avg, max) = (4982.342, 5532.266, 7900.074), stdev = 906.523
  CI (99.9%): [4161.732, 6902.801] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    (size)  Mode  Cnt     Score      Error  Units
MutableSetBenchmark.flatMap    1000  avgt   10  5532.266 ± 1370.534  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/MutableSetBenchmark.scala.csv

Finished MutableSetBenchmark benchmark (Mon Oct 13 11:08:36 AM UTC 2025)
Mon Oct 13 11:08:36 AM UTC 2025

Running SetBenchmark benchmark ...
Mon Oct 13 11:08:36 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 11622.647 ns/op
# Warmup Iteration   2: 7798.792 ns/op
# Warmup Iteration   3: 7619.906 ns/op
# Warmup Iteration   4: 7619.945 ns/op
# Warmup Iteration   5: 7619.066 ns/op
Iteration   1: 7610.975 ns/op
Iteration   2: 8340.710 ns/op
Iteration   3: 7613.077 ns/op
Iteration   4: 9063.924 ns/op
Iteration   5: 9394.531 ns/op

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 9857.409 ns/op
# Warmup Iteration   2: 12641.035 ns/op
# Warmup Iteration   3: 9527.539 ns/op
# Warmup Iteration   4: 9263.568 ns/op
# Warmup Iteration   5: 9508.801 ns/op
Iteration   1: 7634.254 ns/op
Iteration   2: 7626.706 ns/op
Iteration   3: 7631.200 ns/op
Iteration   4: 7634.887 ns/op
Iteration   5: 7621.476 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  8017.174 ±(99.9%) 1029.908 ns/op [Average]
  (min, avg, max) = (7610.975, 8017.174, 9394.531), stdev = 681.221
  CI (99.9%): [6987.266, 9047.082] (assumes normal distribution)


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark             (size)  Mode  Cnt     Score      Error  Units
SetBenchmark.flatMap    1000  avgt   10  8017.174 ± 1029.908  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Mon Oct 13 11:11:09 AM UTC 2025)
Mon Oct 13 11:11:09 AM UTC 2025

Running VectorBenchmark benchmark ...
Mon Oct 13 11:11:09 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 37634.057 ns/op
# Warmup Iteration   2: 20426.431 ns/op
# Warmup Iteration   3: 21600.203 ns/op
# Warmup Iteration   4: 21559.421 ns/op
# Warmup Iteration   5: 26011.644 ns/op
Iteration   1: 23572.532 ns/op
Iteration   2: 21501.571 ns/op
Iteration   3: 27135.392 ns/op
Iteration   4: 26379.217 ns/op
Iteration   5: 25128.743 ns/op

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 33591.748 ns/op
# Warmup Iteration   2: 20444.605 ns/op
# Warmup Iteration   3: 29624.187 ns/op
# Warmup Iteration   4: 28461.822 ns/op
# Warmup Iteration   5: 26235.989 ns/op
Iteration   1: 23361.441 ns/op
Iteration   2: 23568.405 ns/op
Iteration   3: 21366.084 ns/op
Iteration   4: 25199.007 ns/op
Iteration   5: 28519.131 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  24573.152 ±(99.9%) 3538.341 ns/op [Average]
  (min, avg, max) = (21366.084, 24573.152, 28519.131), stdev = 2340.393
  CI (99.9%): [21034.812, 28111.493] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score      Error  Units
VectorBenchmark.flatMap    1000  avgt   10  24573.152 ± 3538.341  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Mon Oct 13 11:13:42 AM UTC 2025)
Mon Oct 13 11:13:42 AM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Mon Oct 13 11:13:42 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6765.295 ms/op
# Warmup Iteration   2: 6798.901 ms/op
# Warmup Iteration   3: 5190.996 ms/op
# Warmup Iteration   4: 5658.484 ms/op
# Warmup Iteration   5: 5546.786 ms/op
Iteration   1: 5755.220 ms/op
Iteration   2: 5565.109 ms/op
Iteration   3: 5219.086 ms/op
Iteration   4: 5541.191 ms/op
Iteration   5: 5573.056 ms/op

# Run progress: 50.00% complete, ETA 00:01:49
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6588.690 ms/op
# Warmup Iteration   2: 5583.820 ms/op
# Warmup Iteration   3: 5089.238 ms/op
# Warmup Iteration   4: 5555.819 ms/op
# Warmup Iteration   5: 5550.272 ms/op
Iteration   1: 5568.003 ms/op
Iteration   2: 5190.586 ms/op
Iteration   3: 5595.268 ms/op
Iteration   4: 5541.321 ms/op
Iteration   5: 6118.880 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  5566.772 ±(99.9%) 391.949 ms/op [Average]
  (min, avg, max) = (5190.586, 5566.772, 6118.880), stdev = 259.250
  CI (99.9%): [5174.823, 5958.721] (assumes normal distribution)


# Run complete. Total time: 00:03:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt     Score     Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt   10  5566.772 ± 391.949  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Mon Oct 13 11:17:19 AM UTC 2025)
Mon Oct 13 11:17:19 AM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Mon Oct 13 11:17:19 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6208.363 ms/op
# Warmup Iteration   2: 5196.239 ms/op
# Warmup Iteration   3: 5202.208 ms/op
# Warmup Iteration   4: 6665.042 ms/op
# Warmup Iteration   5: 5369.732 ms/op
Iteration   1: 4864.522 ms/op
Iteration   2: 5970.966 ms/op
Iteration   3: 5568.445 ms/op
Iteration   4: 5513.743 ms/op
Iteration   5: 5522.306 ms/op

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 7732.703 ms/op
# Warmup Iteration   2: 4454.012 ms/op
# Warmup Iteration   3: 5619.597 ms/op
# Warmup Iteration   4: 5583.614 ms/op
# Warmup Iteration   5: 5611.387 ms/op
Iteration   1: 5546.177 ms/op
Iteration   2: 6169.886 ms/op
Iteration   3: 5549.210 ms/op
Iteration   4: 5570.622 ms/op
Iteration   5: 5585.281 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  5586.116 ±(99.9%) 509.569 ms/op [Average]
  (min, avg, max) = (4864.522, 5586.116, 6169.886), stdev = 337.049
  CI (99.9%): [5076.546, 6095.685] (assumes normal distribution)


# Run complete. Total time: 00:03:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt     Score     Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt   10  5586.116 ± 509.569  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Mon Oct 13 11:20:38 AM UTC 2025)
Mon Oct 13 11:20:38 AM UTC 2025

Running DijkstraBenchmark benchmark ...
Mon Oct 13 11:20:38 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 14305.288 ms/op
# Warmup Iteration   2: 13681.377 ms/op
# Warmup Iteration   3: 13363.370 ms/op
# Warmup Iteration   4: 13363.609 ms/op
# Warmup Iteration   5: 13372.116 ms/op
Iteration   1: 13373.077 ms/op
Iteration   2: 13366.012 ms/op
Iteration   3: 13369.909 ms/op
Iteration   4: 13367.904 ms/op
Iteration   5: 13367.643 ms/op

# Run progress: 25.00% complete, ETA 00:07:11
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 14311.592 ms/op
# Warmup Iteration   2: 13694.337 ms/op
# Warmup Iteration   3: 13454.257 ms/op
# Warmup Iteration   4: 13451.828 ms/op
# Warmup Iteration   5: 14449.410 ms/op
Iteration   1: 13429.436 ms/op
Iteration   2: 13428.888 ms/op
Iteration   3: 13423.032 ms/op
Iteration   4: 13422.422 ms/op
Iteration   5: 13420.996 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  13396.932 ±(99.9%) 44.915 ms/op [Average]
  (min, avg, max) = (13366.012, 13396.932, 13429.436), stdev = 29.709
  CI (99.9%): [13352.017, 13441.847] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:04:49
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 107.434 ms/op
# Warmup Iteration   2: 104.257 ms/op
# Warmup Iteration   3: 104.170 ms/op
# Warmup Iteration   4: 103.951 ms/op
# Warmup Iteration   5: 104.083 ms/op
Iteration   1: 104.220 ms/op
Iteration   2: 104.245 ms/op
Iteration   3: 104.214 ms/op
Iteration   4: 104.265 ms/op
Iteration   5: 104.263 ms/op

# Run progress: 75.00% complete, ETA 00:02:04
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 107.152 ms/op
# Warmup Iteration   2: 104.168 ms/op
# Warmup Iteration   3: 125.788 ms/op
# Warmup Iteration   4: 125.339 ms/op
# Warmup Iteration   5: 104.222 ms/op
Iteration   1: 104.029 ms/op
Iteration   2: 104.263 ms/op
Iteration   3: 112.654 ms/op
Iteration   4: 104.220 ms/op
Iteration   5: 104.266 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  105.064 ±(99.9%) 4.033 ms/op [Average]
  (min, avg, max) = (104.029, 105.064, 112.654), stdev = 2.668
  CI (99.9%): [101.031, 109.097] (assumes normal distribution)


# Run complete. Total time: 00:07:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score    Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt   10  13396.932 ± 44.915  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt   10    105.064 ±  4.033  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Mon Oct 13 11:28:20 AM UTC 2025)
Mon Oct 13 11:28:20 AM UTC 2025

Running KnapsackBenchmark benchmark ...
Mon Oct 13 11:28:20 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 13898.050 ms/op
# Warmup Iteration   2: 15571.668 ms/op
# Warmup Iteration   3: 14408.860 ms/op
# Warmup Iteration   4: 478.941 ms/op
# Warmup Iteration   5: 448.088 ms/op
Iteration   1: 448.657 ms/op
Iteration   2: 515.540 ms/op
Iteration   3: 534.829 ms/op
Iteration   4: 493.298 ms/op
Iteration   5: 450.583 ms/op

# Run progress: 25.00% complete, ETA 00:05:20
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 13520.040 ms/op
# Warmup Iteration   2: 13949.672 ms/op
# Warmup Iteration   3: 12987.775 ms/op
# Warmup Iteration   4: 12658.246 ms/op
# Warmup Iteration   5: 474.891 ms/op
Iteration   1: 448.194 ms/op
Iteration   2: 449.348 ms/op
Iteration   3: 449.392 ms/op
Iteration   4: 634.490 ms/op
Iteration   5: 557.907 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  498.224 ±(99.9%) 95.349 ms/op [Average]
  (min, avg, max) = (448.194, 498.224, 634.490), stdev = 63.067
  CI (99.9%): [402.875, 593.572] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:03:37
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 19.410 ms/op
# Warmup Iteration   2: 13.334 ms/op
# Warmup Iteration   3: 10.564 ms/op
# Warmup Iteration   4: 10.576 ms/op
# Warmup Iteration   5: 10.582 ms/op
Iteration   1: 10.581 ms/op
Iteration   2: 10.581 ms/op
Iteration   3: 10.579 ms/op
Iteration   4: 10.526 ms/op
Iteration   5: 10.453 ms/op

# Run progress: 75.00% complete, ETA 00:01:37
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 19.103 ms/op
# Warmup Iteration   2: 16.207 ms/op
# Warmup Iteration   3: 10.766 ms/op
# Warmup Iteration   4: 12.617 ms/op
# Warmup Iteration   5: 10.324 ms/op
Iteration   1: 10.324 ms/op
Iteration   2: 10.324 ms/op
Iteration   3: 11.322 ms/op
Iteration   4: 10.316 ms/op
Iteration   5: 10.327 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  10.533 ±(99.9%) 0.454 ms/op [Average]
  (min, avg, max) = (10.316, 10.533, 11.322), stdev = 0.300
  CI (99.9%): [10.079, 10.988] (assumes normal distribution)


# Run complete. Total time: 00:06:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt    Score    Error  Units
KnapsackBenchmark.dynamic         50000  avgt   10  498.224 ± 95.349  ms/op
KnapsackBenchmark.greedy          50000  avgt   10   10.533 ±  0.454  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Mon Oct 13 11:34:30 AM UTC 2025)
Mon Oct 13 11:34:30 AM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Mon Oct 13 11:34:30 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 741.689 ms/op
# Warmup Iteration   2: 510.719 ms/op
# Warmup Iteration   3: 502.481 ms/op
# Warmup Iteration   4: 502.248 ms/op
# Warmup Iteration   5: 502.187 ms/op
Iteration   1: 502.213 ms/op
Iteration   2: 502.305 ms/op
Iteration   3: 502.267 ms/op
Iteration   4: 520.509 ms/op
Iteration   5: 533.680 ms/op

# Run progress: 25.00% complete, ETA 00:04:01
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 780.565 ms/op
# Warmup Iteration   2: 516.101 ms/op
# Warmup Iteration   3: 500.457 ms/op
# Warmup Iteration   4: 500.415 ms/op
# Warmup Iteration   5: 542.656 ms/op
Iteration   1: 517.862 ms/op
Iteration   2: 503.993 ms/op
Iteration   3: 517.766 ms/op
Iteration   4: 500.374 ms/op
Iteration   5: 500.364 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  510.133 ±(99.9%) 17.417 ms/op [Average]
  (min, avg, max) = (500.364, 510.133, 533.680), stdev = 11.520
  CI (99.9%): [492.717, 527.550] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:02:41
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 286.678 ms/op
# Warmup Iteration   2: 282.015 ms/op
# Warmup Iteration   3: 280.380 ms/op
# Warmup Iteration   4: 280.337 ms/op
# Warmup Iteration   5: 280.314 ms/op
Iteration   1: 280.325 ms/op
Iteration   2: 280.341 ms/op
Iteration   3: 280.318 ms/op
Iteration   4: 280.364 ms/op
Iteration   5: 280.337 ms/op

# Run progress: 75.00% complete, ETA 00:01:20
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 284.308 ms/op
# Warmup Iteration   2: 339.584 ms/op
# Warmup Iteration   3: 335.472 ms/op
# Warmup Iteration   4: 278.751 ms/op
# Warmup Iteration   5: 278.734 ms/op
Iteration   1: 278.689 ms/op
Iteration   2: 278.680 ms/op
Iteration   3: 303.634 ms/op
Iteration   4: 280.081 ms/op
Iteration   5: 280.084 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  282.285 ±(99.9%) 11.385 ms/op [Average]
  (min, avg, max) = (278.680, 282.285, 303.634), stdev = 7.531
  CI (99.9%): [270.900, 293.670] (assumes normal distribution)


# Run complete. Total time: 00:05:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt    Score    Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt   10  510.133 ± 17.417  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt   10  282.285 ± 11.385  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Mon Oct 13 11:39:54 AM UTC 2025)
Mon Oct 13 11:39:54 AM UTC 2025

Running PrimesBenchmark benchmark ...
Mon Oct 13 11:39:55 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/graalvm-ee/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 39.809 ms/op
# Warmup Iteration   2: 33.291 ms/op
# Warmup Iteration   3: 32.806 ms/op
# Warmup Iteration   4: 32.803 ms/op
# Warmup Iteration   5: 32.775 ms/op
Iteration   1: 35.659 ms/op
Iteration   2: 34.977 ms/op
Iteration   3: 34.170 ms/op
Iteration   4: 32.828 ms/op
Iteration   5: 32.815 ms/op

# Run progress: 12.50% complete, ETA 00:08:53
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 51.327 ms/op
# Warmup Iteration   2: 41.195 ms/op
# Warmup Iteration   3: 33.607 ms/op
# Warmup Iteration   4: 32.749 ms/op
# Warmup Iteration   5: 51.823 ms/op
Iteration   1: 40.861 ms/op
Iteration   2: 32.770 ms/op
Iteration   3: 40.513 ms/op
Iteration   4: 32.768 ms/op
Iteration   5: 40.553 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  35.791 ±(99.9%) 5.283 ms/op [Average]
  (min, avg, max) = (32.768, 35.791, 40.861), stdev = 3.494
  CI (99.9%): [30.509, 41.074] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:07:36
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 3983.885 ms/op
# Warmup Iteration   2: 3756.768 ms/op
# Warmup Iteration   3: 4168.599 ms/op
# Warmup Iteration   4: 3757.363 ms/op
# Warmup Iteration   5: 3757.294 ms/op
Iteration   1: 3757.507 ms/op
Iteration   2: 3757.479 ms/op
Iteration   3: 3757.572 ms/op
Iteration   4: 4410.492 ms/op
Iteration   5: 4048.682 ms/op

# Run progress: 37.50% complete, ETA 00:06:58
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 4091.818 ms/op
# Warmup Iteration   2: 4182.710 ms/op
# Warmup Iteration   3: 3841.446 ms/op
# Warmup Iteration   4: 4157.509 ms/op
# Warmup Iteration   5: 3757.262 ms/op
Iteration   1: 3757.084 ms/op
Iteration   2: 4035.056 ms/op
Iteration   3: 3757.800 ms/op
Iteration   4: 3758.009 ms/op
Iteration   5: 3757.961 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  3879.764 ±(99.9%) 333.805 ms/op [Average]
  (min, avg, max) = (3757.084, 3879.764, 4410.492), stdev = 220.791
  CI (99.9%): [3545.960, 4213.569] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:05:49
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 6138.558 ms/op
# Warmup Iteration   2: 3657.518 ms/op
# Warmup Iteration   3: 3458.399 ms/op
# Warmup Iteration   4: 3458.443 ms/op
# Warmup Iteration   5: 3458.358 ms/op
Iteration   1: 3458.317 ms/op
Iteration   2: 3458.460 ms/op
Iteration   3: 3458.431 ms/op
Iteration   4: 3458.393 ms/op
Iteration   5: 3458.260 ms/op

# Run progress: 62.50% complete, ETA 00:04:21
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 5275.908 ms/op
# Warmup Iteration   2: 4711.735 ms/op
# Warmup Iteration   3: 4673.865 ms/op
# Warmup Iteration   4: 4674.001 ms/op
# Warmup Iteration   5: 4673.986 ms/op
Iteration   1: 4674.014 ms/op
Iteration   2: 4673.957 ms/op
Iteration   3: 5091.510 ms/op
Iteration   4: 4673.070 ms/op
Iteration   5: 4673.056 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  4107.747 ±(99.9%) 1051.879 ms/op [Average]
  (min, avg, max) = (3458.260, 4107.747, 5091.510), stdev = 695.753
  CI (99.9%): [3055.868, 5159.626] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Java HotSpot(TM) 64-Bit Server VM, 21.0.8+12-LTS-jvmci-23.1-b72
# VM invoker: /home/grenoux/.sdkman/candidates/java/21.0.8-graal/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:03:01
# Fork: 1 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 4363.340 ms/op
# Warmup Iteration   2: 5712.346 ms/op
# Warmup Iteration   3: 4892.863 ms/op
# Warmup Iteration   4: 4893.069 ms/op
# Warmup Iteration   5: 4893.123 ms/op
Iteration   1: 4892.795 ms/op
Iteration   2: 4892.885 ms/op
Iteration   3: 4893.166 ms/op
Iteration   4: 4892.844 ms/op
Iteration   5: 4892.857 ms/op

# Run progress: 87.50% complete, ETA 00:01:34
# Fork: 2 of 2
Java HotSpot(TM) 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: 4349.425 ms/op
# Warmup Iteration   2: 5347.233 ms/op
# Warmup Iteration   3: 4510.417 ms/op
# Warmup Iteration   4: 4510.412 ms/op
# Warmup Iteration   5: 4510.427 ms/op
Iteration   1: 4510.429 ms/op
Iteration   2: 4510.402 ms/op
Iteration   3: 4510.346 ms/op
Iteration   4: 4510.411 ms/op
Iteration   5: 4510.526 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  4701.666 ±(99.9%) 304.773 ms/op [Average]
  (min, avg, max) = (4510.346, 4701.666, 4893.166), stdev = 201.588
  CI (99.9%): [4396.894, 5006.439] (assumes normal distribution)


# Run complete. Total time: 00:12:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score      Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt   10    35.791 ±    5.283  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt   10  3879.764 ±  333.805  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt   10  4107.747 ± 1051.879  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt   10  4701.666 ±  304.773  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/graalvm-ee/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Mon Oct 13 11:52:49 AM UTC 2025)
Mon Oct 13 11:52:49 AM UTC 2025

Finished GraalVM Oracle test suite!

Elapsed: 64 minutes and 27 seconds.

+=============================================
| Running steps 5 to 7 with azul-prime-vm
+=============================================
| Mon Oct 13 11:52:49 AM UTC 2025
+=============================================

+=========================+
| [5/7] JVM Configuration |
+=========================+

+---------------------------+
| JVM Environment Variables |
+---------------------------+
Java home: /usr/lib/jvm/zing-jdk21
JDK version: 21
JVM name: Azul Prime VM
JVM identifier: azul-prime-vm

+=========================+
| [6/7] JMH Configuration |
+=========================+
JMH benchmarks suite configuration file: settings/benchmarks-suite-jdk21.json
JMH output folder: results/jdk-21/x86_64/jmh/azul-prime-vm

+===========================+
| [7/7] Run benchmark suite |
+===========================+
Running Azul Prime VM test suite ...
Creating folder: 'results/jdk-21/x86_64/jmh/azul-prime-vm' ...

Running InfrastructureBaselineBenchmark benchmark ...
Mon Oct 13 11:52:52 AM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.InfrastructureBaselineBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/InfrastructureBaselineBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline

# Run progress: 0.00% complete, ETA 00:17:30
# Fork: 1 of 2
# Warmup Iteration   1: 0.403 ns/op
# Warmup Iteration   2: 0.485 ns/op
# Warmup Iteration   3: 0.474 ns/op
# Warmup Iteration   4: 0.379 ns/op
# Warmup Iteration   5: 0.476 ns/op
Iteration   1: 0.380 ns/op
Iteration   2: 0.378 ns/op
Iteration   3: 0.379 ns/op
Iteration   4: 0.378 ns/op
Iteration   5: 0.379 ns/op

# Run progress: 7.14% complete, ETA 00:17:31
# Fork: 2 of 2
# Warmup Iteration   1: 0.433 ns/op
# Warmup Iteration   2: 0.390 ns/op
# Warmup Iteration   3: 0.381 ns/op
# Warmup Iteration   4: 0.380 ns/op
# Warmup Iteration   5: 0.380 ns/op
Iteration   1: 0.381 ns/op
Iteration   2: 0.417 ns/op
Iteration   3: 0.380 ns/op
Iteration   4: 0.380 ns/op
Iteration   5: 0.380 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_baseline":
  0.383 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (0.378, 0.383, 0.417), stdev = 0.012
  CI (99.9%): [0.365, 0.401] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank

# Run progress: 14.29% complete, ETA 00:16:13
# Fork: 1 of 2
# Warmup Iteration   1: 0.436 ns/op
# Warmup Iteration   2: 0.391 ns/op
# Warmup Iteration   3: 0.380 ns/op
# Warmup Iteration   4: 0.381 ns/op
# Warmup Iteration   5: 0.380 ns/op
Iteration   1: 0.381 ns/op
Iteration   2: 0.381 ns/op
Iteration   3: 0.380 ns/op
Iteration   4: 0.381 ns/op
Iteration   5: 0.381 ns/op

# Run progress: 21.43% complete, ETA 00:14:51
# Fork: 2 of 2
# Warmup Iteration   1: 0.404 ns/op
# Warmup Iteration   2: 0.391 ns/op
# Warmup Iteration   3: 0.386 ns/op
# Warmup Iteration   4: 0.386 ns/op
# Warmup Iteration   5: 0.478 ns/op
Iteration   1: 0.388 ns/op
Iteration   2: 0.386 ns/op
Iteration   3: 0.386 ns/op
Iteration   4: 0.386 ns/op
Iteration   5: 0.386 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_blank":
  0.384 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.380, 0.384, 0.388), stdev = 0.003
  CI (99.9%): [0.379, 0.388] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline

# Run progress: 28.57% complete, ETA 00:13:29
# Fork: 1 of 2
# Warmup Iteration   1: 1.961 ns/op
# Warmup Iteration   2: 1.766 ns/op
# Warmup Iteration   3: 1.782 ns/op
# Warmup Iteration   4: 1.766 ns/op
# Warmup Iteration   5: 1.766 ns/op
Iteration   1: 1.766 ns/op
Iteration   2: 1.766 ns/op
Iteration   3: 1.766 ns/op
Iteration   4: 1.766 ns/op
Iteration   5: 1.766 ns/op

# Run progress: 35.71% complete, ETA 00:12:07
# Fork: 2 of 2
# Warmup Iteration   1: 2.023 ns/op
# Warmup Iteration   2: 2.167 ns/op
# Warmup Iteration   3: 1.782 ns/op
# Warmup Iteration   4: 1.767 ns/op
# Warmup Iteration   5: 1.766 ns/op
Iteration   1: 1.767 ns/op
Iteration   2: 1.767 ns/op
Iteration   3: 1.767 ns/op
Iteration   4: 1.767 ns/op
Iteration   5: 1.766 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_dont_inline":
  1.766 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (1.766, 1.766, 1.767), stdev = 0.001
  CI (99.9%): [1.766, 1.767] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline

# Run progress: 42.86% complete, ETA 00:10:46
# Fork: 1 of 2
# Warmup Iteration   1: 0.429 ns/op
# Warmup Iteration   2: 0.389 ns/op
# Warmup Iteration   3: 0.386 ns/op
# Warmup Iteration   4: 0.386 ns/op
# Warmup Iteration   5: 0.385 ns/op
Iteration   1: 0.386 ns/op
Iteration   2: 0.386 ns/op
Iteration   3: 0.386 ns/op
Iteration   4: 0.387 ns/op
Iteration   5: 0.386 ns/op

# Run progress: 50.00% complete, ETA 00:09:24
# Fork: 2 of 2
# Warmup Iteration   1: 0.418 ns/op
# Warmup Iteration   2: 0.475 ns/op
# Warmup Iteration   3: 0.386 ns/op
# Warmup Iteration   4: 0.384 ns/op
# Warmup Iteration   5: 0.386 ns/op
Iteration   1: 0.386 ns/op
Iteration   2: 0.385 ns/op
Iteration   3: 0.386 ns/op
Iteration   4: 0.387 ns/op
Iteration   5: 0.386 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.method_inline":
  0.386 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.385, 0.386, 0.387), stdev = 0.001
  CI (99.9%): [0.385, 0.387] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume

# Run progress: 57.14% complete, ETA 00:08:03
# Fork: 1 of 2
# Warmup Iteration   1: 0.582 ns/op
# Warmup Iteration   2: 0.603 ns/op
# Warmup Iteration   3: 0.599 ns/op
# Warmup Iteration   4: 0.501 ns/op
# Warmup Iteration   5: 0.501 ns/op
Iteration   1: 0.501 ns/op
Iteration   2: 0.501 ns/op
Iteration   3: 0.501 ns/op
Iteration   4: 0.501 ns/op
Iteration   5: 0.501 ns/op

# Run progress: 64.29% complete, ETA 00:06:42
# Fork: 2 of 2
# Warmup Iteration   1: 0.589 ns/op
# Warmup Iteration   2: 0.625 ns/op
# Warmup Iteration   3: 0.573 ns/op
# Warmup Iteration   4: 0.573 ns/op
# Warmup Iteration   5: 0.573 ns/op
Iteration   1: 0.573 ns/op
Iteration   2: 0.633 ns/op
Iteration   3: 0.573 ns/op
Iteration   4: 0.573 ns/op
Iteration   5: 0.573 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_blackhole_consume":
  0.543 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (0.501, 0.543, 0.633), stdev = 0.048
  CI (99.9%): [0.471, 0.615] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return

# Run progress: 71.43% complete, ETA 00:05:22
# Fork: 1 of 2
# Warmup Iteration   1: 0.441 ns/op
# Warmup Iteration   2: 0.484 ns/op
# Warmup Iteration   3: 0.392 ns/op
# Warmup Iteration   4: 0.379 ns/op
# Warmup Iteration   5: 0.378 ns/op
Iteration   1: 0.380 ns/op
Iteration   2: 0.378 ns/op
Iteration   3: 0.379 ns/op
Iteration   4: 0.378 ns/op
Iteration   5: 0.378 ns/op

# Run progress: 78.57% complete, ETA 00:04:01
# Fork: 2 of 2
# Warmup Iteration   1: 0.436 ns/op
# Warmup Iteration   2: 0.475 ns/op
# Warmup Iteration   3: 0.378 ns/op
# Warmup Iteration   4: 0.377 ns/op
# Warmup Iteration   5: 0.377 ns/op
Iteration   1: 0.378 ns/op
Iteration   2: 0.377 ns/op
Iteration   3: 0.377 ns/op
Iteration   4: 0.377 ns/op
Iteration   5: 0.377 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_return":
  0.378 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.377, 0.378, 0.380), stdev = 0.001
  CI (99.9%): [0.376, 0.380] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink

# Run progress: 85.71% complete, ETA 00:02:41
# Fork: 1 of 2
# Warmup Iteration   1: 2.278 ns/op
# Warmup Iteration   2: 2.006 ns/op
# Warmup Iteration   3: 2.030 ns/op
# Warmup Iteration   4: 2.006 ns/op
# Warmup Iteration   5: 2.006 ns/op
Iteration   1: 2.006 ns/op
Iteration   2: 2.006 ns/op
Iteration   3: 2.006 ns/op
Iteration   4: 2.006 ns/op
Iteration   5: 2.006 ns/op

# Run progress: 92.86% complete, ETA 00:01:20
# Fork: 2 of 2
# Warmup Iteration   1: 2.211 ns/op
# Warmup Iteration   2: 2.006 ns/op
# Warmup Iteration   3: 2.030 ns/op
# Warmup Iteration   4: 2.006 ns/op
# Warmup Iteration   5: 2.006 ns/op
Iteration   1: 2.006 ns/op
Iteration   2: 2.006 ns/op
Iteration   3: 2.006 ns/op
Iteration   4: 2.210 ns/op
Iteration   5: 2.005 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.InfrastructureBaselineBenchmark.obj_sink":
  2.026 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (2.005, 2.026, 2.210), stdev = 0.065
  CI (99.9%): [1.928, 2.124] (assumes normal distribution)


# Run complete. Total time: 00:18:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt  Score   Error  Units
InfrastructureBaselineBenchmark.method_baseline        avgt   10  0.383 ± 0.018  ns/op
InfrastructureBaselineBenchmark.method_blank           avgt   10  0.384 ± 0.004  ns/op
InfrastructureBaselineBenchmark.method_dont_inline     avgt   10  1.766 ± 0.001  ns/op
InfrastructureBaselineBenchmark.method_inline          avgt   10  0.386 ± 0.001  ns/op
InfrastructureBaselineBenchmark.obj_blackhole_consume  avgt   10  0.543 ± 0.072  ns/op
InfrastructureBaselineBenchmark.obj_return             avgt   10  0.378 ± 0.002  ns/op
InfrastructureBaselineBenchmark.obj_sink               avgt   10  2.026 ± 0.098  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/InfrastructureBaselineBenchmark.scala.csv

Finished InfrastructureBaselineBenchmark benchmark (Mon Oct 13 12:11:47 PM UTC 2025)
Mon Oct 13 12:11:47 PM UTC 2025

Running MutableSetBenchmark benchmark ...
Mon Oct 13 12:11:47 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.MutableSetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/MutableSetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 10754.390 ns/op
# Warmup Iteration   2: 6455.585 ns/op
# Warmup Iteration   3: 7874.652 ns/op
# Warmup Iteration   4: 6474.620 ns/op
# Warmup Iteration   5: 6476.390 ns/op
Iteration   1: 6470.314 ns/op
Iteration   2: 6465.361 ns/op
Iteration   3: 7109.347 ns/op
Iteration   4: 6473.971 ns/op
Iteration   5: 6472.522 ns/op

# Run progress: 50.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 11616.239 ns/op
# Warmup Iteration   2: 7822.186 ns/op
# Warmup Iteration   3: 7891.951 ns/op
# Warmup Iteration   4: 6427.510 ns/op
# Warmup Iteration   5: 6430.615 ns/op
Iteration   1: 6435.505 ns/op
Iteration   2: 6429.063 ns/op
Iteration   3: 7008.438 ns/op
Iteration   4: 6424.045 ns/op
Iteration   5: 6415.575 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.MutableSetBenchmark.flatMap":
  6570.414 ±(99.9%) 392.253 ns/op [Average]
  (min, avg, max) = (6415.575, 6570.414, 7109.347), stdev = 259.451
  CI (99.9%): [6178.161, 6962.667] (assumes normal distribution)


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    (size)  Mode  Cnt     Score     Error  Units
MutableSetBenchmark.flatMap    1000  avgt   10  6570.414 ± 392.253  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/MutableSetBenchmark.scala.csv

Finished MutableSetBenchmark benchmark (Mon Oct 13 12:14:36 PM UTC 2025)
Mon Oct 13 12:14:36 PM UTC 2025

Running SetBenchmark benchmark ...
Mon Oct 13 12:14:36 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.SetBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/SetBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 11031.200 ns/op
# Warmup Iteration   2: 8837.598 ns/op
# Warmup Iteration   3: 8665.446 ns/op
# Warmup Iteration   4: 8676.098 ns/op
# Warmup Iteration   5: 8665.709 ns/op
Iteration   1: 8669.153 ns/op
Iteration   2: 8673.269 ns/op
Iteration   3: 8674.946 ns/op
Iteration   4: 8675.085 ns/op
Iteration   5: 8670.199 ns/op

# Run progress: 50.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 11900.032 ns/op
# Warmup Iteration   2: 10762.384 ns/op
# Warmup Iteration   3: 8628.390 ns/op
# Warmup Iteration   4: 8601.986 ns/op
# Warmup Iteration   5: 8595.542 ns/op
Iteration   1: 8597.423 ns/op
Iteration   2: 8577.086 ns/op
Iteration   3: 8582.402 ns/op
Iteration   4: 8573.682 ns/op
Iteration   5: 8577.967 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.SetBenchmark.flatMap":
  8627.121 ±(99.9%) 73.024 ns/op [Average]
  (min, avg, max) = (8573.682, 8627.121, 8675.085), stdev = 48.301
  CI (99.9%): [8554.097, 8700.145] (assumes normal distribution)


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark             (size)  Mode  Cnt     Score    Error  Units
SetBenchmark.flatMap    1000  avgt   10  8627.121 ± 73.024  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/SetBenchmark.scala.csv

Finished SetBenchmark benchmark (Mon Oct 13 12:17:25 PM UTC 2025)
Mon Oct 13 12:17:25 PM UTC 2025

Running VectorBenchmark benchmark ...
Mon Oct 13 12:17:25 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.VectorBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/VectorBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap
# Parameters: (size = 1000)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 52070.642 ns/op
# Warmup Iteration   2: 23978.957 ns/op
# Warmup Iteration   3: 20946.439 ns/op
# Warmup Iteration   4: 17165.225 ns/op
# Warmup Iteration   5: 17694.821 ns/op
Iteration   1: 17698.144 ns/op
Iteration   2: 17692.124 ns/op
Iteration   3: 17691.738 ns/op
Iteration   4: 17692.016 ns/op
Iteration   5: 17696.464 ns/op

# Run progress: 50.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 36847.761 ns/op
# Warmup Iteration   2: 21264.638 ns/op
# Warmup Iteration   3: 19117.450 ns/op
# Warmup Iteration   4: 17685.073 ns/op
# Warmup Iteration   5: 17687.451 ns/op
Iteration   1: 17685.956 ns/op
Iteration   2: 19316.992 ns/op
Iteration   3: 19545.490 ns/op
Iteration   4: 17692.456 ns/op
Iteration   5: 19542.492 ns/op


Result "co.datadome.pub.scalabenchmarks.jvms.api.collections.VectorBenchmark.flatMap":
  18225.387 ±(99.9%) 1300.101 ns/op [Average]
  (min, avg, max) = (17685.956, 18225.387, 19545.490), stdev = 859.937
  CI (99.9%): [16925.286, 19525.489] (assumes normal distribution)


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                (size)  Mode  Cnt      Score      Error  Units
VectorBenchmark.flatMap    1000  avgt   10  18225.387 ± 1300.101  ns/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/VectorBenchmark.scala.csv

Finished VectorBenchmark benchmark (Mon Oct 13 12:20:13 PM UTC 2025)
Mon Oct 13 12:20:13 PM UTC 2025

Running CatsEffectPopVarianceBenchmark benchmark ...
Mon Oct 13 12:20:14 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.CatsEffectPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/CatsEffectPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 49578.630 ms/op
# Warmup Iteration   2: 2929.590 ms/op
# Warmup Iteration   3: 3135.674 ms/op
# Warmup Iteration   4: 5157.253 ms/op
# Warmup Iteration   5: 4149.234 ms/op
Iteration   1: 5216.322 ms/op
Iteration   2: 4797.429 ms/op
Iteration   3: 4975.167 ms/op
Iteration   4: 1861.870 ms/op
Iteration   5: 1912.770 ms/op

# Run progress: 50.00% complete, ETA 00:02:27
# Fork: 2 of 2
# Warmup Iteration   1: 61776.226 ms/op
# Warmup Iteration   2: 3350.593 ms/op
# Warmup Iteration   3: 3900.789 ms/op
# Warmup Iteration   4: 4022.705 ms/op
# Warmup Iteration   5: 5396.818 ms/op
Iteration   1: 4785.508 ms/op
Iteration   2: 4117.897 ms/op
Iteration   3: 1717.843 ms/op
Iteration   4: 1833.073 ms/op
Iteration   5: 1673.375 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.catseffect.CatsEffectPopVarianceBenchmark.variance":
  3289.125 ±(99.9%) 2411.027 ms/op [Average]
  (min, avg, max) = (1673.375, 3289.125, 5216.322), stdev = 1594.745
  CI (99.9%): [878.099, 5700.152] (assumes normal distribution)


# Run complete. Total time: 00:05:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (popSize)  Mode  Cnt     Score      Error  Units
CatsEffectPopVarianceBenchmark.variance  134217727  avgt   10  3289.125 ± 2411.027  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/CatsEffectPopVarianceBenchmark.scala.csv

Finished CatsEffectPopVarianceBenchmark benchmark (Mon Oct 13 12:25:24 PM UTC 2025)
Mon Oct 13 12:25:24 PM UTC 2025

Running ZioPopVarianceBenchmark benchmark ...
Mon Oct 13 12:25:24 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.ZioPopVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/ZioPopVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 2
# Warmup Iteration   1: 59793.343 ms/op
# Warmup Iteration   2: 2928.540 ms/op
# Warmup Iteration   3: 3343.834 ms/op
# Warmup Iteration   4: 4865.402 ms/op
# Warmup Iteration   5: 4361.446 ms/op
Iteration   1: 3256.868 ms/op
Iteration   2: 3181.129 ms/op
Iteration   3: 1788.529 ms/op
Iteration   4: 1865.778 ms/op
Iteration   5: 1755.390 ms/op

# Run progress: 50.00% complete, ETA 00:02:40
# Fork: 2 of 2
# Warmup Iteration   1: 63159.560 ms/op
# Warmup Iteration   2: 3178.362 ms/op
# Warmup Iteration   3: 3109.984 ms/op
# Warmup Iteration   4: 4027.385 ms/op
# Warmup Iteration   5: 4408.701 ms/op
Iteration   1: 3216.470 ms/op
Iteration   2: 3634.695 ms/op
Iteration   3: 1865.203 ms/op
Iteration   4: 1654.654 ms/op
Iteration   5: 1886.295 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.libs.zio.ZioPopVarianceBenchmark.variance":
  2410.501 ±(99.9%) 1204.713 ms/op [Average]
  (min, avg, max) = (1654.654, 2410.501, 3634.695), stdev = 796.843
  CI (99.9%): [1205.788, 3615.214] (assumes normal distribution)


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         (popSize)  Mode  Cnt     Score      Error  Units
ZioPopVarianceBenchmark.variance  134217727  avgt   10  2410.501 ± 1204.713  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/ZioPopVarianceBenchmark.scala.csv

Finished ZioPopVarianceBenchmark benchmark (Mon Oct 13 12:30:51 PM UTC 2025)
Mon Oct 13 12:30:51 PM UTC 2025

Running DijkstraBenchmark benchmark ...
Mon Oct 13 12:30:51 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.DijkstraBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/DijkstraBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists
# Parameters: (size = 8192)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 20121.081 ms/op
# Warmup Iteration   2: 20631.369 ms/op
# Warmup Iteration   3: 11487.896 ms/op
# Warmup Iteration   4: 11490.831 ms/op
# Warmup Iteration   5: 11490.191 ms/op
Iteration   1: 11489.823 ms/op
Iteration   2: 11491.965 ms/op
Iteration   3: 11484.102 ms/op
Iteration   4: 11481.968 ms/op
Iteration   5: 11480.408 ms/op

# Run progress: 25.00% complete, ETA 00:07:18
# Fork: 2 of 2
# Warmup Iteration   1: 20701.563 ms/op
# Warmup Iteration   2: 11729.845 ms/op
# Warmup Iteration   3: 11594.790 ms/op
# Warmup Iteration   4: 11543.367 ms/op
# Warmup Iteration   5: 11552.644 ms/op
Iteration   1: 11542.975 ms/op
Iteration   2: 11544.394 ms/op
Iteration   3: 11543.282 ms/op
Iteration   4: 11547.337 ms/op
Iteration   5: 11550.417 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_lists":
  11515.667 ±(99.9%) 48.203 ms/op [Average]
  (min, avg, max) = (11480.408, 11515.667, 11550.417), stdev = 31.883
  CI (99.9%): [11467.464, 11563.870] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix
# Parameters: (size = 8192)

# Run progress: 50.00% complete, ETA 00:04:44
# Fork: 1 of 2
# Warmup Iteration   1: 161.933 ms/op
# Warmup Iteration   2: 148.886 ms/op
# Warmup Iteration   3: 123.995 ms/op
# Warmup Iteration   4: 124.037 ms/op
# Warmup Iteration   5: 124.054 ms/op
Iteration   1: 124.012 ms/op
Iteration   2: 123.975 ms/op
Iteration   3: 124.056 ms/op
Iteration   4: 124.270 ms/op
Iteration   5: 124.046 ms/op

# Run progress: 75.00% complete, ETA 00:02:04
# Fork: 2 of 2
# Warmup Iteration   1: 163.200 ms/op
# Warmup Iteration   2: 148.699 ms/op
# Warmup Iteration   3: 122.944 ms/op
# Warmup Iteration   4: 147.870 ms/op
# Warmup Iteration   5: 124.258 ms/op
Iteration   1: 124.282 ms/op
Iteration   2: 124.196 ms/op
Iteration   3: 124.147 ms/op
Iteration   4: 135.718 ms/op
Iteration   5: 135.239 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.dijkstra.DijkstraBenchmark.adjacency_matrix":
  126.394 ±(99.9%) 7.242 ms/op [Average]
  (min, avg, max) = (123.975, 126.394, 135.718), stdev = 4.790
  CI (99.9%): [119.152, 133.636] (assumes normal distribution)


# Run complete. Total time: 00:07:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           (size)  Mode  Cnt      Score    Error  Units
DijkstraBenchmark.adjacency_lists     8192  avgt   10  11515.667 ± 48.203  ms/op
DijkstraBenchmark.adjacency_matrix    8192  avgt   10    126.394 ±  7.242  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/DijkstraBenchmark.scala.csv

Finished DijkstraBenchmark benchmark (Mon Oct 13 12:38:39 PM UTC 2025)
Mon Oct 13 12:38:39 PM UTC 2025

Running KnapsackBenchmark benchmark ...
Mon Oct 13 12:38:39 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.KnapsackBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/KnapsackBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic
# Parameters: (itemsCount = 50000)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 9618.840 ms/op
# Warmup Iteration   2: 10151.795 ms/op
# Warmup Iteration   3: 728.752 ms/op
# Warmup Iteration   4: 566.631 ms/op
# Warmup Iteration   5: 528.267 ms/op
Iteration   1: 527.409 ms/op
Iteration   2: 526.820 ms/op
Iteration   3: 526.737 ms/op
Iteration   4: 526.798 ms/op
Iteration   5: 526.372 ms/op

# Run progress: 25.00% complete, ETA 00:04:34
# Fork: 2 of 2
# Warmup Iteration   1: 10111.844 ms/op
# Warmup Iteration   2: 10299.141 ms/op
# Warmup Iteration   3: 9910.831 ms/op
# Warmup Iteration   4: 5230.289 ms/op
# Warmup Iteration   5: 5229.947 ms/op
Iteration   1: 5194.185 ms/op
Iteration   2: 3645.535 ms/op
Iteration   3: 577.770 ms/op
Iteration   4: 527.859 ms/op
Iteration   5: 528.161 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.dynamic":
  1310.765 ±(99.9%) 2538.219 ms/op [Average]
  (min, avg, max) = (526.372, 1310.765, 5194.185), stdev = 1678.875
  CI (99.9%): [≈ 0, 3848.984] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy
# Parameters: (itemsCount = 50000)

# Run progress: 50.00% complete, ETA 00:03:20
# Fork: 1 of 2
# Warmup Iteration   1: 17.761 ms/op
# Warmup Iteration   2: 12.339 ms/op
# Warmup Iteration   3: 10.103 ms/op
# Warmup Iteration   4: 10.073 ms/op
# Warmup Iteration   5: 10.075 ms/op
Iteration   1: 10.033 ms/op
Iteration   2: 10.014 ms/op
Iteration   3: 10.977 ms/op
Iteration   4: 10.945 ms/op
Iteration   5: 9.973 ms/op

# Run progress: 75.00% complete, ETA 00:01:34
# Fork: 2 of 2
# Warmup Iteration   1: 13.525 ms/op
# Warmup Iteration   2: 12.098 ms/op
# Warmup Iteration   3: 9.826 ms/op
# Warmup Iteration   4: 9.639 ms/op
# Warmup Iteration   5: 9.678 ms/op
Iteration   1: 9.471 ms/op
Iteration   2: 9.472 ms/op
Iteration   3: 9.478 ms/op
Iteration   4: 9.489 ms/op
Iteration   5: 9.486 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.knapsack.KnapsackBenchmark.greedy":
  9.934 ±(99.9%) 0.896 ms/op [Average]
  (min, avg, max) = (9.471, 9.934, 10.977), stdev = 0.593
  CI (99.9%): [9.038, 10.830] (assumes normal distribution)


# Run complete. Total time: 00:06:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  (itemsCount)  Mode  Cnt     Score      Error  Units
KnapsackBenchmark.dynamic         50000  avgt   10  1310.765 ± 2538.219  ms/op
KnapsackBenchmark.greedy          50000  avgt   10     9.934 ±    0.896  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/KnapsackBenchmark.scala.csv

Finished KnapsackBenchmark benchmark (Mon Oct 13 12:44:47 PM UTC 2025)
Mon Oct 13 12:44:47 PM UTC 2025

Running PopulationVarianceBenchmark benchmark ...
Mon Oct 13 12:44:48 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PopulationVarianceBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/PopulationVarianceBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional
# Parameters: (popSize = 134217727)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 2
# Warmup Iteration   1: 1784.008 ms/op
# Warmup Iteration   2: 1451.708 ms/op
# Warmup Iteration   3: 2085.899 ms/op
# Warmup Iteration   4: 1439.818 ms/op
# Warmup Iteration   5: 1225.224 ms/op
Iteration   1: 1224.993 ms/op
Iteration   2: 1403.437 ms/op
Iteration   3: 1331.420 ms/op
Iteration   4: 1230.525 ms/op
Iteration   5: 1458.782 ms/op

# Run progress: 25.00% complete, ETA 00:04:40
# Fork: 2 of 2
# Warmup Iteration   1: 1935.044 ms/op
# Warmup Iteration   2: 1255.663 ms/op
# Warmup Iteration   3: 1191.485 ms/op
# Warmup Iteration   4: 1177.082 ms/op
# Warmup Iteration   5: 1197.030 ms/op
Iteration   1: 1214.013 ms/op
Iteration   2: 1331.656 ms/op
Iteration   3: 1351.610 ms/op
Iteration   4: 1475.616 ms/op
Iteration   5: 1443.577 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.functional":
  1346.563 ±(99.9%) 149.653 ms/op [Average]
  (min, avg, max) = (1214.013, 1346.563, 1475.616), stdev = 98.986
  CI (99.9%): [1196.910, 1496.216] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative
# Parameters: (popSize = 134217727)

# Run progress: 50.00% complete, ETA 00:03:04
# Fork: 1 of 2
# Warmup Iteration   1: 473.448 ms/op
# Warmup Iteration   2: 272.089 ms/op
# Warmup Iteration   3: 270.346 ms/op
# Warmup Iteration   4: 270.444 ms/op
# Warmup Iteration   5: 270.369 ms/op
Iteration   1: 270.388 ms/op
Iteration   2: 270.363 ms/op
Iteration   3: 270.326 ms/op
Iteration   4: 270.337 ms/op
Iteration   5: 270.307 ms/op

# Run progress: 75.00% complete, ETA 00:01:30
# Fork: 2 of 2
# Warmup Iteration   1: 375.065 ms/op
# Warmup Iteration   2: 273.377 ms/op
# Warmup Iteration   3: 271.864 ms/op
# Warmup Iteration   4: 271.836 ms/op
# Warmup Iteration   5: 271.895 ms/op
Iteration   1: 271.847 ms/op
Iteration   2: 271.847 ms/op
Iteration   3: 271.879 ms/op
Iteration   4: 298.879 ms/op
Iteration   5: 270.300 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.popvariance.PopulationVarianceBenchmark.iterative":
  273.647 ±(99.9%) 13.447 ms/op [Average]
  (min, avg, max) = (270.300, 273.647, 298.879), stdev = 8.895
  CI (99.9%): [260.200, 287.095] (assumes normal distribution)


# Run complete. Total time: 00:05:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (popSize)  Mode  Cnt     Score     Error  Units
PopulationVarianceBenchmark.functional  134217727  avgt   10  1346.563 ± 149.653  ms/op
PopulationVarianceBenchmark.iterative   134217727  avgt   10   273.647 ±  13.447  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/PopulationVarianceBenchmark.scala.csv

Finished PopulationVarianceBenchmark benchmark (Mon Oct 13 12:50:50 PM UTC 2025)
Mon Oct 13 12:50:50 PM UTC 2025

Running PrimesBenchmark benchmark ...
Mon Oct 13 12:50:51 PM UTC 2025
java  -jar "target/scala-3.7.3/scala-jvm-benchmarks-assembly-0.0.0.jar" "\\.PrimesBenchmark\\." -foe true -wi 5 -w 5 -i 5 -r 10 -f 2 -rf csv -rff results/jdk-21/x86_64/jmh/azul-prime-vm/PrimesBenchmark.scala.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve
# Parameters: (n = 8388608)

# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 2
# Warmup Iteration   1: 39.531 ms/op
# Warmup Iteration   2: 45.192 ms/op
# Warmup Iteration   3: 45.532 ms/op
# Warmup Iteration   4: 35.007 ms/op
# Warmup Iteration   5: 35.275 ms/op
Iteration   1: 35.583 ms/op
Iteration   2: 35.714 ms/op
Iteration   3: 35.680 ms/op
Iteration   4: 36.112 ms/op
Iteration   5: 35.956 ms/op

# Run progress: 12.50% complete, ETA 00:09:31
# Fork: 2 of 2
# Warmup Iteration   1: 40.119 ms/op
# Warmup Iteration   2: 42.844 ms/op
# Warmup Iteration   3: 35.397 ms/op
# Warmup Iteration   4: 35.169 ms/op
# Warmup Iteration   5: 34.939 ms/op
Iteration   1: 35.812 ms/op
Iteration   2: 35.684 ms/op
Iteration   3: 39.433 ms/op
Iteration   4: 36.160 ms/op
Iteration   5: 36.051 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.eratosthenes_sieve":
  36.218 ±(99.9%) 1.735 ms/op [Average]
  (min, avg, max) = (35.583, 36.218, 39.433), stdev = 1.147
  CI (99.9%): [34.484, 37.953] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin
# Parameters: (n = 8388608)

# Run progress: 25.00% complete, ETA 00:08:06
# Fork: 1 of 2
# Warmup Iteration   1: 4046.852 ms/op
# Warmup Iteration   2: 3840.191 ms/op
# Warmup Iteration   3: 3840.109 ms/op
# Warmup Iteration   4: 3840.140 ms/op
# Warmup Iteration   5: 3840.026 ms/op
Iteration   1: 3839.890 ms/op
Iteration   2: 3839.937 ms/op
Iteration   3: 3839.895 ms/op
Iteration   4: 3839.928 ms/op
Iteration   5: 3839.864 ms/op

# Run progress: 37.50% complete, ETA 00:07:21
# Fork: 2 of 2
# Warmup Iteration   1: 4045.664 ms/op
# Warmup Iteration   2: 3839.592 ms/op
# Warmup Iteration   3: 3839.531 ms/op
# Warmup Iteration   4: 3839.483 ms/op
# Warmup Iteration   5: 3839.885 ms/op
Iteration   1: 3839.405 ms/op
Iteration   2: 3839.358 ms/op
Iteration   3: 3839.362 ms/op
Iteration   4: 4120.352 ms/op
Iteration   5: 3839.364 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.miller_rabin":
  3867.736 ±(99.9%) 134.194 ms/op [Average]
  (min, avg, max) = (3839.358, 3867.736, 4120.352), stdev = 88.761
  CI (99.9%): [3733.542, 4001.929] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional
# Parameters: (n = 8388608)

# Run progress: 50.00% complete, ETA 00:06:08
# Fork: 1 of 2
# Warmup Iteration   1: 4313.461 ms/op
# Warmup Iteration   2: 3976.999 ms/op
# Warmup Iteration   3: 3973.088 ms/op
# Warmup Iteration   4: 3973.285 ms/op
# Warmup Iteration   5: 3973.254 ms/op
Iteration   1: 3973.095 ms/op
Iteration   2: 3973.374 ms/op
Iteration   3: 3972.865 ms/op
Iteration   4: 3972.981 ms/op
Iteration   5: 3973.042 ms/op

# Run progress: 62.50% complete, ETA 00:04:43
# Fork: 2 of 2
# Warmup Iteration   1: 4233.160 ms/op
# Warmup Iteration   2: 3977.230 ms/op
# Warmup Iteration   3: 3973.269 ms/op
# Warmup Iteration   4: 3973.444 ms/op
# Warmup Iteration   5: 3972.932 ms/op
Iteration   1: 3973.292 ms/op
Iteration   2: 4294.102 ms/op
Iteration   3: 3973.483 ms/op
Iteration   4: 3973.620 ms/op
Iteration   5: 3973.635 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_functional":
  4005.349 ±(99.9%) 153.390 ms/op [Average]
  (min, avg, max) = (3972.865, 4005.349, 4294.102), stdev = 101.458
  CI (99.9%): [3851.959, 4158.738] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.8, Zing 64-Bit Tiered VM, 21.0.8-zing_25.08.0.0-b3-release-linux-X86_64
# *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
# VM invoker: /usr/lib/jvm/zing-jdk21.0.8-25.08.0.0-3-amd64/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative
# Parameters: (n = 8388608)

# Run progress: 75.00% complete, ETA 00:03:13
# Fork: 1 of 2
# Warmup Iteration   1: 3898.768 ms/op
# Warmup Iteration   2: 3747.746 ms/op
# Warmup Iteration   3: 3689.861 ms/op
# Warmup Iteration   4: 3689.691 ms/op
# Warmup Iteration   5: 3689.755 ms/op
Iteration   1: 3689.701 ms/op
Iteration   2: 3689.726 ms/op
Iteration   3: 3689.727 ms/op
Iteration   4: 3689.784 ms/op
Iteration   5: 3689.705 ms/op

# Run progress: 87.50% complete, ETA 00:01:36
# Fork: 2 of 2
# Warmup Iteration   1: 3917.361 ms/op
# Warmup Iteration   2: 4152.876 ms/op
# Warmup Iteration   3: 3690.486 ms/op
# Warmup Iteration   4: 3690.581 ms/op
# Warmup Iteration   5: 3690.301 ms/op
Iteration   1: 3690.552 ms/op
Iteration   2: 3690.427 ms/op
Iteration   3: 3690.376 ms/op
Iteration   4: 3690.388 ms/op
Iteration   5: 3690.441 ms/op


Result "co.datadome.pub.scalabenchmarks.jvms.misc.primes.PrimesBenchmark.trial_division_iterative":
  3690.083 ±(99.9%) 0.570 ms/op [Average]
  (min, avg, max) = (3689.701, 3690.083, 3690.552), stdev = 0.377
  CI (99.9%): [3689.513, 3690.652] (assumes normal distribution)


# Run complete. Total time: 00:12:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      (n)  Mode  Cnt     Score     Error  Units
PrimesBenchmark.eratosthenes_sieve         8388608  avgt   10    36.218 ±   1.735  ms/op
PrimesBenchmark.miller_rabin               8388608  avgt   10  3867.736 ± 134.194  ms/op
PrimesBenchmark.trial_division_functional  8388608  avgt   10  4005.349 ± 153.390  ms/op
PrimesBenchmark.trial_division_iterative   8388608  avgt   10  3690.083 ±   0.570  ms/op

Benchmark result is saved to results/jdk-21/x86_64/jmh/azul-prime-vm/PrimesBenchmark.scala.csv

Finished PrimesBenchmark benchmark (Mon Oct 13 01:03:54 PM UTC 2025)
Mon Oct 13 01:03:54 PM UTC 2025

Finished Azul Prime VM test suite!

Elapsed: 71 minutes and 3 seconds.
